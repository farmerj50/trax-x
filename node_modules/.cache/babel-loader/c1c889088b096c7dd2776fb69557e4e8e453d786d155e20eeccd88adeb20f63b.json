{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\StocksPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport \"./StocksPage.css\";\nimport StockTracker from \"./StockTracker\";\nimport { StockChartComponent, StockChartSeriesCollectionDirective, StockChartSeriesDirective, StockChartIndicatorsDirective, StockChartIndicatorDirective, Inject, DateTime, Tooltip, RangeTooltip, Crosshair, LineSeries, CandleSeries, Legend, Export, EmaIndicator, TmaIndicator, SmaIndicator, MomentumIndicator, AtrIndicator, AccumulationDistributionIndicator, BollingerBands, MacdIndicator, StochasticIndicator, RsiIndicator } from \"@syncfusion/ej2-react-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StocksPage = () => {\n  _s();\n  const [ticker, setTicker] = useState(\"\");\n  const [selectedTicker, setSelectedTicker] = useState(\"AAPL\");\n  const [chartData, setChartData] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [selectedIndicator, setSelectedIndicator] = useState(\"Ema\");\n  const [loading, setLoading] = useState(false);\n  const indicatorTypes = [{\n    value: \"Ema\",\n    label: \"EMA\"\n  }, {\n    value: \"Sma\",\n    label: \"SMA\"\n  }, {\n    value: \"Tma\",\n    label: \"TMA\"\n  }, {\n    value: \"Rsi\",\n    label: \"RSI\"\n  }, {\n    value: \"Momentum\",\n    label: \"Momentum\"\n  }, {\n    value: \"Macd\",\n    label: \"MACD\"\n  }, {\n    value: \"Stochastic\",\n    label: \"Stochastic\"\n  }, {\n    value: \"BollingerBands\",\n    label: \"Bollinger Bands\"\n  }];\n  const fetchChartData = async tickerSymbol => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${tickerSymbol}`);\n      const data = await response.json();\n      if (data.dates) {\n        const formattedData = data.dates.map((date, index) => ({\n          x: new Date(date),\n          open: data.open[index],\n          high: data.high[index],\n          low: data.low[index],\n          close: data.close[index]\n        }));\n        setChartData(formattedData);\n        setError(\"\");\n      } else {\n        setChartData([]);\n        setError(\"No data available for the selected ticker.\");\n      }\n    } catch (err) {\n      setError(\"Failed to load chart data.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchChartData(selectedTicker);\n  }, [selectedTicker]);\n  const handleSearch = () => {\n    if (ticker.trim() !== \"\") {\n      setSelectedTicker(ticker.toUpperCase());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stocks-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [selectedTicker, \" Stock Analysis\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter stock ticker\",\n        value: ticker,\n        onChange: e => setTicker(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSelectedIndicator(e.target.value),\n        value: selectedIndicator,\n        children: indicatorTypes.map(indicator => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: indicator.value,\n          children: indicator.label\n        }, indicator.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n      children: /*#__PURE__*/_jsxDEV(StockChartComponent, {\n        primaryXAxis: {\n          valueType: \"DateTime\"\n        },\n        primaryYAxis: {\n          labelFormat: \"${value}\"\n        },\n        legendSettings: {\n          visible: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(Inject, {\n          services: [CandleSeries, Legend, EmaIndicator]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StockChartSeriesCollectionDirective, {\n          children: /*#__PURE__*/_jsxDEV(StockChartSeriesDirective, {\n            dataSource: chartData,\n            type: \"Candle\",\n            xName: \"x\",\n            open: \"open\",\n            close: \"close\",\n            high: \"high\",\n            low: \"low\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StockChartIndicatorsDirective, {\n          children: /*#__PURE__*/_jsxDEV(StockChartIndicatorDirective, {\n            type: selectedIndicator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(StocksPage, \"SSwJtPGgrGa2q/qxcJu8UQYoyxQ=\");\n_c = StocksPage;\nexport default StocksPage;\nvar _c;\n$RefreshReg$(_c, \"StocksPage\");","map":{"version":3,"names":["React","useState","useEffect","ErrorBoundary","StockTracker","StockChartComponent","StockChartSeriesCollectionDirective","StockChartSeriesDirective","StockChartIndicatorsDirective","StockChartIndicatorDirective","Inject","DateTime","Tooltip","RangeTooltip","Crosshair","LineSeries","CandleSeries","Legend","Export","EmaIndicator","TmaIndicator","SmaIndicator","MomentumIndicator","AtrIndicator","AccumulationDistributionIndicator","BollingerBands","MacdIndicator","StochasticIndicator","RsiIndicator","jsxDEV","_jsxDEV","StocksPage","_s","ticker","setTicker","selectedTicker","setSelectedTicker","chartData","setChartData","error","setError","selectedIndicator","setSelectedIndicator","loading","setLoading","indicatorTypes","value","label","fetchChartData","tickerSymbol","response","fetch","data","json","dates","formattedData","map","date","index","x","Date","open","high","low","close","err","handleSearch","trim","toUpperCase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","indicator","style","color","primaryXAxis","valueType","primaryYAxis","labelFormat","legendSettings","visible","services","dataSource","xName","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/StocksPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\nimport \"./StocksPage.css\";\r\nimport StockTracker from \"./StockTracker\";\r\nimport {\r\n  StockChartComponent,\r\n  StockChartSeriesCollectionDirective,\r\n  StockChartSeriesDirective,\r\n  StockChartIndicatorsDirective,\r\n  StockChartIndicatorDirective,\r\n  Inject,\r\n  DateTime,\r\n  Tooltip,\r\n  RangeTooltip,\r\n  Crosshair,\r\n  LineSeries,\r\n  CandleSeries,\r\n  Legend,\r\n  Export,\r\n  EmaIndicator,\r\n  TmaIndicator,\r\n  SmaIndicator,\r\n  MomentumIndicator,\r\n  AtrIndicator,\r\n  AccumulationDistributionIndicator,\r\n  BollingerBands,\r\n  MacdIndicator,\r\n  StochasticIndicator,\r\n  RsiIndicator,\r\n} from \"@syncfusion/ej2-react-charts\";\r\n\r\nconst StocksPage = () => {\r\n  const [ticker, setTicker] = useState(\"\");\r\n  const [selectedTicker, setSelectedTicker] = useState(\"AAPL\");\r\n  const [chartData, setChartData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [selectedIndicator, setSelectedIndicator] = useState(\"Ema\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const indicatorTypes = [\r\n    { value: \"Ema\", label: \"EMA\" },\r\n    { value: \"Sma\", label: \"SMA\" },\r\n    { value: \"Tma\", label: \"TMA\" },\r\n    { value: \"Rsi\", label: \"RSI\" },\r\n    { value: \"Momentum\", label: \"Momentum\" },\r\n    { value: \"Macd\", label: \"MACD\" },\r\n    { value: \"Stochastic\", label: \"Stochastic\" },\r\n    { value: \"BollingerBands\", label: \"Bollinger Bands\" },\r\n  ];\r\n\r\n  const fetchChartData = async (tickerSymbol) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/api/candlestick?ticker=${tickerSymbol}`\r\n      );\r\n      const data = await response.json();\r\n      if (data.dates) {\r\n        const formattedData = data.dates.map((date, index) => ({\r\n          x: new Date(date),\r\n          open: data.open[index],\r\n          high: data.high[index],\r\n          low: data.low[index],\r\n          close: data.close[index],\r\n        }));\r\n        setChartData(formattedData);\r\n        setError(\"\");\r\n      } else {\r\n        setChartData([]);\r\n        setError(\"No data available for the selected ticker.\");\r\n      }\r\n    } catch (err) {\r\n      setError(\"Failed to load chart data.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchChartData(selectedTicker);\r\n  }, [selectedTicker]);\r\n\r\n  const handleSearch = () => {\r\n    if (ticker.trim() !== \"\") {\r\n      setSelectedTicker(ticker.toUpperCase());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"stocks-page\">\r\n      <h2>{selectedTicker} Stock Analysis</h2>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter stock ticker\"\r\n          value={ticker}\r\n          onChange={(e) => setTicker(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n        <select\r\n          onChange={(e) => setSelectedIndicator(e.target.value)}\r\n          value={selectedIndicator}\r\n        >\r\n          {indicatorTypes.map((indicator) => (\r\n            <option key={indicator.value} value={indicator.value}>\r\n              {indicator.label}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : error ? (\r\n        <p style={{ color: \"red\" }}>{error}</p>\r\n      ) : (\r\n        <ErrorBoundary>\r\n          <StockChartComponent\r\n            primaryXAxis={{ valueType: \"DateTime\" }}\r\n            primaryYAxis={{ labelFormat: \"${value}\" }}\r\n            legendSettings={{ visible: true }}\r\n          >\r\n            <Inject services={[CandleSeries, Legend, EmaIndicator]} />\r\n            <StockChartSeriesCollectionDirective>\r\n              <StockChartSeriesDirective\r\n                dataSource={chartData}\r\n                type=\"Candle\"\r\n                xName=\"x\"\r\n                open=\"open\"\r\n                close=\"close\"\r\n                high=\"high\"\r\n                low=\"low\"\r\n              />\r\n            </StockChartSeriesCollectionDirective>\r\n            <StockChartIndicatorsDirective>\r\n              <StockChartIndicatorDirective type={selectedIndicator} />\r\n            </StockChartIndicatorsDirective>\r\n          </StockChartComponent>\r\n        </ErrorBoundary>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StocksPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}