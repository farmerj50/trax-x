{"ast":null,"code":"import { functor, merge } from \"../utils\";\nimport atr from \"./atr\";\nimport { Renko as defaultOptions } from \"./defaultOptionsForComputation\";\nexport default function () {\n  let options = defaultOptions;\n  let dateAccessor = d => d.date;\n  let dateMutator = (d, date) => {\n    d.date = date;\n  };\n  const calculator = rawData => {\n    const {\n      reversalType,\n      fixedBrickSize,\n      sourcePath,\n      windowSize\n    } = options;\n    const source = sourcePath === \"high/low\" ? d => ({\n      high: d.high,\n      low: d.low\n    }) : d => ({\n      high: d.close,\n      low: d.close\n    });\n    const pricingMethod = source;\n    let brickSize;\n    if (reversalType === \"ATR\") {\n      const atrAlgorithm = atr().options({\n        windowSize\n      });\n      const atrCalculator = merge().algorithm(atrAlgorithm).merge((d, c) => {\n        d[\"atr\" + windowSize] = c;\n      });\n      atrCalculator(rawData);\n      brickSize = d => d[\"atr\" + windowSize];\n    } else {\n      brickSize = functor(fixedBrickSize);\n    }\n    const renkoData = [];\n    let index = 0;\n    let prevBrickClose = rawData[index].open;\n    let prevBrickOpen = rawData[index].open;\n    let brick = {};\n    let direction = 0;\n    rawData.forEach(function (d, idx) {\n      if (brick.from === undefined) {\n        brick.high = d.high;\n        brick.low = d.low;\n        brick.startOfYear = d.startOfYear;\n        brick.startOfQuarter = d.startOfQuarter;\n        brick.startOfMonth = d.startOfMonth;\n        brick.startOfWeek = d.startOfWeek;\n        brick.from = idx;\n        brick.fromDate = dateAccessor(d);\n        dateMutator(brick, dateAccessor(d));\n      }\n      brick.volume = (brick.volume || 0) + d.volume;\n      const prevCloseToHigh = prevBrickClose - pricingMethod(d).high;\n      const prevCloseToLow = prevBrickClose - pricingMethod(d).low;\n      const prevOpenToHigh = prevBrickOpen - pricingMethod(d).high;\n      const prevOpenToLow = prevBrickOpen - pricingMethod(d).low;\n      const priceMovement = Math.min(Math.abs(prevCloseToHigh), Math.abs(prevCloseToLow), Math.abs(prevOpenToHigh), Math.abs(prevOpenToLow));\n      // @ts-ignore\n      brick.high = Math.max(brick.high, d.high);\n      // @ts-ignore\n      brick.low = Math.min(brick.low, d.low);\n      if (!brick.startOfYear) {\n        brick.startOfYear = d.startOfYear;\n        if (brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n      if (!brick.startOfQuarter) {\n        brick.startOfQuarter = d.startOfQuarter;\n        if (brick.startOfQuarter && !brick.startOfYear) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n      if (!brick.startOfMonth) {\n        brick.startOfMonth = d.startOfMonth;\n        if (brick.startOfMonth && !brick.startOfQuarter) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n      if (!brick.startOfWeek) {\n        brick.startOfWeek = d.startOfWeek;\n        if (brick.startOfWeek && !brick.startOfMonth) {\n          dateMutator(brick, dateAccessor(d));\n        }\n      }\n      if (brickSize(d)) {\n        const noOfBricks = Math.floor(priceMovement / brickSize(d));\n        brick.open = Math.abs(prevCloseToHigh) < Math.abs(prevOpenToHigh) || Math.abs(prevCloseToLow) < Math.abs(prevOpenToLow) ? prevBrickClose : prevBrickOpen;\n        if (noOfBricks >= 1) {\n          let j = 0;\n          for (j = 0; j < noOfBricks; j++) {\n            brick.close =\n            // @ts-ignore\n            brick.open < pricingMethod(d).high ?\n            // if brick open is less than current price it means it is green/hollow brick\n            brick.open + brickSize(d) :\n            // @ts-ignore\n            brick.open - brickSize(d);\n            // @ts-ignore\n            direction = brick.close > brick.open ? 1 : -1;\n            brick.direction = direction;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d);\n            // brick.diff = brick.open - brick.close;\n            // brick.atr = d.atr;\n            brick.fullyFormed = true;\n            renkoData.push(brick);\n            prevBrickClose = brick.close;\n            prevBrickOpen = brick.open;\n            const newBrick = {\n              high: brick.high,\n              low: brick.low,\n              open: brick.close,\n              startOfYear: false,\n              startOfMonth: false,\n              startOfQuarter: false,\n              startOfWeek: false\n            };\n            brick = newBrick;\n            brick.from = idx;\n            brick.fromDate = dateAccessor(d);\n            // indexMutator(brick, index + j);\n            dateMutator(brick, dateAccessor(d));\n            brick.volume = (brick.volume || 0) + d.volume;\n          }\n          index = index + j - 1;\n          brick = {};\n        } else {\n          if (idx === rawData.length - 1) {\n            brick.close = direction > 0 ? pricingMethod(d).high : pricingMethod(d).low;\n            brick.to = idx;\n            brick.toDate = dateAccessor(d);\n            dateMutator(brick, dateAccessor(d));\n            brick.fullyFormed = false;\n            renkoData.push(brick);\n          }\n        }\n      }\n    });\n    return renkoData;\n  };\n  calculator.options = newOptions => {\n    if (newOptions === undefined) {\n      return options;\n    }\n    options = Object.assign(Object.assign({}, defaultOptions), newOptions);\n    return calculator;\n  };\n  calculator.dateMutator = newDateMutator => {\n    if (newDateMutator === undefined) {\n      return dateMutator;\n    }\n    dateMutator = newDateMutator;\n    return calculator;\n  };\n  calculator.dateAccessor = newDateAccessor => {\n    if (newDateAccessor === undefined) {\n      return dateAccessor;\n    }\n    dateAccessor = newDateAccessor;\n    return calculator;\n  };\n  return calculator;\n}","map":{"version":3,"names":["functor","merge","atr","Renko","defaultOptions","options","dateAccessor","d","date","dateMutator","calculator","rawData","reversalType","fixedBrickSize","sourcePath","windowSize","source","high","low","close","pricingMethod","brickSize","atrAlgorithm","atrCalculator","algorithm","c","renkoData","index","prevBrickClose","open","prevBrickOpen","brick","direction","forEach","idx","from","undefined","startOfYear","startOfQuarter","startOfMonth","startOfWeek","fromDate","volume","prevCloseToHigh","prevCloseToLow","prevOpenToHigh","prevOpenToLow","priceMovement","Math","min","abs","max","noOfBricks","floor","j","to","toDate","fullyFormed","push","newBrick","length","newOptions","Object","assign","newDateMutator","newDateAccessor"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\calculator\\renko.ts"],"sourcesContent":["import { functor, merge } from \"../utils\";\nimport atr from \"./atr\";\nimport { Renko as defaultOptions } from \"./defaultOptionsForComputation\";\n\nexport default function () {\n    let options = defaultOptions;\n\n    let dateAccessor = (d: any) => d.date;\n    let dateMutator = (d: any, date: any) => {\n        d.date = date;\n    };\n\n    const calculator = (rawData: any[]) => {\n        const { reversalType, fixedBrickSize, sourcePath, windowSize } = options;\n\n        const source =\n            sourcePath === \"high/low\"\n                ? (d: any) => ({ high: d.high, low: d.low })\n                : (d: any) => ({ high: d.close, low: d.close });\n\n        const pricingMethod = source;\n        let brickSize: any;\n\n        if (reversalType === \"ATR\") {\n            const atrAlgorithm = atr().options({ windowSize });\n\n            const atrCalculator = merge()\n                .algorithm(atrAlgorithm)\n                .merge((d: any, c: any) => {\n                    d[\"atr\" + windowSize] = c;\n                });\n\n            atrCalculator(rawData);\n            brickSize = (d: any) => d[\"atr\" + windowSize];\n        } else {\n            brickSize = functor(fixedBrickSize);\n        }\n\n        const renkoData: any[] = [];\n\n        let index = 0;\n        let prevBrickClose = rawData[index].open;\n        let prevBrickOpen = rawData[index].open;\n        let brick: {\n            added?: any;\n            date?: any;\n            direction?: any;\n            from?: any;\n            fromDate?: any;\n            to?: any;\n            toDate?: any;\n            open?: number;\n            high?: number;\n            low?: number;\n            close?: number;\n            fullyFormed?: any;\n            current?: any;\n            changePoint?: any;\n            changeTo?: any;\n            volume?: number;\n            reverseAt?: any;\n            startAs?: any;\n            startOfYear?: any;\n            startOfQuarter?: any;\n            startOfMonth?: any;\n            startOfWeek?: any;\n        } = {};\n        let direction = 0;\n\n        rawData.forEach(function (d, idx) {\n            if (brick.from === undefined) {\n                brick.high = d.high;\n                brick.low = d.low;\n                brick.startOfYear = d.startOfYear;\n                brick.startOfQuarter = d.startOfQuarter;\n                brick.startOfMonth = d.startOfMonth;\n                brick.startOfWeek = d.startOfWeek;\n\n                brick.from = idx;\n                brick.fromDate = dateAccessor(d);\n                dateMutator(brick, dateAccessor(d));\n            }\n            brick.volume = (brick.volume || 0) + d.volume;\n\n            const prevCloseToHigh = prevBrickClose - pricingMethod(d).high;\n            const prevCloseToLow = prevBrickClose - pricingMethod(d).low;\n            const prevOpenToHigh = prevBrickOpen - pricingMethod(d).high;\n            const prevOpenToLow = prevBrickOpen - pricingMethod(d).low;\n            const priceMovement = Math.min(\n                Math.abs(prevCloseToHigh),\n                Math.abs(prevCloseToLow),\n                Math.abs(prevOpenToHigh),\n                Math.abs(prevOpenToLow),\n            );\n\n            // @ts-ignore\n            brick.high = Math.max(brick.high, d.high);\n            // @ts-ignore\n            brick.low = Math.min(brick.low, d.low);\n\n            if (!brick.startOfYear) {\n                brick.startOfYear = d.startOfYear;\n                if (brick.startOfYear) {\n                    dateMutator(brick, dateAccessor(d));\n                }\n            }\n\n            if (!brick.startOfQuarter) {\n                brick.startOfQuarter = d.startOfQuarter;\n                if (brick.startOfQuarter && !brick.startOfYear) {\n                    dateMutator(brick, dateAccessor(d));\n                }\n            }\n\n            if (!brick.startOfMonth) {\n                brick.startOfMonth = d.startOfMonth;\n                if (brick.startOfMonth && !brick.startOfQuarter) {\n                    dateMutator(brick, dateAccessor(d));\n                }\n            }\n            if (!brick.startOfWeek) {\n                brick.startOfWeek = d.startOfWeek;\n                if (brick.startOfWeek && !brick.startOfMonth) {\n                    dateMutator(brick, dateAccessor(d));\n                }\n            }\n\n            if (brickSize(d)) {\n                const noOfBricks = Math.floor(priceMovement / brickSize(d));\n\n                brick.open =\n                    Math.abs(prevCloseToHigh) < Math.abs(prevOpenToHigh) ||\n                    Math.abs(prevCloseToLow) < Math.abs(prevOpenToLow)\n                        ? prevBrickClose\n                        : prevBrickOpen;\n\n                if (noOfBricks >= 1) {\n                    let j = 0;\n                    for (j = 0; j < noOfBricks; j++) {\n                        brick.close =\n                            // @ts-ignore\n                            brick.open < pricingMethod(d).high\n                                ? // if brick open is less than current price it means it is green/hollow brick\n                                  brick.open + brickSize(d)\n                                : // @ts-ignore\n                                  brick.open - brickSize(d);\n                        // @ts-ignore\n                        direction = brick.close > brick.open ? 1 : -1;\n                        brick.direction = direction;\n                        brick.to = idx;\n                        brick.toDate = dateAccessor(d);\n                        // brick.diff = brick.open - brick.close;\n                        // brick.atr = d.atr;\n                        brick.fullyFormed = true;\n                        renkoData.push(brick);\n\n                        prevBrickClose = brick.close;\n                        prevBrickOpen = brick.open;\n\n                        const newBrick = {\n                            high: brick.high,\n                            low: brick.low,\n                            open: brick.close,\n                            startOfYear: false,\n                            startOfMonth: false,\n                            startOfQuarter: false,\n                            startOfWeek: false,\n                        };\n                        brick = newBrick;\n                        brick.from = idx;\n                        brick.fromDate = dateAccessor(d);\n                        // indexMutator(brick, index + j);\n                        dateMutator(brick, dateAccessor(d));\n                        brick.volume = (brick.volume || 0) + d.volume;\n                    }\n                    index = index + j - 1;\n                    brick = {};\n                } else {\n                    if (idx === rawData.length - 1) {\n                        brick.close = direction > 0 ? pricingMethod(d).high : pricingMethod(d).low;\n                        brick.to = idx;\n                        brick.toDate = dateAccessor(d);\n                        dateMutator(brick, dateAccessor(d));\n                        brick.fullyFormed = false;\n                        renkoData.push(brick);\n                    }\n                }\n            }\n        });\n        return renkoData;\n    };\n\n    calculator.options = (newOptions?: any) => {\n        if (newOptions === undefined) {\n            return options;\n        }\n\n        options = { ...defaultOptions, ...newOptions };\n\n        return calculator;\n    };\n\n    calculator.dateMutator = (newDateMutator?: any) => {\n        if (newDateMutator === undefined) {\n            return dateMutator;\n        }\n\n        dateMutator = newDateMutator;\n\n        return calculator;\n    };\n\n    calculator.dateAccessor = (newDateAccessor?: any) => {\n        if (newDateAccessor === undefined) {\n            return dateAccessor;\n        }\n\n        dateAccessor = newDateAccessor;\n\n        return calculator;\n    };\n\n    return calculator;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}