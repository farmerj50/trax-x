{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { getPoint, withInRange, TransformToVisible, animateAddPoints } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * The `StackingAreaSeries` module is used to render the stacking area series.\n */\nvar StackingAreaSeries = /** @class */function (_super) {\n  __extends(StackingAreaSeries, _super);\n  function StackingAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the Stacking area series.\n   *\n   * @param {Series} series - The series to be rendered.\n   * @param {Axis} xAxis - The x-axis of the chart.\n   * @param {Axis} yAxis - The y-axis of the chart.\n   * @param {boolean} isInverted - Specifies whether the chart is inverted.\n   * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n   * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n   * @returns {void}\n   * @private\n   */\n  StackingAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n    var polarAreaType = series.chart.chartAreaType === 'PolarRadar';\n    var getCoordinate = polarAreaType ? TransformToVisible : getPoint;\n    var lineDirection = '';\n    var visiblePoints = this.enableComplexProperty(series);\n    var pointsLength = visiblePoints.length;\n    var stackedvalue = series.stackedValues;\n    var pointIndex;\n    var nextPointIndex;\n    var origin = polarAreaType ? Math.max(series.yAxis.visibleRange.min, stackedvalue.endValues[0]) : Math.max(series.yAxis.visibleRange.min, stackedvalue.startValues[0]);\n    var startPoint = 0;\n    var point1;\n    var point2;\n    var emptyPointDirection = '';\n    if (pointsLength > 0) {\n      point1 = getCoordinate(visiblePoints[0].xValue, origin, xAxis, yAxis, isInverted, series);\n      lineDirection = lineDirection.concat('M' + ' ' + point1.x + ' ' + point1.y + ' ');\n    }\n    var isPolar = series.chart && series.chart.chartAreaType === 'PolarRadar';\n    var index;\n    for (var i = series.index; i >= 0; i--) {\n      if (series.chart.visibleSeries[i].visible) {\n        index = series.chart.visibleSeries[i].index;\n        break;\n      }\n    }\n    for (var i = 0; i < pointsLength; i++) {\n      pointIndex = visiblePoints[i].index;\n      visiblePoints[i].symbolLocations = [];\n      visiblePoints[i].regions = [];\n      if (visiblePoints[i].visible && withInRange(visiblePoints[i - 1], visiblePoints[i], visiblePoints[i + 1], series)) {\n        var startvalue = series.index > 0 && index !== undefined ? this.chart.visibleSeries[index].stackedValues.endValues[pointIndex] : stackedvalue.startValues[pointIndex];\n        point1 = getCoordinate(visiblePoints[i].xValue, !series.visible && series.isLegendClicked ? startvalue : stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted, series);\n        lineDirection = lineDirection.concat('L' + ' ' + point1.x + ' ' + point1.y + ' ');\n        visiblePoints[i].symbolLocations.push(getCoordinate(visiblePoints[i].xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted, series));\n        visiblePoints[i].regions.push(new Rect(visiblePoints[i].symbolLocations[0].x - series.marker.width, visiblePoints[i].symbolLocations[0].y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height));\n      } else {\n        if (!isPolar && series.emptyPointSettings.mode !== 'Drop') {\n          for (var j = i - 1; j >= startPoint; j--) {\n            pointIndex = visiblePoints[j].index;\n            point2 = getCoordinate(visiblePoints[j].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted, series);\n            lineDirection = lineDirection.concat('L' + ' ' + point2.x + ' ' + point2.y + ' ');\n          }\n          if (visiblePoints[i + 1] && visiblePoints[i + 1].visible && (!isPolar || isPolar && this.withinYRange(visiblePoints[i + 1], yAxis))) {\n            nextPointIndex = visiblePoints[i + 1].index;\n            point1 = getCoordinate(visiblePoints[i + 1].xValue, stackedvalue.startValues[nextPointIndex], xAxis, yAxis, isInverted, series);\n            lineDirection = lineDirection.concat('M' + ' ' + point1.x + ' ' + point1.y + ' ');\n          }\n          startPoint = i + 1;\n        }\n      }\n    }\n    if (series.chart.chartAreaType === 'PolarRadar' && visiblePoints.length > 1) {\n      var connectPoints = this.getFirstLastVisiblePoint(series.points);\n      var chart = this.chart;\n      point1 = {\n        'x': connectPoints.first.xValue,\n        'y': stackedvalue.endValues[connectPoints.first.index]\n      };\n      point2 = getCoordinate(point1.x, point1.y, xAxis, yAxis, isInverted, series);\n      lineDirection += 'L' + ' ' + point2.x + ' ' + point2.y + ' ';\n      if (this.chart.visible === 1 && (xAxis.isAxisInverse || yAxis.isAxisInverse)) {\n        this.chart.enableAnimation = false;\n        lineDirection = series.type === 'Polar' ? chart.polarSeriesModule.getPolarIsInversedPath(xAxis, lineDirection) : chart.radarSeriesModule.getRadarIsInversedPath(xAxis, lineDirection);\n      }\n    }\n    if (!isPolar || isPolar && series.index !== this.getFirstSeriesIndex(series.chart.visibleSeries)) {\n      for (var j = pointsLength - 1; j >= startPoint; j--) {\n        pointIndex = visiblePoints[j].index;\n        if (isPolar && !visiblePoints[j].visible) {\n          continue;\n        }\n        var previousSeries = this.getPreviousSeries(series);\n        if (previousSeries.emptyPointSettings.mode !== 'Drop' || !previousSeries.points[j].isEmpty) {\n          point2 = getCoordinate(visiblePoints[j].xValue, !series.visible && series.isLegendClicked && series.index > 0 && index !== undefined ? this.chart.visibleSeries[index].stackedValues.endValues[pointIndex] : stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted, series);\n          if (stackedvalue.startValues[pointIndex] === stackedvalue.endValues[pointIndex]) {\n            point2.y = Math.floor(point2.y);\n          }\n          lineDirection = lineDirection.concat((j === pointsLength - 1 && polarAreaType ? 'M' : 'L') + ' ' + point2.x + ' ' + point2.y + ' ');\n        }\n      }\n    }\n    var options = new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, 0, 'transparent', series.opacity, series.dashArray, lineDirection);\n    this[pointAnimate ? 'addAreaPath' : 'appendLinePath'](options, series, '');\n    /**\n     * To draw border for the path directions of area\n     */\n    if (series.border.width !== 0 && series.visible) {\n      emptyPointDirection = this.removeEmptyPointsBorder(this.getBorderDirection(lineDirection));\n      var options_1 = new PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', series.visible ? series.border.width : 0, series.border.color ? series.border.color : series.interior, 1, series.border.dashArray, emptyPointDirection);\n      this[pointAnimate ? 'addAreaPath' : 'appendLinePath'](options_1, series, '');\n    }\n    if (!pointUpdate && series.visible) {\n      this.renderMarker(series);\n    }\n  };\n  /**\n   * To animate point for stacking area series.\n   *\n   * @param {Series} series - Specifies the series.\n   * @param {number} point - Specifies the point.\n   * @returns {void}\n   * @private\n   */\n  StackingAreaSeries.prototype.updateDirection = function (series, point) {\n    for (var i = 0; i < series.xAxis.series.length; i++) {\n      var stackSeries = series.xAxis.series[i];\n      this.render(stackSeries, stackSeries.xAxis, stackSeries.yAxis, stackSeries.chart.requireInvertedAxis, false, true);\n      for (var j = 0; j < point.length; j++) {\n        if (stackSeries.marker && stackSeries.marker.visible) {\n          stackSeries.chart.markerRender.renderMarker(stackSeries, stackSeries.points[point[j]], stackSeries.points[point[j]].symbolLocations[0], null, true);\n        }\n        if (stackSeries.marker.dataLabel.visible && stackSeries.chart.dataLabelModule) {\n          stackSeries.chart.dataLabelModule.commonId = stackSeries.chart.element.id + '_Series_' + stackSeries.index + '_Point_';\n          stackSeries.chart.dataLabelModule.renderDataLabel(stackSeries, stackSeries.points[point[j]], null, stackSeries.marker.dataLabel);\n        }\n      }\n    }\n  };\n  /**\n   * Adds a area path to equate the start and end paths.\n   *\n   * @param {PathOption} options - The options for the path.\n   * @param {Series} series - The series to which the path belongs.\n   * @param {string} clipRect - The clip rectangle for the path.\n   * @returns {void}\n   * @private\n   */\n  StackingAreaSeries.prototype.addAreaPath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    if (points.previousDirection !== '' && options.d !== '') {\n      var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var endPathCommands = options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n      var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n      if (startPathCommands.length < endPathCommands.length) {\n        for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            startPathCommands.splice((startPathCommands.length + 1) / 2, 0, startPathCommands.slice((startPathCommands.length - 1) / 2)[0], startPathCommands.slice((startPathCommands.length - 1) / 2)[1]);\n          }\n        }\n        animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n      } else if (startPathCommands.length > endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            endPathCommands.splice(1, 0, endPathCommands[1]);\n            endPathCommands.splice(endPathCommands.length - 1, 0, endPathCommands[endPathCommands.length - 1]);\n          }\n        }\n        animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n      } else {\n        animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n      }\n    }\n  };\n  /**\n   * Animates the series.\n   *\n   * @param  {Series} series - Defines the series to animate.\n   * @returns {void}\n   * @private\n   */\n  StackingAreaSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * To destroy the stacking area.\n   *\n   * @returns {void}\n   * @private\n   */\n  StackingAreaSeries.prototype.destroy = function () {\n    /**\n     * Destroy method calling here.\n     */\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   */\n  StackingAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series.\n     */\n    return 'StackingAreaSeries';\n  };\n  /**\n   * Retrieves the previous series from the provided series.\n   *\n   * @param {Series} series - The current series.\n   * @returns {Series} - The previous series.\n   */\n  StackingAreaSeries.prototype.getPreviousSeries = function (series) {\n    var seriesCollection = series.chart.visibleSeries;\n    for (var i = 0, length_1 = seriesCollection.length; i < length_1; i++) {\n      if (series.index === seriesCollection[i].index && i !== 0) {\n        return seriesCollection[i - 1];\n      }\n    }\n    return seriesCollection[0];\n  };\n  /**\n   * To find the first visible series index.\n   *\n   * @param {Series[]} seriesCollection - The first visible series index.\n   * @returns {number} - Returns the first visible series index.\n   */\n  StackingAreaSeries.prototype.getFirstSeriesIndex = function (seriesCollection) {\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      if (series.visible) {\n        return series.index;\n      }\n    }\n    return 0;\n  };\n  return StackingAreaSeries;\n}(LineBase);\nexport { StackingAreaSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","getPoint","withInRange","TransformToVisible","animateAddPoints","PathOption","Rect","LineBase","StackingAreaSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","pointAnimate","pointUpdate","polarAreaType","chart","chartAreaType","getCoordinate","lineDirection","visiblePoints","enableComplexProperty","pointsLength","length","stackedvalue","stackedValues","pointIndex","nextPointIndex","origin","Math","max","visibleRange","min","endValues","startValues","startPoint","point1","point2","emptyPointDirection","xValue","concat","x","y","isPolar","index","i","visibleSeries","visible","symbolLocations","regions","startvalue","undefined","isLegendClicked","push","marker","width","height","emptyPointSettings","mode","j","withinYRange","connectPoints","getFirstLastVisiblePoint","points","first","isAxisInverse","enableAnimation","type","polarSeriesModule","getPolarIsInversedPath","radarSeriesModule","getRadarIsInversedPath","getFirstSeriesIndex","previousSeries","getPreviousSeries","isEmpty","floor","options","element","id","interior","opacity","dashArray","border","removeEmptyPointsBorder","getBorderDirection","options_1","color","renderMarker","updateDirection","point","stackSeries","requireInvertedAxis","markerRender","dataLabel","dataLabelModule","commonId","renderDataLabel","addAreaPath","clipRect","appendPathElement","previousDirection","startPathCommands","match","endPathCommands","maxLength","minLength","splice","slice","redraw","join","duration","doAnimation","option","animation","doLinearAnimation","destroy","getModuleName","seriesCollection","length_1","_i","seriesCollection_1"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/chart/series/stacking-area-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { getPoint, withInRange, TransformToVisible, animateAddPoints } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * The `StackingAreaSeries` module is used to render the stacking area series.\n */\nvar StackingAreaSeries = /** @class */ (function (_super) {\n    __extends(StackingAreaSeries, _super);\n    function StackingAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the Stacking area series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n     * @returns {void}\n     * @private\n     */\n    StackingAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n        var polarAreaType = series.chart.chartAreaType === 'PolarRadar';\n        var getCoordinate = polarAreaType ? TransformToVisible : getPoint;\n        var lineDirection = '';\n        var visiblePoints = this.enableComplexProperty(series);\n        var pointsLength = visiblePoints.length;\n        var stackedvalue = series.stackedValues;\n        var pointIndex;\n        var nextPointIndex;\n        var origin = polarAreaType ?\n            Math.max(series.yAxis.visibleRange.min, stackedvalue.endValues[0]) :\n            Math.max(series.yAxis.visibleRange.min, stackedvalue.startValues[0]);\n        var startPoint = 0;\n        var point1;\n        var point2;\n        var emptyPointDirection = '';\n        if (pointsLength > 0) {\n            point1 = getCoordinate(visiblePoints[0].xValue, origin, xAxis, yAxis, isInverted, series);\n            lineDirection = lineDirection.concat('M' + ' ' + (point1.x) + ' ' + (point1.y) + ' ');\n        }\n        var isPolar = (series.chart && series.chart.chartAreaType === 'PolarRadar');\n        var index;\n        for (var i = series.index; i >= 0; i--) {\n            if (series.chart.visibleSeries[i].visible) {\n                index = series.chart.visibleSeries[i].index;\n                break;\n            }\n        }\n        for (var i = 0; i < pointsLength; i++) {\n            pointIndex = visiblePoints[i].index;\n            visiblePoints[i].symbolLocations = [];\n            visiblePoints[i].regions = [];\n            if (visiblePoints[i].visible && withInRange(visiblePoints[i - 1], visiblePoints[i], visiblePoints[i + 1], series)) {\n                var startvalue = series.index > 0 && index !== undefined ?\n                    this.chart.visibleSeries[index].stackedValues.endValues[pointIndex] :\n                    stackedvalue.startValues[pointIndex];\n                point1 = getCoordinate(visiblePoints[i].xValue, (!series.visible && series.isLegendClicked) ? startvalue :\n                    stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted, series);\n                lineDirection = lineDirection.concat('L' + ' ' + (point1.x) + ' ' + (point1.y) + ' ');\n                visiblePoints[i].symbolLocations.push(getCoordinate(visiblePoints[i].xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted, series));\n                visiblePoints[i].regions.push(new Rect(visiblePoints[i].symbolLocations[0].x - series.marker.width, visiblePoints[i].symbolLocations[0].y - series.marker.height, 2 * series.marker.width, 2 * series.marker.height));\n            }\n            else {\n                if (!isPolar && series.emptyPointSettings.mode !== 'Drop') {\n                    for (var j = i - 1; j >= startPoint; j--) {\n                        pointIndex = visiblePoints[j].index;\n                        point2 = getCoordinate(visiblePoints[j].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted, series);\n                        lineDirection = lineDirection.concat('L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');\n                    }\n                    if (visiblePoints[i + 1] && (visiblePoints[i + 1].visible &&\n                        (!isPolar || (isPolar && this.withinYRange(visiblePoints[i + 1], yAxis))))) {\n                        nextPointIndex = visiblePoints[i + 1].index;\n                        point1 = getCoordinate(visiblePoints[i + 1].xValue, stackedvalue.startValues[nextPointIndex], xAxis, yAxis, isInverted, series);\n                        lineDirection = lineDirection.concat('M' + ' ' + (point1.x) + ' ' + (point1.y) + ' ');\n                    }\n                    startPoint = i + 1;\n                }\n            }\n        }\n        if (series.chart.chartAreaType === 'PolarRadar' && visiblePoints.length > 1) {\n            var connectPoints = this.getFirstLastVisiblePoint(series.points);\n            var chart = this.chart;\n            point1 = { 'x': connectPoints.first.xValue, 'y': stackedvalue.endValues[connectPoints.first.index] };\n            point2 = getCoordinate(point1.x, point1.y, xAxis, yAxis, isInverted, series);\n            lineDirection += ('L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');\n            if (this.chart.visible === 1 && (xAxis.isAxisInverse || yAxis.isAxisInverse)) {\n                this.chart.enableAnimation = false;\n                lineDirection = (series.type === 'Polar' ? chart.polarSeriesModule.getPolarIsInversedPath(xAxis, lineDirection) :\n                    chart.radarSeriesModule.getRadarIsInversedPath(xAxis, lineDirection));\n            }\n        }\n        if (!isPolar || (isPolar && series.index !== this.getFirstSeriesIndex(series.chart.visibleSeries))) {\n            for (var j = pointsLength - 1; j >= startPoint; j--) {\n                pointIndex = visiblePoints[j].index;\n                if (isPolar && !visiblePoints[j].visible) {\n                    continue;\n                }\n                var previousSeries = this.getPreviousSeries(series);\n                if (previousSeries.emptyPointSettings.mode !== 'Drop' || !previousSeries.points[j].isEmpty) {\n                    point2 = getCoordinate(visiblePoints[j].xValue, (!series.visible && series.isLegendClicked && series.index > 0\n                        && index !== undefined) ? this.chart.visibleSeries[index].stackedValues.endValues[pointIndex]\n                        : stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted, series);\n                    if (stackedvalue.startValues[pointIndex] === stackedvalue.endValues[pointIndex]) {\n                        point2.y = Math.floor(point2.y);\n                    }\n                    lineDirection = lineDirection.concat(((j === (pointsLength - 1) && polarAreaType) ? 'M' : 'L')\n                        + ' ' + (point2.x) + ' ' + (point2.y) + ' ');\n                }\n            }\n        }\n        var options = new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, 0, 'transparent', series.opacity, series.dashArray, lineDirection);\n        this[pointAnimate ? 'addAreaPath' : 'appendLinePath'](options, series, '');\n        /**\n         * To draw border for the path directions of area\n         */\n        if (series.border.width !== 0 && series.visible) {\n            emptyPointDirection = this.removeEmptyPointsBorder(this.getBorderDirection(lineDirection));\n            var options_1 = new PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', series.visible ? series.border.width : 0, series.border.color ? series.border.color : series.interior, 1, series.border.dashArray, emptyPointDirection);\n            this[pointAnimate ? 'addAreaPath' : 'appendLinePath'](options_1, series, '');\n        }\n        if (!pointUpdate && series.visible) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * To animate point for stacking area series.\n     *\n     * @param {Series} series - Specifies the series.\n     * @param {number} point - Specifies the point.\n     * @returns {void}\n     * @private\n     */\n    StackingAreaSeries.prototype.updateDirection = function (series, point) {\n        for (var i = 0; i < series.xAxis.series.length; i++) {\n            var stackSeries = series.xAxis.series[i];\n            this.render(stackSeries, stackSeries.xAxis, stackSeries.yAxis, stackSeries.chart.requireInvertedAxis, false, true);\n            for (var j = 0; j < point.length; j++) {\n                if (stackSeries.marker && stackSeries.marker.visible) {\n                    stackSeries.chart.markerRender.renderMarker(stackSeries, stackSeries.points[point[j]], stackSeries.points[point[j]].symbolLocations[0], null, true);\n                }\n                if (stackSeries.marker.dataLabel.visible && stackSeries.chart.dataLabelModule) {\n                    stackSeries.chart.dataLabelModule.commonId = stackSeries.chart.element.id + '_Series_' + stackSeries.index + '_Point_';\n                    stackSeries.chart.dataLabelModule.\n                        renderDataLabel(stackSeries, stackSeries.points[point[j]], null, stackSeries.marker.dataLabel);\n                }\n            }\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @returns {void}\n     * @private\n     */\n    StackingAreaSeries.prototype.addAreaPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        startPathCommands.splice((startPathCommands.length + 1) / 2, 0, startPathCommands.slice((startPathCommands.length - 1) / 2)[0], startPathCommands.slice((startPathCommands.length - 1) / 2)[1]);\n                    }\n                }\n                animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        endPathCommands.splice(1, 0, endPathCommands[1]);\n                        endPathCommands.splice(endPathCommands.length - 1, 0, endPathCommands[endPathCommands.length - 1]);\n                    }\n                }\n                animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    StackingAreaSeries.prototype.doAnimation = function (series) {\n        var option = series.animation;\n        this.doLinearAnimation(series, option);\n    };\n    /**\n     * To destroy the stacking area.\n     *\n     * @returns {void}\n     * @private\n     */\n    StackingAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    StackingAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'StackingAreaSeries';\n    };\n    /**\n     * Retrieves the previous series from the provided series.\n     *\n     * @param {Series} series - The current series.\n     * @returns {Series} - The previous series.\n     */\n    StackingAreaSeries.prototype.getPreviousSeries = function (series) {\n        var seriesCollection = series.chart.visibleSeries;\n        for (var i = 0, length_1 = seriesCollection.length; i < length_1; i++) {\n            if (series.index === seriesCollection[i].index && i !== 0) {\n                return seriesCollection[i - 1];\n            }\n        }\n        return seriesCollection[0];\n    };\n    /**\n     * To find the first visible series index.\n     *\n     * @param {Series[]} seriesCollection - The first visible series index.\n     * @returns {number} - Returns the first visible series index.\n     */\n    StackingAreaSeries.prototype.getFirstSeriesIndex = function (seriesCollection) {\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            if (series.visible) {\n                return series.index;\n            }\n        }\n        return 0;\n    };\n    return StackingAreaSeries;\n}(LineBase));\nexport { StackingAreaSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}