{"ast":null,"code":"import { functor, GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\nexport class BollingerBandTooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.renderSVG = moreProps => {\n      var _a;\n      const {\n        onClick,\n        displayFormat,\n        yAccessor = BollingerBandTooltip.defaultProps.yAccessor,\n        options,\n        origin: originProp,\n        textFill,\n        labelFill,\n        labelFontWeight,\n        className,\n        displayValuesFor = BollingerBandTooltip.defaultProps.displayValuesFor,\n        displayInit,\n        fontFamily,\n        fontSize,\n        fontWeight\n      } = this.props;\n      const {\n        chartConfig: {\n          width,\n          height\n        },\n        fullData\n      } = moreProps;\n      const currentItem = (_a = displayValuesFor(this.props, moreProps)) !== null && _a !== void 0 ? _a : last(fullData);\n      let top = displayInit;\n      let middle = displayInit;\n      let bottom = displayInit;\n      if (currentItem !== undefined) {\n        const item = yAccessor(currentItem);\n        if (item !== undefined) {\n          top = displayFormat(item.top);\n          middle = displayFormat(item.middle);\n          bottom = displayFormat(item.bottom);\n        }\n      }\n      const origin = functor(originProp);\n      const [x, y] = origin(width, height);\n      const {\n        sourcePath,\n        windowSize,\n        multiplier,\n        movingAverageType\n      } = options;\n      const tooltipLabel = `BB(${sourcePath}, ${windowSize}, ${multiplier}, ${movingAverageType}): `;\n      const tooltipValue = `${top}, ${middle}, ${bottom}`;\n      return React.createElement(\"g\", {\n        transform: `translate(${x}, ${y})`,\n        className: className,\n        onClick: onClick\n      }, React.createElement(ToolTipText, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }, React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight\n      }, tooltipLabel), React.createElement(\"tspan\", {\n        fill: textFill\n      }, tooltipValue)));\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      svgDraw: this.renderSVG,\n      drawOn: [\"mousemove\"]\n    });\n  }\n}\nBollingerBandTooltip.defaultProps = {\n  className: \"react-financial-charts-tooltip react-financial-charts-bollingerband-tooltip\",\n  displayFormat: format(\".2f\"),\n  displayValuesFor: (_, props) => props.currentItem,\n  displayInit: \"n/a\",\n  origin: [8, 8],\n  yAccessor: data => data.bb\n};","map":{"version":3,"names":["functor","GenericChartComponent","last","format","React","ToolTipText","ToolTipTSpanLabel","BollingerBandTooltip","Component","constructor","renderSVG","moreProps","onClick","displayFormat","yAccessor","defaultProps","options","origin","originProp","textFill","labelFill","labelFontWeight","className","displayValuesFor","displayInit","fontFamily","fontSize","fontWeight","props","chartConfig","width","height","fullData","currentItem","_a","top","middle","bottom","undefined","item","x","y","sourcePath","windowSize","multiplier","movingAverageType","tooltipLabel","tooltipValue","createElement","transform","fill","render","clip","svgDraw","drawOn","_","data","bb"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\BollingerBandTooltip.tsx"],"sourcesContent":["import { functor, GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\n\nexport interface BollingerBandTooltipProps {\n    readonly className?: string;\n    readonly displayFormat: (value: number) => string;\n    readonly displayInit?: string;\n    readonly displayValuesFor?: (props: BollingerBandTooltipProps, moreProps: any) => any;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly labelFill?: string;\n    readonly labelFontWeight?: number;\n    readonly onClick?: (event: React.MouseEvent) => void;\n    readonly options: {\n        movingAverageType: string;\n        multiplier: number;\n        sourcePath: string;\n        windowSize: number;\n    };\n    readonly origin?: [number, number] | ((width: number, height: number) => [number, number]);\n    readonly textFill?: string;\n    readonly yAccessor?: (data: any) => { bottom: number; middle: number; top: number };\n}\n\nexport class BollingerBandTooltip extends React.Component<BollingerBandTooltipProps> {\n    public static defaultProps = {\n        className: \"react-financial-charts-tooltip react-financial-charts-bollingerband-tooltip\",\n        displayFormat: format(\".2f\"),\n        displayValuesFor: (_: any, props: any) => props.currentItem,\n        displayInit: \"n/a\",\n        origin: [8, 8],\n        yAccessor: (data: any) => data.bb,\n    };\n\n    public render() {\n        return <GenericChartComponent clip={false} svgDraw={this.renderSVG} drawOn={[\"mousemove\"]} />;\n    }\n\n    private readonly renderSVG = (moreProps: any) => {\n        const {\n            onClick,\n            displayFormat,\n            yAccessor = BollingerBandTooltip.defaultProps.yAccessor,\n            options,\n            origin: originProp,\n            textFill,\n            labelFill,\n            labelFontWeight,\n            className,\n            displayValuesFor = BollingerBandTooltip.defaultProps.displayValuesFor,\n            displayInit,\n            fontFamily,\n            fontSize,\n            fontWeight,\n        } = this.props;\n\n        const {\n            chartConfig: { width, height },\n            fullData,\n        } = moreProps;\n\n        const currentItem = displayValuesFor(this.props, moreProps) ?? last(fullData);\n\n        let top = displayInit;\n        let middle = displayInit;\n        let bottom = displayInit;\n\n        if (currentItem !== undefined) {\n            const item = yAccessor(currentItem);\n            if (item !== undefined) {\n                top = displayFormat(item.top);\n                middle = displayFormat(item.middle);\n                bottom = displayFormat(item.bottom);\n            }\n        }\n\n        const origin = functor(originProp);\n        const [x, y] = origin(width, height);\n\n        const { sourcePath, windowSize, multiplier, movingAverageType } = options;\n        const tooltipLabel = `BB(${sourcePath}, ${windowSize}, ${multiplier}, ${movingAverageType}): `;\n        const tooltipValue = `${top}, ${middle}, ${bottom}`;\n\n        return (\n            <g transform={`translate(${x}, ${y})`} className={className} onClick={onClick}>\n                <ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight}>\n                        {tooltipLabel}\n                    </ToolTipTSpanLabel>\n                    <tspan fill={textFill}>{tooltipValue}</tspan>\n                </ToolTipText>\n            </g>\n        );\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}