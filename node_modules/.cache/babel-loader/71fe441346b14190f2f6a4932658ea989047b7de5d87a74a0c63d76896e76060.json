{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\StocksPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { StockChartComponent, StockChartSeriesCollectionDirective, StockChartSeriesDirective, Inject, DateTime, Tooltip, RangeTooltip, Crosshair, LineSeries, SplineSeries, CandleSeries, HiloOpenCloseSeries, HiloSeries, RangeAreaSeries, Trendlines, EmaIndicator, RsiIndicator, BollingerBands, TmaIndicator, MomentumIndicator, SmaIndicator, AtrIndicator, AccumulationDistributionIndicator, MacdIndicator, StochasticIndicator, Export } from \"@syncfusion/ej2-react-charts\";\n\n// Syncfusion license registration\nimport { registerLicense } from \"@syncfusion/ej2-base\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterLicense(\"Ngo9BigBOggjHTQxAR8/V1NMaF5cXmRCf1FpRmJGdld5fUVHYVZUTXxaS00DNHVRdkdmWX5ednVWQ2BfVEJ+WEY=\");\nconst StockChartPage = ({\n  ticker\n}) => {\n  _s();\n  const [chartData, setChartData] = useState([]); // Chart data state\n  const [error, setError] = useState(\"\"); // Error handling state\n\n  useEffect(() => {\n    // Fetch stock data dynamically\n    const fetchChartData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\n        const data = await response.json();\n        if (data.dates) {\n          // Format the data for Syncfusion's StockChart\n          const formattedData = data.dates.map((date, index) => ({\n            x: new Date(date),\n            open: data.open[index],\n            high: data.high[index],\n            low: data.low[index],\n            close: data.close[index]\n          }));\n          setChartData(formattedData);\n          setError(\"\");\n        } else {\n          setError(\"No data available for this stock.\");\n        }\n      } catch (err) {\n        console.error(`Error fetching data for ${ticker}:`, err);\n        setError(\"Failed to load chart data.\");\n      }\n    };\n    fetchChartData();\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    },\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : chartData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Loading chart data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(StockChartComponent, {\n      id: \"stockchart\",\n      primaryXAxis: {\n        valueType: \"DateTime\",\n        majorGridLines: {\n          width: 0\n        },\n        majorTickLines: {\n          color: \"transparent\"\n        },\n        crosshairTooltip: {\n          enable: true\n        }\n      },\n      primaryYAxis: {\n        labelFormat: \"${value}\",\n        lineStyle: {\n          width: 0\n        },\n        rangePadding: \"None\",\n        majorTickLines: {\n          width: 0\n        }\n      },\n      height: \"500\",\n      tooltip: {\n        enable: true\n      },\n      crosshair: {\n        enable: true,\n        lineType: \"Both\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Inject, {\n        services: [DateTime, Tooltip, RangeTooltip, Crosshair, LineSeries, SplineSeries, CandleSeries, HiloOpenCloseSeries, HiloSeries, RangeAreaSeries, Trendlines, EmaIndicator, RsiIndicator, BollingerBands, TmaIndicator, MomentumIndicator, SmaIndicator, AtrIndicator, Export, AccumulationDistributionIndicator, MacdIndicator, StochasticIndicator]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StockChartSeriesCollectionDirective, {\n        children: /*#__PURE__*/_jsxDEV(StockChartSeriesDirective, {\n          dataSource: chartData,\n          type: \"Candle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(StockChartPage, \"tf7bbJC4RndLxzOjJL25HZSkkFI=\");\n_c = StockChartPage;\nexport default StockChartPage;\n\n// Example render\nReactDOM.render(/*#__PURE__*/_jsxDEV(StockChartPage, {\n  ticker: \"AAPL\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 136,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\nvar _c;\n$RefreshReg$(_c, \"StockChartPage\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOM","StockChartComponent","StockChartSeriesCollectionDirective","StockChartSeriesDirective","Inject","DateTime","Tooltip","RangeTooltip","Crosshair","LineSeries","SplineSeries","CandleSeries","HiloOpenCloseSeries","HiloSeries","RangeAreaSeries","Trendlines","EmaIndicator","RsiIndicator","BollingerBands","TmaIndicator","MomentumIndicator","SmaIndicator","AtrIndicator","AccumulationDistributionIndicator","MacdIndicator","StochasticIndicator","Export","registerLicense","jsxDEV","_jsxDEV","StockChartPage","ticker","_s","chartData","setChartData","error","setError","fetchChartData","response","fetch","data","json","dates","formattedData","map","date","index","x","Date","open","high","low","close","err","console","style","width","height","children","color","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","length","id","primaryXAxis","valueType","majorGridLines","majorTickLines","crosshairTooltip","enable","primaryYAxis","labelFormat","lineStyle","rangePadding","tooltip","crosshair","lineType","services","dataSource","type","_c","render","document","getElementById","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/StocksPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  StockChartComponent,\r\n  StockChartSeriesCollectionDirective,\r\n  StockChartSeriesDirective,\r\n  Inject,\r\n  DateTime,\r\n  Tooltip,\r\n  RangeTooltip,\r\n  Crosshair,\r\n  LineSeries,\r\n  SplineSeries,\r\n  CandleSeries,\r\n  HiloOpenCloseSeries,\r\n  HiloSeries,\r\n  RangeAreaSeries,\r\n  Trendlines,\r\n  EmaIndicator,\r\n  RsiIndicator,\r\n  BollingerBands,\r\n  TmaIndicator,\r\n  MomentumIndicator,\r\n  SmaIndicator,\r\n  AtrIndicator,\r\n  AccumulationDistributionIndicator,\r\n  MacdIndicator,\r\n  StochasticIndicator,\r\n  Export,\r\n} from \"@syncfusion/ej2-react-charts\";\r\n\r\n// Syncfusion license registration\r\nimport { registerLicense } from \"@syncfusion/ej2-base\";\r\nregisterLicense(\"Ngo9BigBOggjHTQxAR8/V1NMaF5cXmRCf1FpRmJGdld5fUVHYVZUTXxaS00DNHVRdkdmWX5ednVWQ2BfVEJ+WEY=\");\r\n\r\nconst StockChartPage = ({ ticker }) => {\r\n  const [chartData, setChartData] = useState([]); // Chart data state\r\n  const [error, setError] = useState(\"\"); // Error handling state\r\n\r\n  useEffect(() => {\r\n    // Fetch stock data dynamically\r\n    const fetchChartData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data.dates) {\r\n          // Format the data for Syncfusion's StockChart\r\n          const formattedData = data.dates.map((date, index) => ({\r\n            x: new Date(date),\r\n            open: data.open[index],\r\n            high: data.high[index],\r\n            low: data.low[index],\r\n            close: data.close[index],\r\n          }));\r\n          setChartData(formattedData);\r\n          setError(\"\");\r\n        } else {\r\n          setError(\"No data available for this stock.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(`Error fetching data for ${ticker}:`, err);\r\n        setError(\"Failed to load chart data.\");\r\n      }\r\n    };\r\n\r\n    fetchChartData();\r\n  }, [ticker]);\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"500px\" }}>\r\n      {error ? (\r\n        <p style={{ color: \"red\", textAlign: \"center\" }}>{error}</p>\r\n      ) : chartData.length === 0 ? (\r\n        <p style={{ textAlign: \"center\" }}>Loading chart data...</p>\r\n      ) : (\r\n        <StockChartComponent\r\n          id=\"stockchart\"\r\n          primaryXAxis={{\r\n            valueType: \"DateTime\",\r\n            majorGridLines: { width: 0 },\r\n            majorTickLines: { color: \"transparent\" },\r\n            crosshairTooltip: { enable: true },\r\n          }}\r\n          primaryYAxis={{\r\n            labelFormat: \"${value}\",\r\n            lineStyle: { width: 0 },\r\n            rangePadding: \"None\",\r\n            majorTickLines: { width: 0 },\r\n          }}\r\n          height=\"500\"\r\n          tooltip={{ enable: true }}\r\n          crosshair={{\r\n            enable: true,\r\n            lineType: \"Both\",\r\n          }}\r\n        >\r\n          <Inject\r\n            services={[\r\n              DateTime,\r\n              Tooltip,\r\n              RangeTooltip,\r\n              Crosshair,\r\n              LineSeries,\r\n              SplineSeries,\r\n              CandleSeries,\r\n              HiloOpenCloseSeries,\r\n              HiloSeries,\r\n              RangeAreaSeries,\r\n              Trendlines,\r\n              EmaIndicator,\r\n              RsiIndicator,\r\n              BollingerBands,\r\n              TmaIndicator,\r\n              MomentumIndicator,\r\n              SmaIndicator,\r\n              AtrIndicator,\r\n              Export,\r\n              AccumulationDistributionIndicator,\r\n              MacdIndicator,\r\n              StochasticIndicator,\r\n            ]}\r\n          />\r\n          <StockChartSeriesCollectionDirective>\r\n            <StockChartSeriesDirective dataSource={chartData} type=\"Candle\" />\r\n          </StockChartSeriesCollectionDirective>\r\n        </StockChartComponent>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockChartPage;\r\n\r\n// Example render\r\nReactDOM.render(<StockChartPage ticker=\"AAPL\" />, document.getElementById(\"root\"));\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,WAAW;AAChC,SACEC,mBAAmB,EACnBC,mCAAmC,EACnCC,yBAAyB,EACzBC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,mBAAmB,EACnBC,UAAU,EACVC,eAAe,EACfC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,cAAc,EACdC,YAAY,EACZC,iBAAiB,EACjBC,YAAY,EACZC,YAAY,EACZC,iCAAiC,EACjCC,aAAa,EACbC,mBAAmB,EACnBC,MAAM,QACD,8BAA8B;;AAErC;AACA,SAASC,eAAe,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvDF,eAAe,CAAC,0FAA0F,CAAC;AAE3G,MAAMG,cAAc,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACoC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMuC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgDR,MAAM,EAAE,CAAC;QACtF,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACE,KAAK,EAAE;UACd;UACA,MAAMC,aAAa,GAAGH,IAAI,CAACE,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;YACrDC,CAAC,EAAE,IAAIC,IAAI,CAACH,IAAI,CAAC;YACjBI,IAAI,EAAET,IAAI,CAACS,IAAI,CAACH,KAAK,CAAC;YACtBI,IAAI,EAAEV,IAAI,CAACU,IAAI,CAACJ,KAAK,CAAC;YACtBK,GAAG,EAAEX,IAAI,CAACW,GAAG,CAACL,KAAK,CAAC;YACpBM,KAAK,EAAEZ,IAAI,CAACY,KAAK,CAACN,KAAK;UACzB,CAAC,CAAC,CAAC;UACHZ,YAAY,CAACS,aAAa,CAAC;UAC3BP,QAAQ,CAAC,EAAE,CAAC;QACd,CAAC,MAAM;UACLA,QAAQ,CAAC,mCAAmC,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOiB,GAAG,EAAE;QACZC,OAAO,CAACnB,KAAK,CAAC,2BAA2BJ,MAAM,GAAG,EAAEsB,GAAG,CAAC;QACxDjB,QAAQ,CAAC,4BAA4B,CAAC;MACxC;IACF,CAAC;IAEDC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,oBACEF,OAAA;IAAK0B,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,EAC5CvB,KAAK,gBACJN,OAAA;MAAG0B,KAAK,EAAE;QAAEI,KAAK,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,EAAEvB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GAC1D/B,SAAS,CAACgC,MAAM,KAAK,CAAC,gBACxBpC,OAAA;MAAG0B,KAAK,EAAE;QAAEK,SAAS,EAAE;MAAS,CAAE;MAAAF,QAAA,EAAC;IAAqB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE5DnC,OAAA,CAAC5B,mBAAmB;MAClBiE,EAAE,EAAC,YAAY;MACfC,YAAY,EAAE;QACZC,SAAS,EAAE,UAAU;QACrBC,cAAc,EAAE;UAAEb,KAAK,EAAE;QAAE,CAAC;QAC5Bc,cAAc,EAAE;UAAEX,KAAK,EAAE;QAAc,CAAC;QACxCY,gBAAgB,EAAE;UAAEC,MAAM,EAAE;QAAK;MACnC,CAAE;MACFC,YAAY,EAAE;QACZC,WAAW,EAAE,UAAU;QACvBC,SAAS,EAAE;UAAEnB,KAAK,EAAE;QAAE,CAAC;QACvBoB,YAAY,EAAE,MAAM;QACpBN,cAAc,EAAE;UAAEd,KAAK,EAAE;QAAE;MAC7B,CAAE;MACFC,MAAM,EAAC,KAAK;MACZoB,OAAO,EAAE;QAAEL,MAAM,EAAE;MAAK,CAAE;MAC1BM,SAAS,EAAE;QACTN,MAAM,EAAE,IAAI;QACZO,QAAQ,EAAE;MACZ,CAAE;MAAArB,QAAA,gBAEF7B,OAAA,CAACzB,MAAM;QACL4E,QAAQ,EAAE,CACR3E,QAAQ,EACRC,OAAO,EACPC,YAAY,EACZC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,mBAAmB,EACnBC,UAAU,EACVC,eAAe,EACfC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,cAAc,EACdC,YAAY,EACZC,iBAAiB,EACjBC,YAAY,EACZC,YAAY,EACZI,MAAM,EACNH,iCAAiC,EACjCC,aAAa,EACbC,mBAAmB;MACnB;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACFnC,OAAA,CAAC3B,mCAAmC;QAAAwD,QAAA,eAClC7B,OAAA,CAAC1B,yBAAyB;UAAC8E,UAAU,EAAEhD,SAAU;UAACiD,IAAI,EAAC;QAAQ;UAAArB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB;EACtB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CA/FIF,cAAc;AAAAqD,EAAA,GAAdrD,cAAc;AAiGpB,eAAeA,cAAc;;AAE7B;AACA9B,QAAQ,CAACoF,MAAM,cAACvD,OAAA,CAACC,cAAc;EAACC,MAAM,EAAC;AAAM;EAAA8B,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEqB,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAAC,IAAAH,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}