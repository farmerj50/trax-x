{"ast":null,"code":"import { change } from \"../calculator\";\nimport { merge, rebind } from \"../utils\";\nimport baseIndicator from \"./baseIndicator\";\nconst ALGORITHM_TYPE = \"Change\";\nexport default function () {\n  const base = baseIndicator().type(ALGORITHM_TYPE);\n  const underlyingAlgorithm = change();\n  const mergedAlgorithm = merge().algorithm(underlyingAlgorithm).merge((datum, i) => {\n    datum.absoluteChange = i.absoluteChange;\n    datum.percentChange = i.percentChange;\n  });\n  const indicator = (data, options = {\n    merge: true\n  }) => {\n    if (options.merge) {\n      return mergedAlgorithm(data);\n    }\n    return underlyingAlgorithm(data);\n  };\n  rebind(indicator, base, \"id\", \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n  rebind(indicator, underlyingAlgorithm, \"options\");\n  rebind(indicator, mergedAlgorithm, \"merge\", \"skipUndefined\");\n  return indicator;\n}","map":{"version":3,"names":["change","merge","rebind","baseIndicator","ALGORITHM_TYPE","base","type","underlyingAlgorithm","mergedAlgorithm","algorithm","datum","i","absoluteChange","percentChange","indicator","data","options"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\indicator\\change.ts"],"sourcesContent":["import { change } from \"../calculator\";\nimport { merge, rebind } from \"../utils\";\nimport { ChangeOptions } from \"../calculator/change\";\nimport baseIndicator from \"./baseIndicator\";\n\nconst ALGORITHM_TYPE = \"Change\";\n\ninterface ChangeIndicator {\n    (data: any[], options?: { merge: boolean }): any;\n    id(): number;\n    id(x: number): ChangeIndicator;\n    accessor(): any;\n    accessor(x: any): ChangeIndicator;\n    stroke(): string | any;\n    stroke(x: string | any): ChangeIndicator;\n    fill(): string | any;\n    fill(x: string | any): ChangeIndicator;\n    echo(): any;\n    echo(x: any): ChangeIndicator;\n    type(): string;\n    type(x: string): ChangeIndicator;\n    merge(): any;\n    merge(newMerge: any): ChangeIndicator;\n    options(): ChangeOptions;\n    options(newOptions: ChangeOptions): ChangeIndicator;\n}\n\nexport default function () {\n    const base = baseIndicator().type(ALGORITHM_TYPE);\n\n    const underlyingAlgorithm = change();\n\n    const mergedAlgorithm = merge()\n        .algorithm(underlyingAlgorithm)\n        .merge((datum: any, i: any) => {\n            datum.absoluteChange = i.absoluteChange;\n            datum.percentChange = i.percentChange;\n        });\n\n    const indicator = (data: any[], options = { merge: true }) => {\n        if (options.merge) {\n            return mergedAlgorithm(data);\n        }\n        return underlyingAlgorithm(data);\n    };\n    rebind(indicator, base, \"id\", \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n    rebind(indicator, underlyingAlgorithm, \"options\");\n    rebind(indicator, mergedAlgorithm, \"merge\", \"skipUndefined\");\n\n    return indicator as ChangeIndicator;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,KAAK,EAAEC,MAAM,QAAQ,UAAU;AAExC,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,cAAc,GAAG,QAAQ;AAsB/B,eAAc;EACV,MAAMC,IAAI,GAAGF,aAAa,EAAE,CAACG,IAAI,CAACF,cAAc,CAAC;EAEjD,MAAMG,mBAAmB,GAAGP,MAAM,EAAE;EAEpC,MAAMQ,eAAe,GAAGP,KAAK,EAAE,CAC1BQ,SAAS,CAACF,mBAAmB,CAAC,CAC9BN,KAAK,CAAC,CAACS,KAAU,EAAEC,CAAM,KAAI;IAC1BD,KAAK,CAACE,cAAc,GAAGD,CAAC,CAACC,cAAc;IACvCF,KAAK,CAACG,aAAa,GAAGF,CAAC,CAACE,aAAa;EACzC,CAAC,CAAC;EAEN,MAAMC,SAAS,GAAGA,CAACC,IAAW,EAAEC,OAAO,GAAG;IAAEf,KAAK,EAAE;EAAI,CAAE,KAAI;IACzD,IAAIe,OAAO,CAACf,KAAK,EAAE;MACf,OAAOO,eAAe,CAACO,IAAI,CAAC;;IAEhC,OAAOR,mBAAmB,CAACQ,IAAI,CAAC;EACpC,CAAC;EACDb,MAAM,CAACY,SAAS,EAAET,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EAC3EH,MAAM,CAACY,SAAS,EAAEP,mBAAmB,EAAE,SAAS,CAAC;EACjDL,MAAM,CAACY,SAAS,EAAEN,eAAe,EAAE,OAAO,EAAE,eAAe,CAAC;EAE5D,OAAOM,SAA4B;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}