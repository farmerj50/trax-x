{"ast":null,"code":"import { measureText } from '../../smithchart/utils/helper';\nimport { HorizontalLabelCollection, LabelRegion, Point, Direction } from '../../smithchart/utils/utils';\nimport { GridArcPoints, RadialLabelCollections } from '../../smithchart/utils/utils';\nimport { PathOption, TextOption, renderTextElement, _getEpsilonValue } from '../../smithchart/utils/helper';\nimport { axisLabelRender } from '../model/constant';\nvar AxisRender = /** @class */function () {\n  function AxisRender() {\n    this.radialLabels = [-50, -20, -10, -5, -4, -3, -2, -1.5, -1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1, 1.5, 2, 3, 4, 5, 10, 20, 50];\n    this.radialLabelCollections = [];\n    this.horizontalLabelCollections = [];\n    this.labelCollections = [];\n    this.direction = new Direction();\n  }\n  AxisRender.prototype.renderArea = function (smithchart, bounds) {\n    this.calculateChartArea(smithchart, bounds);\n    this.calculateCircleMargin(smithchart, bounds);\n    this.calculateXAxisRange(smithchart);\n    this.calculateRAxisRange(smithchart);\n    this.measureHorizontalAxis(smithchart);\n    this.measureRadialAxis(smithchart);\n    if (smithchart.horizontalAxis.visible) {\n      this.updateHAxis(smithchart);\n    }\n    if (smithchart.radialAxis.visible) {\n      this.updateRAxis(smithchart);\n    }\n    if (smithchart.horizontalAxis.visible) {\n      this.drawHAxisLabels(smithchart);\n    }\n    if (smithchart.radialAxis.visible) {\n      this.drawRAxisLabels(smithchart);\n    }\n  };\n  AxisRender.prototype.updateHAxis = function (smithchart) {\n    var majorGridLines = smithchart.horizontalAxis.majorGridLines;\n    var minorGridLines = smithchart.horizontalAxis.minorGridLines;\n    var axisLine = smithchart.horizontalAxis.axisLine;\n    if (majorGridLines.visible) {\n      this.updateHMajorGridLines(smithchart);\n    }\n    if (minorGridLines.visible) {\n      this.updateHMinorGridLines(smithchart);\n    }\n    if (axisLine.visible) {\n      this.updateHAxisLine(smithchart);\n    }\n  };\n  AxisRender.prototype.updateRAxis = function (smithchart) {\n    var majorGridLines = smithchart.radialAxis.majorGridLines;\n    var minorGridLines = smithchart.radialAxis.minorGridLines;\n    var axisLine = smithchart.radialAxis.axisLine;\n    if (majorGridLines.visible) {\n      this.updateRMajorGridLines(smithchart);\n    }\n    if (minorGridLines.visible) {\n      this.updateRMinorGridLines(smithchart);\n    }\n    if (axisLine.visible) {\n      this.updateRAxisLine(smithchart);\n    }\n  };\n  AxisRender.prototype.measureHorizontalAxis = function (smithchart) {\n    var minorGridLines = smithchart.horizontalAxis.minorGridLines;\n    this.measureHMajorGridLines(smithchart);\n    if (minorGridLines.visible) {\n      this.measureHMinorGridLines(smithchart);\n    }\n  };\n  AxisRender.prototype.measureRadialAxis = function (smithchart) {\n    var minorGridLines = smithchart.radialAxis.minorGridLines;\n    this.measureRMajorGridLines(smithchart);\n    if (minorGridLines.visible) {\n      this.measureRMinorGridLines(smithchart);\n    }\n  };\n  AxisRender.prototype.calculateChartArea = function (smithchart, bounds) {\n    var width = smithchart.availableSize.width;\n    var height = smithchart.availableSize.height;\n    width = bounds.width;\n    height = bounds.height;\n    var chartAreaWidth = Math.min(width, height);\n    var chartAreaHeight = Math.min(width, height);\n    var x = bounds.x + (bounds.width / 2 - chartAreaWidth / 2);\n    var y = bounds.y + ((height - chartAreaHeight) / 2 > 0 ? (height - chartAreaHeight) / 2 : 0);\n    smithchart.chartArea = {\n      x: x,\n      y: y,\n      width: chartAreaWidth,\n      height: chartAreaHeight\n    };\n  };\n  AxisRender.prototype.calculateCircleMargin = function (smithchart, bounds) {\n    var padding = 10;\n    var maxLabelWidth = 0;\n    var width = smithchart.chartArea.width;\n    var radius = smithchart.radius;\n    maxLabelWidth = this.maximumLabelLength(smithchart);\n    var labelMargin = smithchart.radialAxis.labelPosition === 'Outside' ? maxLabelWidth + padding : padding;\n    var diameter = width - labelMargin * 2 > 0 ? width - labelMargin * 2 : 0;\n    var actualRadius = diameter / 2;\n    var circleCoefficient = radius > 1 ? 1 : radius < 0.1 ? 0.1 : radius;\n    this.areaRadius = actualRadius * circleCoefficient;\n    this.circleLeftX = smithchart.chartArea.x + labelMargin + actualRadius * (1 - circleCoefficient);\n    this.circleTopY = smithchart.chartArea.y + labelMargin + actualRadius * (1 - circleCoefficient);\n    this.circleCenterX = this.circleLeftX + this.areaRadius;\n    this.circleCenterY = bounds.y + bounds.height / 2;\n  };\n  AxisRender.prototype.maximumLabelLength = function (smithchart) {\n    var maximumLabelLength = 0;\n    var font = smithchart.horizontalAxis.labelStyle;\n    var label;\n    var textSize;\n    for (var i = 0; i < this.radialLabels.length; i++) {\n      label = this.radialLabels[i].toString();\n      textSize = measureText(label, font, smithchart.themeStyle.axisLabelFont);\n      if (maximumLabelLength < textSize.width) {\n        maximumLabelLength = textSize.width;\n      }\n    }\n    return maximumLabelLength;\n  };\n  AxisRender.prototype.calculateAxisLabels = function () {\n    var spacingBetweenGridLines = 30;\n    var previousR = 0;\n    var j = 0;\n    var labels = [];\n    var diameter = this.areaRadius * 2;\n    for (var i = 0; i < 2; i = i + 0.1) {\n      i = Math.round(i * 10) / 10;\n      var coeff = 1 / (i + 1);\n      var isOverlap1 = false;\n      var isOverlap2 = false;\n      var radius = diameter * coeff / 2 * 2;\n      if (previousR === 0.0 || i === 1) {\n        previousR = radius;\n        labels[j] = i;\n        j++;\n        continue;\n      }\n      if (i < 1) {\n        isOverlap1 = this.isOverlap(1, diameter, radius, spacingBetweenGridLines);\n      }\n      if (i > 1) {\n        isOverlap2 = this.isOverlap(2, diameter, radius, spacingBetweenGridLines);\n      }\n      if (isOverlap1 || isOverlap2) {\n        continue;\n      }\n      if (previousR - radius >= spacingBetweenGridLines) {\n        labels[j] = i;\n        j++;\n        previousR = radius;\n      }\n    }\n    var staticlabels = [2, 3, 4, 5, 10, 20, 50];\n    for (var k = 0; k < staticlabels.length; k++) {\n      labels[j] = staticlabels[k];\n      j++;\n    }\n    return labels;\n  };\n  AxisRender.prototype.isOverlap = function (x, d, previousR, spacingBetweenGridLines) {\n    var coeff = 1 / (x + 1); // (1 / 1+r) find the radius for the x value\n    var radius = d * coeff / 2 * 2;\n    return previousR - radius < spacingBetweenGridLines;\n  };\n  AxisRender.prototype.calculateXAxisRange = function (smithchart) {\n    var x;\n    var coeff;\n    var radius;\n    var cx;\n    var diameter = this.areaRadius * 2;\n    var horizontalAxisLabels = this.calculateAxisLabels();\n    var cy = this.circleCenterY;\n    var circleStartX = this.circleLeftX;\n    var leftX = this.circleLeftX;\n    for (var i = 0; i < horizontalAxisLabels.length; i++) {\n      x = horizontalAxisLabels[i];\n      coeff = 1 / (x + 1);\n      radius = diameter * coeff / 2;\n      if (smithchart.renderType === 'Impedance') {\n        leftX = circleStartX + diameter - radius * 2;\n      }\n      cx = leftX + radius;\n      this.horizontalLabelCollections.push({\n        centerX: cx,\n        centerY: cy,\n        radius: radius,\n        value: x,\n        region: null\n      });\n    }\n  };\n  AxisRender.prototype.calculateRAxisRange = function (smithchart) {\n    var arcCy;\n    var arcRadius;\n    var diameter = this.areaRadius * 2;\n    var y;\n    var point = new Point();\n    if (smithchart.renderType === 'Impedance') {\n      point.x = this.circleLeftX + diameter;\n      point.y = this.circleTopY + this.areaRadius;\n    } else {\n      point.x = this.circleLeftX;\n      point.y = this.circleTopY + this.areaRadius;\n    }\n    for (var i = 0; i < this.radialLabels.length; i++) {\n      y = this.radialLabels[i];\n      arcRadius = Math.abs(1 / y * diameter / 2);\n      if (smithchart.renderType === 'Impedance') {\n        arcCy = y > 0 ? point.y - arcRadius : point.y + arcRadius;\n      } else {\n        arcCy = y < 0 ? point.y - arcRadius : point.y + arcRadius;\n      }\n      this.radialLabelCollections.push({\n        centerX: point.x,\n        centerY: arcCy,\n        radius: arcRadius,\n        value: y\n      });\n    }\n  };\n  AxisRender.prototype.measureHMajorGridLines = function (smithchart) {\n    var arcPoints = [];\n    var startPoint;\n    var endPoint;\n    var radialPoint1;\n    var radialPoint2;\n    var size;\n    this.majorHGridArcPoints = [];\n    for (var i = 0; i < this.horizontalLabelCollections.length; i++) {\n      var circlePoint = new HorizontalLabelCollection();\n      circlePoint = this.horizontalLabelCollections[i];\n      arcPoints = this.calculateHMajorArcStartEndPoints(circlePoint.value);\n      if (smithchart.renderType === 'Impedance') {\n        radialPoint1 = arcPoints[0];\n        radialPoint2 = arcPoints[1];\n      } else {\n        radialPoint1 = arcPoints[1];\n        radialPoint2 = arcPoints[0];\n      }\n      size = {\n        width: circlePoint.radius,\n        height: circlePoint.radius\n      };\n      if (circlePoint.value !== 0.0 && circlePoint.value !== 50.0) {\n        startPoint = this.intersectingCirclePoints(radialPoint1[0].centerX, radialPoint1[0].centerY, radialPoint1[0].radius, circlePoint.centerX, circlePoint.centerY, circlePoint.radius, smithchart.renderType);\n        endPoint = this.intersectingCirclePoints(radialPoint2[0].centerX, radialPoint2[0].centerY, radialPoint2[0].radius, circlePoint.centerX, circlePoint.centerY, circlePoint.radius, smithchart.renderType);\n        this.majorHGridArcPoints.push({\n          startPoint: startPoint,\n          endPoint: endPoint,\n          rotationAngle: 2 * Math.PI,\n          sweepDirection: smithchart.renderType === 'Impedance' ? this.direction['counterclockwise'] : this.direction['clockwise'],\n          isLargeArc: true,\n          size: size\n        });\n      } else {\n        startPoint = {\n          x: circlePoint.centerX + circlePoint.radius,\n          y: circlePoint.centerY\n        };\n        endPoint = {\n          x: circlePoint.centerX + circlePoint.radius,\n          y: circlePoint.centerY - 0.05\n        };\n        this.majorHGridArcPoints.push({\n          startPoint: startPoint,\n          endPoint: endPoint,\n          rotationAngle: 2 * Math.PI,\n          sweepDirection: this.direction['clockwise'],\n          isLargeArc: true,\n          size: size\n        });\n      }\n    }\n  };\n  AxisRender.prototype.measureRMajorGridLines = function (smithchart) {\n    var radialPoint;\n    var y;\n    var arcPoints = [];\n    var innerInterSectPoint;\n    var outerInterSectPoint;\n    var outterInterSectRadian;\n    var outterInterSectAngle;\n    var startPoint;\n    var endPoint;\n    var size;\n    var sweepDirection;\n    this.majorRGridArcPoints = [];\n    this.labelCollections = [];\n    var epsilon = _getEpsilonValue();\n    for (var i = 0; i < this.radialLabelCollections.length; i++) {\n      radialPoint = this.radialLabelCollections[i];\n      if (radialPoint.radius <= epsilon) {\n        continue;\n      }\n      y = radialPoint.value;\n      arcPoints = this.calculateMajorArcStartEndPoints(radialPoint, Math.abs(y), smithchart);\n      innerInterSectPoint = arcPoints[0];\n      outerInterSectPoint = arcPoints[1];\n      outterInterSectRadian = this.circleXYRadianValue(this.circleCenterX, this.circleCenterY, outerInterSectPoint.x, outerInterSectPoint.y);\n      outterInterSectAngle = outterInterSectRadian * (180 / Math.PI);\n      if (y !== 0.0) {\n        startPoint = {\n          x: innerInterSectPoint.x,\n          y: innerInterSectPoint.y\n        };\n        endPoint = {\n          x: outerInterSectPoint.x,\n          y: outerInterSectPoint.y\n        };\n        size = {\n          width: radialPoint.radius,\n          height: radialPoint.radius\n        };\n        sweepDirection = y > 0 ? this.direction['clockwise'] : this.direction['counterclockwise'];\n        this.majorRGridArcPoints.push({\n          startPoint: startPoint,\n          endPoint: endPoint,\n          size: size,\n          rotationAngle: 2 * Math.PI,\n          isLargeArc: false,\n          sweepDirection: sweepDirection\n        });\n        this.labelCollections.push({\n          centerX: outerInterSectPoint.x,\n          centerY: outerInterSectPoint.y,\n          angle: outterInterSectAngle,\n          value: y,\n          radius: this.areaRadius,\n          region: null\n        });\n      } else {\n        startPoint = {\n          x: this.circleLeftX,\n          y: this.circleCenterY\n        };\n        endPoint = {\n          x: this.circleCenterX + this.areaRadius,\n          y: this.circleCenterY\n        };\n        this.majorRGridArcPoints.push({\n          startPoint: startPoint,\n          endPoint: endPoint,\n          size: null,\n          rotationAngle: null,\n          isLargeArc: null,\n          sweepDirection: null\n        });\n        this.labelCollections.push({\n          centerX: smithchart.renderType === 'Impedance' ? this.circleCenterX - this.areaRadius : this.circleCenterX + this.areaRadius,\n          centerY: this.circleCenterY,\n          angle: smithchart.renderType === 'Impedance' ? 180 : 360,\n          value: y,\n          radius: this.areaRadius,\n          region: null\n        });\n      }\n    }\n  };\n  AxisRender.prototype.circleXYRadianValue = function (centerX, centerY, outterX, outterY) {\n    var radian;\n    radian = Math.atan2(outterY - centerY, outterX - centerX);\n    radian = radian < 0 ? radian + 360 * Math.PI / 180 : radian;\n    return radian;\n  };\n  AxisRender.prototype.calculateMajorArcStartEndPoints = function (radialPoint, value, smithchart) {\n    var arcPoints = [];\n    var circlePoint = [];\n    var cx = this.circleCenterX;\n    var cy = this.circleCenterY;\n    if (value >= 10) {\n      arcPoints[0] = smithchart.renderType === 'Impedance' ? {\n        x: cx + this.areaRadius,\n        y: cy\n      } : {\n        x: cx - this.areaRadius,\n        y: cy\n      };\n    } else if (value >= 3) {\n      circlePoint = this.horizontalLabelCollections.filter(function (c) {\n        return c.value === 10;\n      });\n    } else if (value >= 1) {\n      circlePoint = this.horizontalLabelCollections.filter(function (c) {\n        return c.value === 5;\n      });\n    } else {\n      circlePoint = this.horizontalLabelCollections.filter(function (c) {\n        return c.value === 3;\n      });\n    }\n    if (circlePoint.length > 0) {\n      arcPoints[0] = this.intersectingCirclePoints(radialPoint.centerX, radialPoint.centerY, radialPoint.radius, circlePoint[0].centerX, circlePoint[0].centerY, circlePoint[0].radius, smithchart.renderType);\n    }\n    arcPoints[1] = this.intersectingCirclePoints(radialPoint.centerX, radialPoint.centerY, radialPoint.radius, cx, cy, this.areaRadius, smithchart.renderType);\n    return arcPoints;\n  };\n  AxisRender.prototype.calculateHMajorArcStartEndPoints = function (value) {\n    var arcHPoints = [];\n    var calValue1;\n    var calValue2;\n    if (value <= 0.3) {\n      calValue1 = 2.0;\n      calValue2 = -2.0;\n    } else if (value <= 1.0) {\n      calValue1 = 3.0;\n      calValue2 = -3.0;\n    } else if (value <= 2.0) {\n      calValue1 = 5.0;\n      calValue2 = -5.0;\n    } else if (value <= 5.0) {\n      calValue1 = 10.0;\n      calValue2 = -10.0;\n    } else {\n      calValue1 = 50.0;\n      calValue2 = -50.0;\n    }\n    arcHPoints[0] = this.radialLabelCollections.filter(function (c) {\n      return c.value === calValue1;\n    });\n    arcHPoints[1] = this.radialLabelCollections.filter(function (c) {\n      return c.value === calValue2;\n    });\n    return arcHPoints;\n  };\n  AxisRender.prototype.calculateMinorArcStartEndPoints = function (value) {\n    var calValue1;\n    var calValue2;\n    var marcHPoints = [];\n    if (value <= 0.1) {\n      calValue1 = 1.0;\n      calValue2 = -1.0;\n    } else if (value <= 0.2) {\n      calValue1 = 0.8;\n      calValue2 = -0.8;\n    } else if (value <= 0.3) {\n      calValue1 = 0.4;\n      calValue2 = -0.4;\n    } else if (value <= 0.6) {\n      calValue1 = 1.0;\n      calValue2 = -1.0;\n    } else if (value <= 1.0) {\n      calValue1 = 1.5;\n      calValue2 = -1.5;\n    } else if (value <= 1.5) {\n      calValue1 = 2.0;\n      calValue2 = -2.0;\n    } else if (value <= 2.0) {\n      calValue1 = 1.0;\n      calValue2 = -1.0;\n    } else if (value <= 5.0) {\n      calValue1 = 3.0;\n      calValue2 = -3.0;\n    } else {\n      calValue1 = 10.0;\n      calValue2 = -10.0;\n    }\n    marcHPoints[0] = this.radialLabelCollections.filter(function (c) {\n      return c['value'] === calValue1;\n    });\n    marcHPoints[1] = this.radialLabelCollections.filter(function (c) {\n      return c['value'] === calValue2;\n    });\n    return marcHPoints;\n  };\n  AxisRender.prototype.intersectingCirclePoints = function (x1, y1, r1, x2, y2, r2, renderType) {\n    var point = {\n      x: 0,\n      y: 0\n    };\n    var cx = x1 - x2;\n    var cy = y1 - y2;\n    var midRadius = Math.sqrt(cx * cx + cy * cy);\n    var radiusSquare = midRadius * midRadius;\n    var a = (r1 * r1 - r2 * r2) / (2 * radiusSquare);\n    var radiusSquare2 = r1 * r1 - r2 * r2;\n    var c = Math.sqrt(2 * (r1 * r1 + r2 * r2) / radiusSquare - radiusSquare2 * radiusSquare2 / (radiusSquare * radiusSquare) - 1);\n    var fx = (x1 + x2) / 2 + a * (x2 - x1);\n    var gx = c * (y2 - y1) / 2;\n    var ix1 = fx + gx;\n    var ix2 = fx - gx;\n    var fy = (y1 + y2) / 2 + a * (y2 - y1);\n    var gy = c * (x1 - x2) / 2;\n    var iy1 = fy + gy;\n    var iy2 = fy - gy;\n    if (renderType === 'Impedance') {\n      if (ix2 < ix1) {\n        point.x = ix2;\n        point.y = iy2;\n      } else {\n        point.x = ix1;\n        point.y = iy1;\n      }\n    } else {\n      if (ix1 > ix2) {\n        point.x = ix1;\n        point.y = iy1;\n      } else {\n        point.x = ix2;\n        point.y = iy2;\n      }\n    }\n    return {\n      x: point.x,\n      y: point.y\n    };\n  };\n  AxisRender.prototype.updateHMajorGridLines = function (smithchart) {\n    var majorGridLine = smithchart.horizontalAxis.majorGridLines;\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_horizontalAxisMajorGridLines'\n    });\n    groupElement.setAttribute('aria-hidden', 'true');\n    var path = this.calculateGridLinesPath(this.majorHGridArcPoints);\n    var haxismgoptions = new PathOption(smithchart.element.id + '_horizontalAxisMajorGridLines', 'none', majorGridLine['width'], majorGridLine.color ? majorGridLine.color : smithchart.themeStyle.majorGridLine, majorGridLine['opacity'], majorGridLine['dashArray'], path);\n    var element = smithchart.renderer.drawPath(haxismgoptions);\n    groupElement.appendChild(element);\n    smithchart.svgObject.appendChild(groupElement);\n  };\n  AxisRender.prototype.updateRMajorGridLines = function (smithchart) {\n    var majorGridLine = smithchart.radialAxis.majorGridLines;\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_radialAxisMajorGridLines'\n    });\n    groupElement.setAttribute('aria-hidden', 'true');\n    var path = this.calculateGridLinesPath(this.majorRGridArcPoints);\n    var raxismgoptions = new PathOption(smithchart.element.id + '_radialAxisMajorGridLines', 'none', majorGridLine['width'], majorGridLine.color ? majorGridLine.color : smithchart.themeStyle.majorGridLine, majorGridLine['opacity'], majorGridLine['dashArray'], path);\n    var element = smithchart.renderer.drawPath(raxismgoptions);\n    groupElement.appendChild(element);\n    smithchart.svgObject.appendChild(groupElement);\n  };\n  AxisRender.prototype.updateHAxisLine = function (smithchart) {\n    var radius = this.areaRadius;\n    var axisLine = smithchart.horizontalAxis.axisLine;\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_hAxisLine'\n    });\n    groupElement.setAttribute('aria-hidden', 'true');\n    var point1 = {\n      x: this.circleCenterX + radius,\n      y: this.circleCenterY\n    };\n    var point2 = {\n      x: this.circleCenterX + radius,\n      y: this.circleCenterY - 0.05\n    };\n    var size = {\n      width: radius,\n      height: radius\n    };\n    var sweep = this.direction['clockwise'];\n    var isLargeArc = 1;\n    var angle = Math.PI * 2;\n    var direction = 'M' + '' + point1.x + ' ' + point1.y + ' ' + 'A' + ' ' + size.width + ' ' + size.height + ' ' + angle + ' ' + isLargeArc + ' ' + sweep + ' ' + point2.x + ' ' + point2.y + '';\n    var options = new PathOption(smithchart.element.id + '_horizontalAxisLine', 'none', axisLine.width, axisLine.color ? axisLine.color : smithchart.themeStyle.axisLine, 1, axisLine.dashArray, direction);\n    var element = smithchart.renderer.drawPath(options);\n    groupElement.appendChild(element);\n    smithchart.svgObject.appendChild(groupElement);\n  };\n  AxisRender.prototype.updateRAxisLine = function (smithchart) {\n    var radius = this.areaRadius;\n    var axisLine = smithchart.radialAxis.axisLine;\n    var point1 = {\n      x: this.circleCenterX - radius,\n      y: this.circleCenterY\n    };\n    var point2 = {\n      x: this.circleCenterX + radius,\n      y: this.circleCenterY\n    };\n    var size = {\n      width: 0,\n      height: 0\n    };\n    var sweep = this.direction['counterclockwise'];\n    var isLargeArc = 0;\n    var angle = 0;\n    var direction = 'M' + ' ' + point1.x + ' ' + point1.y + ' ' + 'A' + ' ' + size.width + ' ' + size.height + ' ' + angle + ' ' + isLargeArc + ' ' + sweep + ' ' + point2.x + ' ' + point2.y + '';\n    var options = new PathOption(smithchart.element.id + '_radialAxisLine', 'none', axisLine.width, axisLine.color ? axisLine.color : smithchart.themeStyle.axisLine, 1, axisLine.dashArray, direction);\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_rAxisLine'\n    });\n    groupElement.setAttribute('aria-hidden', 'true');\n    var element = smithchart.renderer.drawPath(options);\n    groupElement.appendChild(element);\n    smithchart.svgObject.appendChild(groupElement);\n  };\n  AxisRender.prototype.drawHAxisLabels = function (smithchart) {\n    var hAxis = smithchart.horizontalAxis;\n    smithchart.radialAxis.labelStyle.fontFamily = smithchart.themeStyle.fontFamily || smithchart.radialAxis.labelStyle.fontFamily;\n    var font = smithchart.horizontalAxis.labelStyle;\n    var circleAxis;\n    var label;\n    var x;\n    var y;\n    var textSize;\n    var curLabel;\n    var curLabelBounds;\n    var curWidth;\n    var curX;\n    var preLabel;\n    var preLabelBounds;\n    var preWidth;\n    var preX;\n    var groupEle = smithchart.renderer.createGroup({\n      id: smithchart.element.id + '_HAxisLabels'\n    });\n    groupEle.setAttribute('aria-hidden', 'true');\n    var _loop_1 = function (i) {\n      circleAxis = this_1.horizontalLabelCollections[i];\n      label = this_1.horizontalLabelCollections[i].value.toString();\n      if (circleAxis.value !== 0.0) {\n        x = smithchart.renderType === 'Impedance' ? circleAxis.centerX - circleAxis.radius : circleAxis.centerX + circleAxis.radius;\n        y = circleAxis.centerY;\n        textSize = measureText(label, font, smithchart.themeStyle.axisLabelFont);\n        x = smithchart.renderType === 'Impedance' ? x - textSize.width : x;\n        if (hAxis.labelPosition === 'Outside') {\n          y -= textSize.height / 4;\n        } else {\n          y += textSize.height;\n        }\n        this_1.horizontalLabelCollections[i].region = this_1.calculateRegion(label, textSize, x, y);\n        if (hAxis.labelIntersectAction === 'Hide') {\n          curLabel = this_1.horizontalLabelCollections[i];\n          curLabelBounds = curLabel.region.bounds;\n          curWidth = curLabelBounds.width;\n          curX = curLabelBounds.x;\n          for (var j = 1; j < i; j++) {\n            preLabel = this_1.horizontalLabelCollections[j];\n            preLabelBounds = preLabel.region.bounds;\n            preWidth = preLabelBounds.width;\n            preX = preLabelBounds.x;\n            if (smithchart.renderType === 'Impedance' && preX + preWidth > curX) {\n              label = '';\n            }\n            if (smithchart.renderType === 'Admittance' && preX < curX + curWidth) {\n              label = '';\n            }\n          }\n        }\n        var axisLabelRenderEventArgs_1 = {\n          text: label.toString(),\n          x: x,\n          y: y,\n          name: axisLabelRender,\n          cancel: false\n        };\n        var axisLabelRenderSuccess = function (args) {\n          if (!args.cancel) {\n            var options = new TextOption(smithchart.element.id + '_HLabel_' + i, axisLabelRenderEventArgs_1.x, axisLabelRenderEventArgs_1.y, 'none', axisLabelRenderEventArgs_1.text);\n            var color = font.color ? font.color : smithchart.themeStyle.axisLabelFont.color;\n            font.fontFamily = font.fontFamily || smithchart.themeStyle.labelFontFamily;\n            var element = renderTextElement(options, font, color, groupEle, smithchart.themeStyle.axisLabelFont);\n            groupEle.appendChild(element);\n          }\n        };\n        axisLabelRenderSuccess.bind(this_1);\n        smithchart.trigger(axisLabelRender, axisLabelRenderEventArgs_1, axisLabelRenderSuccess);\n      }\n    };\n    var this_1 = this;\n    for (var i = 0; i < this.horizontalLabelCollections.length; i++) {\n      _loop_1(i);\n    }\n    smithchart.svgObject.appendChild(groupEle);\n  };\n  AxisRender.prototype.drawRAxisLabels = function (smithchart) {\n    var paddingRadius = 2;\n    smithchart.radialAxis.labelStyle.fontFamily = smithchart.themeStyle.fontFamily || smithchart.radialAxis.labelStyle.fontFamily;\n    var font = smithchart.radialAxis.labelStyle;\n    var interSectPoint = new RadialLabelCollections();\n    var label;\n    var textSize;\n    var angle;\n    var position;\n    var textPosition;\n    var curX;\n    var curY;\n    var curWidth;\n    var curHeight;\n    var curLabel;\n    var curLabelBounds;\n    var preX;\n    var preY;\n    var preWidth;\n    var preHeight;\n    var preLabel;\n    var preLabelBounds;\n    var rAxis = smithchart.radialAxis;\n    var groupEle = smithchart.renderer.createGroup({\n      id: smithchart.element.id + '_RAxisLabels'\n    });\n    groupEle.setAttribute('aria-hidden', 'true');\n    var _loop_2 = function (i) {\n      interSectPoint = this_2.labelCollections[i];\n      label = interSectPoint.value.toString();\n      textSize = measureText(label, font, smithchart.themeStyle.axisLabelFont);\n      angle = Math.round(interSectPoint.angle * 100) / 100;\n      if (rAxis.labelPosition === 'Outside') {\n        position = this_2.circlePointPosition(this_2.circleCenterX, this_2.circleCenterY, interSectPoint['angle'], this_2.areaRadius + paddingRadius);\n        textPosition = this_2.setLabelsOutsidePosition(angle, position.x, position.y, textSize);\n      } else {\n        position = this_2.circlePointPosition(this_2.circleCenterX, this_2.circleCenterY, interSectPoint['angle'], this_2.areaRadius - paddingRadius);\n        textPosition = this_2.setLabelsInsidePosition(angle, position.x, position.y, textSize);\n      }\n      this_2.labelCollections[i]['region'] = this_2.calculateRegion(label, textSize, textPosition.x, textPosition.y);\n      if (rAxis.labelIntersectAction === 'Hide') {\n        curLabel = this_2.labelCollections[i];\n        curLabelBounds = curLabel['region']['bounds'];\n        curWidth = curLabelBounds['width'];\n        curHeight = curLabelBounds['height'];\n        curX = curLabelBounds['x'];\n        curY = curLabelBounds['y'];\n        for (var j = 0; j < i; j++) {\n          preLabel = this_2.labelCollections[j];\n          preLabelBounds = preLabel['region']['bounds'];\n          preWidth = preLabelBounds['width'];\n          preHeight = preLabelBounds['height'];\n          preX = preLabelBounds['x'];\n          preY = preLabelBounds['y'];\n          if (preX <= curX + curWidth && curX <= preX + preWidth && preY <= curY + curHeight && curY <= preY + preHeight) {\n            label = ' ';\n          }\n        }\n      }\n      var axisLabelRenderEventArgs = {\n        text: label.toString(),\n        x: textPosition.x,\n        y: textPosition.y,\n        name: axisLabelRender,\n        cancel: false\n      };\n      var axisLabelRenderSuccess = function (args) {\n        if (!args.cancel) {\n          var options = new TextOption(smithchart.element.id + '_RLabel_' + i, axisLabelRenderEventArgs.x, axisLabelRenderEventArgs.y, 'none', axisLabelRenderEventArgs.text);\n          var color = font.color ? font.color : smithchart.themeStyle.axisLabelFont.color;\n          font.fontFamily = smithchart.themeStyle.labelFontFamily ? smithchart.themeStyle.labelFontFamily : font.fontFamily;\n          var element = renderTextElement(options, font, color, groupEle, smithchart.themeStyle.axisLabelFont);\n          groupEle.appendChild(element);\n        }\n      };\n      axisLabelRenderSuccess.bind(this_2);\n      smithchart.trigger(axisLabelRender, axisLabelRenderEventArgs, axisLabelRenderSuccess);\n    };\n    var this_2 = this;\n    for (var i = 0; i < this.labelCollections.length; i++) {\n      _loop_2(i);\n    }\n    smithchart.svgObject.appendChild(groupEle);\n  };\n  AxisRender.prototype.calculateRegion = function (label, textSize, textPositionX, textPositionY) {\n    var xAxisLabelRegions = new LabelRegion();\n    var bounds = {\n      x: textPositionX,\n      y: textPositionY,\n      width: textSize.width,\n      height: textSize.height\n    };\n    xAxisLabelRegions = {\n      bounds: bounds,\n      labelText: label\n    };\n    return xAxisLabelRegions;\n  };\n  AxisRender.prototype.updateHMinorGridLines = function (smithchart) {\n    var minorGridLine = smithchart.horizontalAxis.minorGridLines;\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_horizontalAxisMinorGridLines'\n    });\n    var path = this.calculateGridLinesPath(this.minorHGridArcPoints);\n    var haxismioptions = new PathOption(smithchart.element.id + '_horizontalAxisMinorGridLines', 'none', minorGridLine['width'], minorGridLine.color ? minorGridLine.color : smithchart.themeStyle.minorGridLine, minorGridLine['opacity'], minorGridLine['dashArray'], path);\n    var element = smithchart.renderer.drawPath(haxismioptions);\n    groupElement.appendChild(element);\n    smithchart.svgObject.appendChild(groupElement);\n  };\n  AxisRender.prototype.updateRMinorGridLines = function (smithchart) {\n    var minorGridLine = smithchart.radialAxis.minorGridLines;\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_radialAxisMinorGridLines'\n    });\n    var path = this.calculateGridLinesPath(this.minorGridArcPoints);\n    var raxismioptions = new PathOption(smithchart.element.id + '_radialAxisMinorGridLines', 'none', minorGridLine['width'], minorGridLine.color ? minorGridLine.color : smithchart.themeStyle.minorGridLine, minorGridLine['opacity'], minorGridLine['dashArray'], path);\n    var element = smithchart.renderer.drawPath(raxismioptions);\n    groupElement.appendChild(element);\n    smithchart.svgObject.appendChild(groupElement);\n  };\n  AxisRender.prototype.calculateGridLinesPath = function (points) {\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var r1;\n    var r2;\n    var pathSegment = new GridArcPoints();\n    var angle;\n    var isLargeArc;\n    var sweep;\n    var sb = '';\n    for (var i = 0; i < points.length; i++) {\n      pathSegment = points[i];\n      x1 = pathSegment.startPoint.x;\n      y1 = pathSegment.startPoint.y;\n      x2 = pathSegment.endPoint.x;\n      y2 = pathSegment.endPoint.y;\n      r1 = pathSegment.size ? pathSegment.size.width : 0;\n      r2 = pathSegment.size ? pathSegment.size.height : 0;\n      angle = pathSegment.rotationAngle ? pathSegment.rotationAngle : 0;\n      isLargeArc = pathSegment.isLargeArc ? 1 : 0;\n      sweep = pathSegment.sweepDirection ? pathSegment.sweepDirection : 0;\n      sb = sb + ('M' + ' ' + x1 + ' ' + y1 + ' ' + 'A' + ' ' + r1 + ' ' + r2 + ' ' + angle + ' ' + isLargeArc + ' ' + sweep + ' ' + x2 + ' ' + y2 + ' ');\n    }\n    var path = sb.toString();\n    return path;\n  };\n  AxisRender.prototype.measureHMinorGridLines = function (smithchart) {\n    var radialPoint1;\n    var radialPoint2;\n    var arcPoints = [];\n    var isLargeArc;\n    var startPoint;\n    var endPoint;\n    var size;\n    var cx;\n    var maxCount = smithchart.horizontalAxis.minorGridLines.count;\n    var previous;\n    var next;\n    var space;\n    var count;\n    var interval;\n    var radius;\n    var leftX;\n    this.minorHGridArcPoints = [];\n    var diameter = this.areaRadius * 2;\n    for (var i = 0; i < this.horizontalLabelCollections.length - 3; i++) {\n      previous = this.horizontalLabelCollections[i];\n      next = this.horizontalLabelCollections[i + 1];\n      space = (previous['radius'] - next['radius']) * 2;\n      count = Math.floor(maxCount / 100 * space);\n      interval = space / count;\n      for (var j = 0; j < count; j++) {\n        radius = next['radius'] + j * interval / 2;\n        leftX = smithchart.renderType === 'Impedance' ? this.circleLeftX + diameter - radius * 2 : this.circleLeftX;\n        cx = leftX + radius;\n        isLargeArc = next['value'] > 5;\n        arcPoints = this.calculateMinorArcStartEndPoints(next['value']);\n        if (smithchart.renderType === 'Impedance') {\n          radialPoint1 = arcPoints[0];\n          radialPoint2 = arcPoints[1];\n        } else {\n          radialPoint1 = arcPoints[1];\n          radialPoint2 = arcPoints[0];\n        }\n        startPoint = this.intersectingCirclePoints(radialPoint1[0].centerX, radialPoint1[0].centerY, radialPoint1[0].radius, cx, previous['centerY'], radius, smithchart.renderType);\n        endPoint = this.intersectingCirclePoints(radialPoint2[0].centerX, radialPoint2[0].centerY, radialPoint2[0].radius, cx, previous['centerY'], radius, smithchart.renderType);\n        size = {\n          width: radius,\n          height: radius\n        };\n        this.minorHGridArcPoints.push({\n          startPoint: startPoint,\n          endPoint: endPoint,\n          rotationAngle: 2 * Math.PI,\n          sweepDirection: smithchart.renderType === 'Impedance' ? this.direction['counterclockwise'] : this.direction['clockwise'],\n          isLargeArc: isLargeArc,\n          size: size\n        });\n      }\n    }\n  };\n  AxisRender.prototype.measureRMinorGridLines = function (smithchart) {\n    var maxCount = smithchart.radialAxis.minorGridLines.count;\n    var arcCx;\n    var nextAngle;\n    // let k: number = 0;\n    var betweenAngle;\n    var circlePoint;\n    var previous;\n    var next;\n    var size;\n    var distance;\n    var count;\n    var interval;\n    var centerValue;\n    var circumference = Math.PI * (this.areaRadius * 2);\n    var arcStartX = arcCx = smithchart.renderType === 'Impedance' ? this.circleCenterX + this.areaRadius : this.circleCenterX - this.areaRadius;\n    var arcStartY = this.circleCenterY;\n    this.minorGridArcPoints = [];\n    var arcStartPoint = {\n      x: arcStartX,\n      y: arcStartY\n    };\n    for (var i = 2; i < this.labelCollections.length - 3; i++) {\n      previous = this.labelCollections[i];\n      next = this.labelCollections[i + 1];\n      if (smithchart.renderType === 'Impedance') {\n        nextAngle = next['angle'] === 360 ? 0 : next['angle'];\n        betweenAngle = Math.abs(nextAngle - previous['angle']);\n      } else {\n        nextAngle = previous['angle'] === 360 ? 0 : previous['angle'];\n        betweenAngle = Math.abs(nextAngle - next['angle']);\n      }\n      distance = circumference / 360 * betweenAngle;\n      count = Math.floor(maxCount / 100 * distance);\n      interval = betweenAngle / count;\n      centerValue = next['value'] > 0 ? next['value'] : previous['value'];\n      circlePoint = this.minorGridLineArcIntersectCircle(Math.abs(centerValue));\n      for (var j = 1; j < count; j++) {\n        var outterInterSectAngle = interval * j + (previous['angle'] === 360 ? nextAngle : previous['angle']);\n        var outerInterSectPoint = this.circlePointPosition(this.circleCenterX, this.circleCenterY, outterInterSectAngle, this.areaRadius);\n        var radius = this.arcRadius(arcStartPoint, outerInterSectPoint, outterInterSectAngle);\n        var arcCy = outterInterSectAngle > 180 ? this.circleCenterY - radius : this.circleCenterY + radius;\n        var innerInterSectPoint = this.intersectingCirclePoints(arcCx, arcCy, radius, circlePoint[0].centerX, circlePoint[0].centerY, circlePoint[0].radius, smithchart.renderType);\n        var startPoint = {\n          x: innerInterSectPoint.x,\n          y: innerInterSectPoint.y\n        };\n        var endPoint = {\n          x: outerInterSectPoint.x,\n          y: outerInterSectPoint.y\n        };\n        size = {\n          width: radius,\n          height: radius\n        };\n        var sweepDirection = previous['value'] >= 0 ? this.direction['clockwise'] : this.direction['counterclockwise'];\n        this.minorGridArcPoints.push({\n          startPoint: startPoint,\n          endPoint: endPoint,\n          rotationAngle: 2 * Math.PI,\n          sweepDirection: sweepDirection,\n          isLargeArc: false,\n          size: size\n        });\n        // k++;\n      }\n    }\n  };\n  AxisRender.prototype.minorGridLineArcIntersectCircle = function (centerValue) {\n    var calValue;\n    if (centerValue >= 3) {\n      calValue = 20;\n    } else if (centerValue >= 1.5) {\n      calValue = 10;\n    } else if (centerValue >= 0.6) {\n      calValue = 3;\n    } else {\n      calValue = 2;\n    }\n    var circlePoint = this.horizontalLabelCollections.filter(function (c) {\n      return c['value'] === calValue;\n    });\n    return circlePoint;\n  };\n  AxisRender.prototype.circlePointPosition = function (cx, cy, angle, r) {\n    var radian = angle * (Math.PI / 180);\n    var pointX = cx + r * Math.cos(radian);\n    var pointY = cy + r * Math.sin(radian);\n    return {\n      x: pointX,\n      y: pointY\n    };\n  };\n  AxisRender.prototype.setLabelsInsidePosition = function (angle, px, py, textSize) {\n    var x = px;\n    var y = py;\n    if (angle === 0 || angle === 360) {\n      x -= textSize.width;\n      y -= textSize.height / 2;\n    } else if (angle === 90) {\n      x -= textSize.width;\n      y += textSize.height / 8;\n    } else if (angle === 180) {\n      y += textSize.height;\n    } else if (angle === 270) {\n      y += textSize.height / 2;\n    } else if (angle > 0 && angle <= 20) {\n      x -= textSize.width;\n    } else if (angle > 20 && angle <= 60) {\n      x -= textSize.width + textSize.width / 2;\n      y += textSize.height / 2;\n    } else if (angle > 60 && angle < 90) {\n      x -= textSize.width + textSize.width / 4;\n      y += textSize.height / 4;\n    } else if (angle > 90 && angle <= 135) {\n      x -= textSize.width / 2;\n      y += textSize.height / 16;\n    } else if (angle > 135 && angle <= 150) {\n      x += textSize.width / 2;\n      y += textSize.height / 2;\n    } else if (angle > 150 && angle < 180) {\n      x += textSize.width / 2;\n      y += textSize.height;\n    } else if (angle > 180 && angle <= 210) {\n      x += textSize.width / 6;\n      y += textSize.height / 6;\n    } else if (angle > 210 && angle < 240) {\n      y += textSize.height / 4;\n    } else if (angle > 225 && angle < 270) {\n      y += textSize.height / 3;\n    } else if (angle > 270 && angle <= 300) {\n      x -= textSize.width + textSize.width / 4;\n      y += textSize.height / 4;\n    } else if (angle > 300 && angle <= 330) {\n      x -= textSize.width + textSize.width / 3;\n      y += textSize.height / 4;\n    } else if (angle > 330 && angle <= 340) {\n      x -= textSize.width + textSize.width / 2;\n      y += textSize.height / 4;\n    } else if (angle > 340) {\n      x -= textSize.width;\n      y += textSize.height / 8;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  };\n  AxisRender.prototype.setLabelsOutsidePosition = function (angle, px, py, textSize) {\n    var x = px;\n    var y = py;\n    if (angle === 90) {\n      x -= textSize.width / 2;\n      y += textSize.height;\n    } else if (angle === 180) {\n      x -= textSize.width + 5;\n      y -= textSize.height / 4;\n    } else if (angle === 270) {\n      x -= textSize.width / 2;\n      y -= textSize.height / 4;\n    } else if (angle === 360) {\n      x += 5;\n      y -= textSize.height / 2;\n    } else if (angle > 0 && angle <= 30) {\n      x += textSize.width / 4;\n      y += textSize.height / 8;\n    } else if (angle > 30 && angle <= 60) {\n      x += textSize.width / 2;\n      y += textSize.height / 4;\n    } else if (angle > 60 && angle <= 90) {\n      x -= textSize.width / 2;\n      y += textSize.height;\n    } else if (angle > 90 && angle <= 135) {\n      x -= textSize.width;\n      y += textSize.height;\n    } else if (angle > 135 && angle <= 180) {\n      x -= textSize.width + textSize.width / 4;\n      y += textSize.height / 4;\n    } else if (angle > 180 && angle <= 210) {\n      x -= textSize.width + textSize.width / 4;\n      y -= textSize.height / 4;\n    } else if (angle > 210 && angle <= 270) {\n      x -= textSize.width;\n      y -= textSize.height / 4;\n    } else if (angle > 270 && angle <= 340) {\n      y -= textSize.height / 4;\n    } else if (angle > 340) {\n      y += textSize.height / 4;\n      x += textSize.width / 6;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  };\n  AxisRender.prototype.arcRadius = function (startPoint, endPoint, angle) {\n    var radian = angle > 180 ? 90 * Math.PI / 180 : 270 * Math.PI / 180; // Angle 90 and 270 used for calculating upper and lower circle\n    var mx = (endPoint.x - startPoint.x) / 2;\n    var my = (endPoint.y - startPoint.y) / 2;\n    var u = (Math.cos(radian) * my - Math.sin(radian) * mx) / (Math.cos(radian) * mx + Math.sin(radian) * my);\n    var t = (my - mx * u) / Math.sin(radian);\n    var cy = startPoint.y + Math.sin(radian) * t;\n    var radius = Math.abs(startPoint.y - cy);\n    return radius;\n  };\n  return AxisRender;\n}();\nexport { AxisRender };","map":{"version":3,"names":["measureText","HorizontalLabelCollection","LabelRegion","Point","Direction","GridArcPoints","RadialLabelCollections","PathOption","TextOption","renderTextElement","_getEpsilonValue","axisLabelRender","AxisRender","radialLabels","radialLabelCollections","horizontalLabelCollections","labelCollections","direction","prototype","renderArea","smithchart","bounds","calculateChartArea","calculateCircleMargin","calculateXAxisRange","calculateRAxisRange","measureHorizontalAxis","measureRadialAxis","horizontalAxis","visible","updateHAxis","radialAxis","updateRAxis","drawHAxisLabels","drawRAxisLabels","majorGridLines","minorGridLines","axisLine","updateHMajorGridLines","updateHMinorGridLines","updateHAxisLine","updateRMajorGridLines","updateRMinorGridLines","updateRAxisLine","measureHMajorGridLines","measureHMinorGridLines","measureRMajorGridLines","measureRMinorGridLines","width","availableSize","height","chartAreaWidth","Math","min","chartAreaHeight","x","y","chartArea","padding","maxLabelWidth","radius","maximumLabelLength","labelMargin","labelPosition","diameter","actualRadius","circleCoefficient","areaRadius","circleLeftX","circleTopY","circleCenterX","circleCenterY","font","labelStyle","label","textSize","i","length","toString","themeStyle","axisLabelFont","calculateAxisLabels","spacingBetweenGridLines","previousR","j","labels","round","coeff","isOverlap1","isOverlap2","isOverlap","staticlabels","k","d","cx","horizontalAxisLabels","cy","circleStartX","leftX","renderType","push","centerX","centerY","value","region","arcCy","arcRadius","point","abs","arcPoints","startPoint","endPoint","radialPoint1","radialPoint2","size","majorHGridArcPoints","circlePoint","calculateHMajorArcStartEndPoints","intersectingCirclePoints","rotationAngle","PI","sweepDirection","isLargeArc","radialPoint","innerInterSectPoint","outerInterSectPoint","outterInterSectRadian","outterInterSectAngle","majorRGridArcPoints","epsilon","calculateMajorArcStartEndPoints","circleXYRadianValue","angle","outterX","outterY","radian","atan2","filter","c","arcHPoints","calValue1","calValue2","calculateMinorArcStartEndPoints","marcHPoints","x1","y1","r1","x2","y2","r2","midRadius","sqrt","radiusSquare","a","radiusSquare2","fx","gx","ix1","ix2","fy","gy","iy1","iy2","majorGridLine","groupElement","renderer","createGroup","element","id","setAttribute","path","calculateGridLinesPath","haxismgoptions","color","drawPath","appendChild","svgObject","raxismgoptions","point1","point2","sweep","options","dashArray","hAxis","fontFamily","circleAxis","curLabel","curLabelBounds","curWidth","curX","preLabel","preLabelBounds","preWidth","preX","groupEle","_loop_1","this_1","calculateRegion","labelIntersectAction","axisLabelRenderEventArgs_1","text","name","cancel","axisLabelRenderSuccess","args","labelFontFamily","bind","trigger","paddingRadius","interSectPoint","position","textPosition","curY","curHeight","preY","preHeight","rAxis","_loop_2","this_2","circlePointPosition","setLabelsOutsidePosition","setLabelsInsidePosition","axisLabelRenderEventArgs","textPositionX","textPositionY","xAxisLabelRegions","labelText","minorGridLine","minorHGridArcPoints","haxismioptions","minorGridArcPoints","raxismioptions","points","pathSegment","sb","maxCount","count","previous","next","space","interval","floor","arcCx","nextAngle","betweenAngle","distance","centerValue","circumference","arcStartX","arcStartY","arcStartPoint","minorGridLineArcIntersectCircle","calValue","r","pointX","cos","pointY","sin","px","py","mx","my","u","t"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/smithchart/axis/axisrender.js"],"sourcesContent":["import { measureText } from '../../smithchart/utils/helper';\nimport { HorizontalLabelCollection, LabelRegion, Point, Direction } from '../../smithchart/utils/utils';\nimport { GridArcPoints, RadialLabelCollections } from '../../smithchart/utils/utils';\nimport { PathOption, TextOption, renderTextElement, _getEpsilonValue } from '../../smithchart/utils/helper';\nimport { axisLabelRender } from '../model/constant';\nvar AxisRender = /** @class */ (function () {\n    function AxisRender() {\n        this.radialLabels = [-50, -20, -10, -5, -4, -3, -2, -1.5, -1, -0.8, -0.6, -0.4, -0.2,\n            0, 0.2, 0.4, 0.6, 0.8, 1, 1.5, 2, 3, 4, 5, 10, 20, 50];\n        this.radialLabelCollections = [];\n        this.horizontalLabelCollections = [];\n        this.labelCollections = [];\n        this.direction = new Direction();\n    }\n    AxisRender.prototype.renderArea = function (smithchart, bounds) {\n        this.calculateChartArea(smithchart, bounds);\n        this.calculateCircleMargin(smithchart, bounds);\n        this.calculateXAxisRange(smithchart);\n        this.calculateRAxisRange(smithchart);\n        this.measureHorizontalAxis(smithchart);\n        this.measureRadialAxis(smithchart);\n        if (smithchart.horizontalAxis.visible) {\n            this.updateHAxis(smithchart);\n        }\n        if (smithchart.radialAxis.visible) {\n            this.updateRAxis(smithchart);\n        }\n        if (smithchart.horizontalAxis.visible) {\n            this.drawHAxisLabels(smithchart);\n        }\n        if (smithchart.radialAxis.visible) {\n            this.drawRAxisLabels(smithchart);\n        }\n    };\n    AxisRender.prototype.updateHAxis = function (smithchart) {\n        var majorGridLines = smithchart.horizontalAxis.majorGridLines;\n        var minorGridLines = smithchart.horizontalAxis.minorGridLines;\n        var axisLine = smithchart.horizontalAxis.axisLine;\n        if (majorGridLines.visible) {\n            this.updateHMajorGridLines(smithchart);\n        }\n        if (minorGridLines.visible) {\n            this.updateHMinorGridLines(smithchart);\n        }\n        if (axisLine.visible) {\n            this.updateHAxisLine(smithchart);\n        }\n    };\n    AxisRender.prototype.updateRAxis = function (smithchart) {\n        var majorGridLines = smithchart.radialAxis.majorGridLines;\n        var minorGridLines = smithchart.radialAxis.minorGridLines;\n        var axisLine = smithchart.radialAxis.axisLine;\n        if (majorGridLines.visible) {\n            this.updateRMajorGridLines(smithchart);\n        }\n        if (minorGridLines.visible) {\n            this.updateRMinorGridLines(smithchart);\n        }\n        if (axisLine.visible) {\n            this.updateRAxisLine(smithchart);\n        }\n    };\n    AxisRender.prototype.measureHorizontalAxis = function (smithchart) {\n        var minorGridLines = smithchart.horizontalAxis.minorGridLines;\n        this.measureHMajorGridLines(smithchart);\n        if (minorGridLines.visible) {\n            this.measureHMinorGridLines(smithchart);\n        }\n    };\n    AxisRender.prototype.measureRadialAxis = function (smithchart) {\n        var minorGridLines = smithchart.radialAxis.minorGridLines;\n        this.measureRMajorGridLines(smithchart);\n        if (minorGridLines.visible) {\n            this.measureRMinorGridLines(smithchart);\n        }\n    };\n    AxisRender.prototype.calculateChartArea = function (smithchart, bounds) {\n        var width = smithchart.availableSize.width;\n        var height = smithchart.availableSize.height;\n        width = bounds.width;\n        height = bounds.height;\n        var chartAreaWidth = Math.min(width, height);\n        var chartAreaHeight = Math.min(width, height);\n        var x = bounds.x + (bounds.width / 2 - chartAreaWidth / 2);\n        var y = bounds.y + ((height - chartAreaHeight) / 2 > 0 ? (height - chartAreaHeight) / 2 : 0);\n        smithchart.chartArea = { x: x, y: y, width: chartAreaWidth, height: chartAreaHeight };\n    };\n    AxisRender.prototype.calculateCircleMargin = function (smithchart, bounds) {\n        var padding = 10;\n        var maxLabelWidth = 0;\n        var width = smithchart.chartArea.width;\n        var radius = smithchart.radius;\n        maxLabelWidth = this.maximumLabelLength(smithchart);\n        var labelMargin = (smithchart.radialAxis.labelPosition === 'Outside') ? (maxLabelWidth + padding) : padding;\n        var diameter = width - labelMargin * 2 > 0 ? width - labelMargin * 2 : 0;\n        var actualRadius = diameter / 2;\n        var circleCoefficient = radius > 1 ? 1 : (radius < 0.1 ? 0.1 : radius);\n        this.areaRadius = actualRadius * circleCoefficient;\n        this.circleLeftX = smithchart.chartArea.x + labelMargin + (actualRadius * (1 - circleCoefficient));\n        this.circleTopY = smithchart.chartArea.y + labelMargin + (actualRadius * (1 - circleCoefficient));\n        this.circleCenterX = this.circleLeftX + this.areaRadius;\n        this.circleCenterY = bounds.y + bounds.height / 2;\n    };\n    AxisRender.prototype.maximumLabelLength = function (smithchart) {\n        var maximumLabelLength = 0;\n        var font = smithchart.horizontalAxis.labelStyle;\n        var label;\n        var textSize;\n        for (var i = 0; i < this.radialLabels.length; i++) {\n            label = this.radialLabels[i].toString();\n            textSize = measureText(label, font, smithchart.themeStyle.axisLabelFont);\n            if (maximumLabelLength < textSize.width) {\n                maximumLabelLength = textSize.width;\n            }\n        }\n        return maximumLabelLength;\n    };\n    AxisRender.prototype.calculateAxisLabels = function () {\n        var spacingBetweenGridLines = 30;\n        var previousR = 0;\n        var j = 0;\n        var labels = [];\n        var diameter = this.areaRadius * 2;\n        for (var i = 0; i < 2; i = i + 0.1) {\n            i = Math.round(i * 10) / 10;\n            var coeff = 1 / (i + 1);\n            var isOverlap1 = false;\n            var isOverlap2 = false;\n            var radius = ((diameter * coeff) / 2) * 2;\n            if (previousR === 0.0 || i === 1) {\n                previousR = radius;\n                labels[j] = i;\n                j++;\n                continue;\n            }\n            if (i < 1) {\n                isOverlap1 = this.isOverlap(1, diameter, radius, spacingBetweenGridLines);\n            }\n            if (i > 1) {\n                isOverlap2 = this.isOverlap(2, diameter, radius, spacingBetweenGridLines);\n            }\n            if (isOverlap1 || isOverlap2) {\n                continue;\n            }\n            if (previousR - radius >= spacingBetweenGridLines) {\n                labels[j] = i;\n                j++;\n                previousR = radius;\n            }\n        }\n        var staticlabels = [2, 3, 4, 5, 10, 20, 50];\n        for (var k = 0; k < staticlabels.length; k++) {\n            labels[j] = staticlabels[k];\n            j++;\n        }\n        return labels;\n    };\n    AxisRender.prototype.isOverlap = function (x, d, previousR, spacingBetweenGridLines) {\n        var coeff = 1 / (x + 1); // (1 / 1+r) find the radius for the x value\n        var radius = ((d * coeff) / 2) * 2;\n        return previousR - radius < spacingBetweenGridLines;\n    };\n    AxisRender.prototype.calculateXAxisRange = function (smithchart) {\n        var x;\n        var coeff;\n        var radius;\n        var cx;\n        var diameter = this.areaRadius * 2;\n        var horizontalAxisLabels = this.calculateAxisLabels();\n        var cy = this.circleCenterY;\n        var circleStartX = this.circleLeftX;\n        var leftX = this.circleLeftX;\n        for (var i = 0; i < horizontalAxisLabels.length; i++) {\n            x = horizontalAxisLabels[i];\n            coeff = 1 / (x + 1);\n            radius = (diameter * coeff) / 2;\n            if (smithchart.renderType === 'Impedance') {\n                leftX = circleStartX + diameter - (radius * 2);\n            }\n            cx = leftX + radius;\n            this.horizontalLabelCollections.push({\n                centerX: cx, centerY: cy, radius: radius, value: x, region: null\n            });\n        }\n    };\n    AxisRender.prototype.calculateRAxisRange = function (smithchart) {\n        var arcCy;\n        var arcRadius;\n        var diameter = this.areaRadius * 2;\n        var y;\n        var point = new Point();\n        if (smithchart.renderType === 'Impedance') {\n            point.x = this.circleLeftX + diameter;\n            point.y = this.circleTopY + this.areaRadius;\n        }\n        else {\n            point.x = this.circleLeftX;\n            point.y = this.circleTopY + this.areaRadius;\n        }\n        for (var i = 0; i < this.radialLabels.length; i++) {\n            y = this.radialLabels[i];\n            arcRadius = Math.abs(((1 / y) * diameter) / 2);\n            if (smithchart.renderType === 'Impedance') {\n                arcCy = y > 0 ? point.y - arcRadius : point.y + arcRadius;\n            }\n            else {\n                arcCy = y < 0 ? point.y - arcRadius : point.y + arcRadius;\n            }\n            this.radialLabelCollections.push({\n                centerX: point.x, centerY: arcCy, radius: arcRadius, value: y\n            });\n        }\n    };\n    AxisRender.prototype.measureHMajorGridLines = function (smithchart) {\n        var arcPoints = [];\n        var startPoint;\n        var endPoint;\n        var radialPoint1;\n        var radialPoint2;\n        var size;\n        this.majorHGridArcPoints = [];\n        for (var i = 0; i < this.horizontalLabelCollections.length; i++) {\n            var circlePoint = new HorizontalLabelCollection();\n            circlePoint = this.horizontalLabelCollections[i];\n            arcPoints = this.calculateHMajorArcStartEndPoints(circlePoint.value);\n            if (smithchart.renderType === 'Impedance') {\n                radialPoint1 = arcPoints[0];\n                radialPoint2 = arcPoints[1];\n            }\n            else {\n                radialPoint1 = arcPoints[1];\n                radialPoint2 = arcPoints[0];\n            }\n            size = { width: circlePoint.radius, height: circlePoint.radius };\n            if (circlePoint.value !== 0.0 && circlePoint.value !== 50.0) {\n                startPoint = this.intersectingCirclePoints(radialPoint1[0].centerX, radialPoint1[0].centerY, radialPoint1[0].radius, circlePoint.centerX, circlePoint.centerY, circlePoint.radius, smithchart.renderType);\n                endPoint = this.intersectingCirclePoints(radialPoint2[0].centerX, radialPoint2[0].centerY, radialPoint2[0].radius, circlePoint.centerX, circlePoint.centerY, circlePoint.radius, smithchart.renderType);\n                this.majorHGridArcPoints.push({\n                    startPoint: startPoint,\n                    endPoint: endPoint,\n                    rotationAngle: 2 * Math.PI,\n                    sweepDirection: (smithchart.renderType === 'Impedance') ?\n                        this.direction['counterclockwise'] : this.direction['clockwise'],\n                    isLargeArc: true,\n                    size: size\n                });\n            }\n            else {\n                startPoint = { x: circlePoint.centerX + circlePoint.radius, y: circlePoint.centerY };\n                endPoint = { x: circlePoint.centerX + circlePoint.radius, y: circlePoint.centerY - 0.05 };\n                this.majorHGridArcPoints.push({\n                    startPoint: startPoint,\n                    endPoint: endPoint,\n                    rotationAngle: 2 * Math.PI,\n                    sweepDirection: this.direction['clockwise'],\n                    isLargeArc: true,\n                    size: size\n                });\n            }\n        }\n    };\n    AxisRender.prototype.measureRMajorGridLines = function (smithchart) {\n        var radialPoint;\n        var y;\n        var arcPoints = [];\n        var innerInterSectPoint;\n        var outerInterSectPoint;\n        var outterInterSectRadian;\n        var outterInterSectAngle;\n        var startPoint;\n        var endPoint;\n        var size;\n        var sweepDirection;\n        this.majorRGridArcPoints = [];\n        this.labelCollections = [];\n        var epsilon = _getEpsilonValue();\n        for (var i = 0; i < this.radialLabelCollections.length; i++) {\n            radialPoint = this.radialLabelCollections[i];\n            if (radialPoint.radius <= epsilon) {\n                continue;\n            }\n            y = radialPoint.value;\n            arcPoints = this.calculateMajorArcStartEndPoints(radialPoint, Math.abs(y), smithchart);\n            innerInterSectPoint = arcPoints[0];\n            outerInterSectPoint = arcPoints[1];\n            outterInterSectRadian = this.circleXYRadianValue(this.circleCenterX, this.circleCenterY, outerInterSectPoint.x, outerInterSectPoint.y);\n            outterInterSectAngle = outterInterSectRadian * (180 / Math.PI);\n            if (y !== 0.0) {\n                startPoint = { x: innerInterSectPoint.x, y: innerInterSectPoint.y };\n                endPoint = { x: outerInterSectPoint.x, y: outerInterSectPoint.y };\n                size = { width: radialPoint.radius, height: radialPoint.radius };\n                sweepDirection = y > 0 ? this.direction['clockwise'] : this.direction['counterclockwise'];\n                this.majorRGridArcPoints.push({\n                    startPoint: startPoint,\n                    endPoint: endPoint,\n                    size: size,\n                    rotationAngle: 2 * Math.PI,\n                    isLargeArc: false,\n                    sweepDirection: sweepDirection\n                });\n                this.labelCollections.push({\n                    centerX: outerInterSectPoint.x,\n                    centerY: outerInterSectPoint.y,\n                    angle: outterInterSectAngle,\n                    value: y,\n                    radius: this.areaRadius,\n                    region: null\n                });\n            }\n            else {\n                startPoint = { x: this.circleLeftX, y: this.circleCenterY };\n                endPoint = { x: this.circleCenterX + this.areaRadius, y: this.circleCenterY };\n                this.majorRGridArcPoints.push({\n                    startPoint: startPoint,\n                    endPoint: endPoint,\n                    size: null,\n                    rotationAngle: null,\n                    isLargeArc: null,\n                    sweepDirection: null\n                });\n                this.labelCollections.push({\n                    centerX: (smithchart.renderType === 'Impedance') ?\n                        (this.circleCenterX - this.areaRadius) : (this.circleCenterX + this.areaRadius),\n                    centerY: this.circleCenterY,\n                    angle: (smithchart.renderType === 'Impedance') ?\n                        180 : 360,\n                    value: y,\n                    radius: this.areaRadius,\n                    region: null\n                });\n            }\n        }\n    };\n    AxisRender.prototype.circleXYRadianValue = function (centerX, centerY, outterX, outterY) {\n        var radian;\n        radian = Math.atan2(outterY - centerY, outterX - centerX);\n        radian = radian < 0 ? (radian + (360 * Math.PI / 180)) : radian;\n        return radian;\n    };\n    AxisRender.prototype.calculateMajorArcStartEndPoints = function (radialPoint, value, smithchart) {\n        var arcPoints = [];\n        var circlePoint = [];\n        var cx = this.circleCenterX;\n        var cy = this.circleCenterY;\n        if (value >= 10) {\n            arcPoints[0] = (smithchart.renderType === 'Impedance') ?\n                { x: cx + this.areaRadius, y: cy } : { x: cx - this.areaRadius, y: cy };\n        }\n        else if (value >= 3) {\n            circlePoint = this.horizontalLabelCollections.filter(function (c) { return c.value === 10; });\n        }\n        else if (value >= 1) {\n            circlePoint = this.horizontalLabelCollections.filter(function (c) { return c.value === 5; });\n        }\n        else {\n            circlePoint = this.horizontalLabelCollections.filter(function (c) { return c.value === 3; });\n        }\n        if (circlePoint.length > 0) {\n            arcPoints[0] = this.intersectingCirclePoints(radialPoint.centerX, radialPoint.centerY, radialPoint.radius, circlePoint[0].centerX, circlePoint[0].centerY, circlePoint[0].radius, smithchart.renderType);\n        }\n        arcPoints[1] = this.intersectingCirclePoints(radialPoint.centerX, radialPoint.centerY, radialPoint.radius, cx, cy, this.areaRadius, smithchart.renderType);\n        return arcPoints;\n    };\n    AxisRender.prototype.calculateHMajorArcStartEndPoints = function (value) {\n        var arcHPoints = [];\n        var calValue1;\n        var calValue2;\n        if (value <= 0.3) {\n            calValue1 = 2.0;\n            calValue2 = -2.0;\n        }\n        else if (value <= 1.0) {\n            calValue1 = 3.0;\n            calValue2 = -3.0;\n        }\n        else if (value <= 2.0) {\n            calValue1 = 5.0;\n            calValue2 = -5.0;\n        }\n        else if (value <= 5.0) {\n            calValue1 = 10.0;\n            calValue2 = -10.0;\n        }\n        else {\n            calValue1 = 50.0;\n            calValue2 = -50.0;\n        }\n        arcHPoints[0] = this.radialLabelCollections.filter(function (c) { return c.value === calValue1; });\n        arcHPoints[1] = this.radialLabelCollections.filter(function (c) { return c.value === calValue2; });\n        return arcHPoints;\n    };\n    AxisRender.prototype.calculateMinorArcStartEndPoints = function (value) {\n        var calValue1;\n        var calValue2;\n        var marcHPoints = [];\n        if (value <= 0.1) {\n            calValue1 = 1.0;\n            calValue2 = -1.0;\n        }\n        else if (value <= 0.2) {\n            calValue1 = 0.8;\n            calValue2 = -0.8;\n        }\n        else if (value <= 0.3) {\n            calValue1 = 0.4;\n            calValue2 = -0.4;\n        }\n        else if (value <= 0.6) {\n            calValue1 = 1.0;\n            calValue2 = -1.0;\n        }\n        else if (value <= 1.0) {\n            calValue1 = 1.5;\n            calValue2 = -1.5;\n        }\n        else if (value <= 1.5) {\n            calValue1 = 2.0;\n            calValue2 = -2.0;\n        }\n        else if (value <= 2.0) {\n            calValue1 = 1.0;\n            calValue2 = -1.0;\n        }\n        else if (value <= 5.0) {\n            calValue1 = 3.0;\n            calValue2 = -3.0;\n        }\n        else {\n            calValue1 = 10.0;\n            calValue2 = -10.0;\n        }\n        marcHPoints[0] = this.radialLabelCollections.filter(function (c) { return c['value'] === calValue1; });\n        marcHPoints[1] = this.radialLabelCollections.filter(function (c) { return c['value'] === calValue2; });\n        return marcHPoints;\n    };\n    AxisRender.prototype.intersectingCirclePoints = function (x1, y1, r1, x2, y2, r2, renderType) {\n        var point = { x: 0, y: 0 };\n        var cx = x1 - x2;\n        var cy = y1 - y2;\n        var midRadius = Math.sqrt(cx * cx + cy * cy);\n        var radiusSquare = midRadius * midRadius;\n        var a = (r1 * r1 - r2 * r2) / (2 * radiusSquare);\n        var radiusSquare2 = (r1 * r1 - r2 * r2);\n        var c = Math.sqrt(2 * (r1 * r1 + r2 * r2) / radiusSquare - (radiusSquare2 * radiusSquare2) / (radiusSquare * radiusSquare) - 1);\n        var fx = (x1 + x2) / 2 + a * (x2 - x1);\n        var gx = c * (y2 - y1) / 2;\n        var ix1 = fx + gx;\n        var ix2 = fx - gx;\n        var fy = (y1 + y2) / 2 + a * (y2 - y1);\n        var gy = c * (x1 - x2) / 2;\n        var iy1 = fy + gy;\n        var iy2 = fy - gy;\n        if (renderType === 'Impedance') {\n            if (ix2 < ix1) {\n                point.x = ix2;\n                point.y = iy2;\n            }\n            else {\n                point.x = ix1;\n                point.y = iy1;\n            }\n        }\n        else {\n            if (ix1 > ix2) {\n                point.x = ix1;\n                point.y = iy1;\n            }\n            else {\n                point.x = ix2;\n                point.y = iy2;\n            }\n        }\n        return { x: point.x, y: point.y };\n    };\n    AxisRender.prototype.updateHMajorGridLines = function (smithchart) {\n        var majorGridLine = smithchart.horizontalAxis.majorGridLines;\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_horizontalAxisMajorGridLines' });\n        groupElement.setAttribute('aria-hidden', 'true');\n        var path = this.calculateGridLinesPath(this.majorHGridArcPoints);\n        var haxismgoptions = new PathOption(smithchart.element.id + '_horizontalAxisMajorGridLines', 'none', majorGridLine['width'], majorGridLine.color ? majorGridLine.color : smithchart.themeStyle.majorGridLine, majorGridLine['opacity'], majorGridLine['dashArray'], path);\n        var element = smithchart.renderer.drawPath(haxismgoptions);\n        groupElement.appendChild(element);\n        smithchart.svgObject.appendChild(groupElement);\n    };\n    AxisRender.prototype.updateRMajorGridLines = function (smithchart) {\n        var majorGridLine = smithchart.radialAxis.majorGridLines;\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_radialAxisMajorGridLines' });\n        groupElement.setAttribute('aria-hidden', 'true');\n        var path = this.calculateGridLinesPath(this.majorRGridArcPoints);\n        var raxismgoptions = new PathOption(smithchart.element.id + '_radialAxisMajorGridLines', 'none', majorGridLine['width'], majorGridLine.color ? majorGridLine.color : smithchart.themeStyle.majorGridLine, majorGridLine['opacity'], majorGridLine['dashArray'], path);\n        var element = smithchart.renderer.drawPath(raxismgoptions);\n        groupElement.appendChild(element);\n        smithchart.svgObject.appendChild(groupElement);\n    };\n    AxisRender.prototype.updateHAxisLine = function (smithchart) {\n        var radius = this.areaRadius;\n        var axisLine = smithchart.horizontalAxis.axisLine;\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_hAxisLine' });\n        groupElement.setAttribute('aria-hidden', 'true');\n        var point1 = { x: this.circleCenterX + radius, y: this.circleCenterY };\n        var point2 = { x: this.circleCenterX + radius, y: (this.circleCenterY - 0.05) };\n        var size = { width: radius, height: radius };\n        var sweep = this.direction['clockwise'];\n        var isLargeArc = 1;\n        var angle = Math.PI * 2;\n        var direction = 'M' + '' + point1.x + ' ' + point1.y + ' ' + 'A' + ' ' + size.width +\n            ' ' + size.height + ' ' + angle + ' ' + isLargeArc + ' ' + sweep + ' ' + point2.x + ' ' + point2.y + '';\n        var options = new PathOption(smithchart.element.id + '_horizontalAxisLine', 'none', axisLine.width, axisLine.color ? axisLine.color : smithchart.themeStyle.axisLine, 1, axisLine.dashArray, direction);\n        var element = smithchart.renderer.drawPath(options);\n        groupElement.appendChild(element);\n        smithchart.svgObject.appendChild(groupElement);\n    };\n    AxisRender.prototype.updateRAxisLine = function (smithchart) {\n        var radius = this.areaRadius;\n        var axisLine = smithchart.radialAxis.axisLine;\n        var point1 = { x: this.circleCenterX - radius, y: this.circleCenterY };\n        var point2 = { x: this.circleCenterX + radius, y: this.circleCenterY };\n        var size = { width: 0, height: 0 };\n        var sweep = this.direction['counterclockwise'];\n        var isLargeArc = 0;\n        var angle = 0;\n        var direction = 'M' + ' ' + point1.x + ' ' + point1.y + ' ' + 'A' + ' ' +\n            size.width + ' ' + size.height + ' ' + angle + ' ' + isLargeArc + ' ' + sweep + ' ' +\n            point2.x + ' ' + point2.y + '';\n        var options = new PathOption(smithchart.element.id + '_radialAxisLine', 'none', axisLine.width, axisLine.color ? axisLine.color : smithchart.themeStyle.axisLine, 1, axisLine.dashArray, direction);\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_rAxisLine' });\n        groupElement.setAttribute('aria-hidden', 'true');\n        var element = smithchart.renderer.drawPath(options);\n        groupElement.appendChild(element);\n        smithchart.svgObject.appendChild(groupElement);\n    };\n    AxisRender.prototype.drawHAxisLabels = function (smithchart) {\n        var hAxis = smithchart.horizontalAxis;\n        smithchart.radialAxis.labelStyle.fontFamily = smithchart.themeStyle.fontFamily || smithchart.radialAxis.labelStyle.fontFamily;\n        var font = smithchart.horizontalAxis.labelStyle;\n        var circleAxis;\n        var label;\n        var x;\n        var y;\n        var textSize;\n        var curLabel;\n        var curLabelBounds;\n        var curWidth;\n        var curX;\n        var preLabel;\n        var preLabelBounds;\n        var preWidth;\n        var preX;\n        var groupEle = smithchart.renderer.createGroup({ id: smithchart.element.id + '_HAxisLabels' });\n        groupEle.setAttribute('aria-hidden', 'true');\n        var _loop_1 = function (i) {\n            circleAxis = this_1.horizontalLabelCollections[i];\n            label = this_1.horizontalLabelCollections[i].value.toString();\n            if (circleAxis.value !== 0.0) {\n                x = (smithchart.renderType === 'Impedance') ?\n                    circleAxis.centerX - circleAxis.radius : circleAxis.centerX + circleAxis.radius;\n                y = circleAxis.centerY;\n                textSize = measureText(label, font, smithchart.themeStyle.axisLabelFont);\n                x = (smithchart.renderType === 'Impedance') ? x - textSize.width : x;\n                if (hAxis.labelPosition === 'Outside') {\n                    y -= textSize.height / 4;\n                }\n                else {\n                    y += textSize.height;\n                }\n                this_1.horizontalLabelCollections[i].region = this_1.calculateRegion(label, textSize, x, y);\n                if (hAxis.labelIntersectAction === 'Hide') {\n                    curLabel = this_1.horizontalLabelCollections[i];\n                    curLabelBounds = curLabel.region.bounds;\n                    curWidth = curLabelBounds.width;\n                    curX = curLabelBounds.x;\n                    for (var j = 1; j < i; j++) {\n                        preLabel = this_1.horizontalLabelCollections[j];\n                        preLabelBounds = preLabel.region.bounds;\n                        preWidth = preLabelBounds.width;\n                        preX = preLabelBounds.x;\n                        if ((smithchart.renderType === 'Impedance') &&\n                            (preX + preWidth) > (curX)) {\n                            label = '';\n                        }\n                        if ((smithchart.renderType === 'Admittance') &&\n                            (preX) < curX + curWidth) {\n                            label = '';\n                        }\n                    }\n                }\n                var axisLabelRenderEventArgs_1 = {\n                    text: label.toString(),\n                    x: x,\n                    y: y,\n                    name: axisLabelRender,\n                    cancel: false\n                };\n                var axisLabelRenderSuccess = function (args) {\n                    if (!args.cancel) {\n                        var options = new TextOption(smithchart.element.id + '_HLabel_' + i, axisLabelRenderEventArgs_1.x, axisLabelRenderEventArgs_1.y, 'none', axisLabelRenderEventArgs_1.text);\n                        var color = font.color ? font.color : smithchart.themeStyle.axisLabelFont.color;\n                        font.fontFamily = font.fontFamily || smithchart.themeStyle.labelFontFamily;\n                        var element = renderTextElement(options, font, color, groupEle, smithchart.themeStyle.axisLabelFont);\n                        groupEle.appendChild(element);\n                    }\n                };\n                axisLabelRenderSuccess.bind(this_1);\n                smithchart.trigger(axisLabelRender, axisLabelRenderEventArgs_1, axisLabelRenderSuccess);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < this.horizontalLabelCollections.length; i++) {\n            _loop_1(i);\n        }\n        smithchart.svgObject.appendChild(groupEle);\n    };\n    AxisRender.prototype.drawRAxisLabels = function (smithchart) {\n        var paddingRadius = 2;\n        smithchart.radialAxis.labelStyle.fontFamily = smithchart.themeStyle.fontFamily || smithchart.radialAxis.labelStyle.fontFamily;\n        var font = smithchart.radialAxis.labelStyle;\n        var interSectPoint = new RadialLabelCollections();\n        var label;\n        var textSize;\n        var angle;\n        var position;\n        var textPosition;\n        var curX;\n        var curY;\n        var curWidth;\n        var curHeight;\n        var curLabel;\n        var curLabelBounds;\n        var preX;\n        var preY;\n        var preWidth;\n        var preHeight;\n        var preLabel;\n        var preLabelBounds;\n        var rAxis = smithchart.radialAxis;\n        var groupEle = smithchart.renderer.createGroup({ id: smithchart.element.id + '_RAxisLabels' });\n        groupEle.setAttribute('aria-hidden', 'true');\n        var _loop_2 = function (i) {\n            interSectPoint = this_2.labelCollections[i];\n            label = interSectPoint.value.toString();\n            textSize = measureText(label, font, smithchart.themeStyle.axisLabelFont);\n            angle = Math.round(interSectPoint.angle * 100) / 100;\n            if (rAxis.labelPosition === 'Outside') {\n                position = this_2.circlePointPosition(this_2.circleCenterX, this_2.circleCenterY, interSectPoint['angle'], this_2.areaRadius + paddingRadius);\n                textPosition = this_2.setLabelsOutsidePosition(angle, position.x, position.y, textSize);\n            }\n            else {\n                position = this_2.circlePointPosition(this_2.circleCenterX, this_2.circleCenterY, interSectPoint['angle'], this_2.areaRadius - paddingRadius);\n                textPosition = this_2.setLabelsInsidePosition(angle, position.x, position.y, textSize);\n            }\n            this_2.labelCollections[i]['region'] = this_2.calculateRegion(label, textSize, textPosition.x, textPosition.y);\n            if (rAxis.labelIntersectAction === 'Hide') {\n                curLabel = this_2.labelCollections[i];\n                curLabelBounds = curLabel['region']['bounds'];\n                curWidth = curLabelBounds['width'];\n                curHeight = curLabelBounds['height'];\n                curX = curLabelBounds['x'];\n                curY = curLabelBounds['y'];\n                for (var j = 0; j < i; j++) {\n                    preLabel = this_2.labelCollections[j];\n                    preLabelBounds = preLabel['region']['bounds'];\n                    preWidth = preLabelBounds['width'];\n                    preHeight = preLabelBounds['height'];\n                    preX = preLabelBounds['x'];\n                    preY = preLabelBounds['y'];\n                    if ((preX <= curX + curWidth) && (curX <= preX + preWidth) && (preY <= curY + curHeight)\n                        && (curY <= preY + preHeight)) {\n                        label = ' ';\n                    }\n                }\n            }\n            var axisLabelRenderEventArgs = {\n                text: label.toString(),\n                x: textPosition.x,\n                y: textPosition.y,\n                name: axisLabelRender,\n                cancel: false\n            };\n            var axisLabelRenderSuccess = function (args) {\n                if (!args.cancel) {\n                    var options = new TextOption(smithchart.element.id + '_RLabel_' + i, axisLabelRenderEventArgs.x, axisLabelRenderEventArgs.y, 'none', axisLabelRenderEventArgs.text);\n                    var color = font.color ? font.color : smithchart.themeStyle.axisLabelFont.color;\n                    font.fontFamily = smithchart.themeStyle.labelFontFamily ? smithchart.themeStyle.labelFontFamily : font.fontFamily;\n                    var element = renderTextElement(options, font, color, groupEle, smithchart.themeStyle.axisLabelFont);\n                    groupEle.appendChild(element);\n                }\n            };\n            axisLabelRenderSuccess.bind(this_2);\n            smithchart.trigger(axisLabelRender, axisLabelRenderEventArgs, axisLabelRenderSuccess);\n        };\n        var this_2 = this;\n        for (var i = 0; i < this.labelCollections.length; i++) {\n            _loop_2(i);\n        }\n        smithchart.svgObject.appendChild(groupEle);\n    };\n    AxisRender.prototype.calculateRegion = function (label, textSize, textPositionX, textPositionY) {\n        var xAxisLabelRegions = new LabelRegion();\n        var bounds = { x: textPositionX, y: textPositionY, width: textSize.width, height: textSize.height };\n        xAxisLabelRegions = { bounds: bounds, labelText: label };\n        return xAxisLabelRegions;\n    };\n    AxisRender.prototype.updateHMinorGridLines = function (smithchart) {\n        var minorGridLine = smithchart.horizontalAxis.minorGridLines;\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_horizontalAxisMinorGridLines' });\n        var path = this.calculateGridLinesPath(this.minorHGridArcPoints);\n        var haxismioptions = new PathOption(smithchart.element.id + '_horizontalAxisMinorGridLines', 'none', minorGridLine['width'], minorGridLine.color ? minorGridLine.color : smithchart.themeStyle.minorGridLine, minorGridLine['opacity'], minorGridLine['dashArray'], path);\n        var element = smithchart.renderer.drawPath(haxismioptions);\n        groupElement.appendChild(element);\n        smithchart.svgObject.appendChild(groupElement);\n    };\n    AxisRender.prototype.updateRMinorGridLines = function (smithchart) {\n        var minorGridLine = smithchart.radialAxis.minorGridLines;\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_radialAxisMinorGridLines' });\n        var path = this.calculateGridLinesPath(this.minorGridArcPoints);\n        var raxismioptions = new PathOption(smithchart.element.id + '_radialAxisMinorGridLines', 'none', minorGridLine['width'], minorGridLine.color ? minorGridLine.color : smithchart.themeStyle.minorGridLine, minorGridLine['opacity'], minorGridLine['dashArray'], path);\n        var element = smithchart.renderer.drawPath(raxismioptions);\n        groupElement.appendChild(element);\n        smithchart.svgObject.appendChild(groupElement);\n    };\n    AxisRender.prototype.calculateGridLinesPath = function (points) {\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        var r1;\n        var r2;\n        var pathSegment = new GridArcPoints();\n        var angle;\n        var isLargeArc;\n        var sweep;\n        var sb = '';\n        for (var i = 0; i < points.length; i++) {\n            pathSegment = points[i];\n            x1 = pathSegment.startPoint.x;\n            y1 = pathSegment.startPoint.y;\n            x2 = pathSegment.endPoint.x;\n            y2 = pathSegment.endPoint.y;\n            r1 = pathSegment.size ? pathSegment.size.width : 0;\n            r2 = pathSegment.size ? pathSegment.size.height : 0;\n            angle = pathSegment.rotationAngle ? pathSegment.rotationAngle : 0;\n            isLargeArc = pathSegment.isLargeArc ? 1 : 0;\n            sweep = pathSegment.sweepDirection ? pathSegment.sweepDirection : 0;\n            sb = sb + ('M' + ' ' + x1 + ' ' + y1 + ' ' + 'A' + ' ' + r1 + ' ' + r2 + ' ' +\n                angle + ' ' + isLargeArc + ' ' + sweep + ' ' + x2 + ' ' + y2 + ' ');\n        }\n        var path = sb.toString();\n        return path;\n    };\n    AxisRender.prototype.measureHMinorGridLines = function (smithchart) {\n        var radialPoint1;\n        var radialPoint2;\n        var arcPoints = [];\n        var isLargeArc;\n        var startPoint;\n        var endPoint;\n        var size;\n        var cx;\n        var maxCount = smithchart.horizontalAxis.minorGridLines.count;\n        var previous;\n        var next;\n        var space;\n        var count;\n        var interval;\n        var radius;\n        var leftX;\n        this.minorHGridArcPoints = [];\n        var diameter = this.areaRadius * 2;\n        for (var i = 0; i < this.horizontalLabelCollections.length - 3; i++) {\n            previous = this.horizontalLabelCollections[i];\n            next = this.horizontalLabelCollections[i + 1];\n            space = (previous['radius'] - next['radius']) * 2;\n            count = Math.floor((maxCount / 100) * space);\n            interval = space / count;\n            for (var j = 0; j < count; j++) {\n                radius = next['radius'] + (j * interval) / 2;\n                leftX = (smithchart.renderType === 'Impedance') ?\n                    (this.circleLeftX + diameter) - (radius * 2) : this.circleLeftX;\n                cx = leftX + radius;\n                isLargeArc = next['value'] > 5;\n                arcPoints = this.calculateMinorArcStartEndPoints(next['value']);\n                if (smithchart.renderType === 'Impedance') {\n                    radialPoint1 = arcPoints[0];\n                    radialPoint2 = arcPoints[1];\n                }\n                else {\n                    radialPoint1 = arcPoints[1];\n                    radialPoint2 = arcPoints[0];\n                }\n                startPoint = this.intersectingCirclePoints(radialPoint1[0].centerX, radialPoint1[0].centerY, radialPoint1[0].radius, cx, previous['centerY'], radius, smithchart.renderType);\n                endPoint = this.intersectingCirclePoints(radialPoint2[0].centerX, radialPoint2[0].centerY, radialPoint2[0].radius, cx, previous['centerY'], radius, smithchart.renderType);\n                size = { width: radius, height: radius };\n                this.minorHGridArcPoints.push({\n                    startPoint: startPoint,\n                    endPoint: endPoint,\n                    rotationAngle: 2 * Math.PI,\n                    sweepDirection: (smithchart.renderType === 'Impedance') ?\n                        this.direction['counterclockwise'] : this.direction['clockwise'],\n                    isLargeArc: isLargeArc,\n                    size: size\n                });\n            }\n        }\n    };\n    AxisRender.prototype.measureRMinorGridLines = function (smithchart) {\n        var maxCount = smithchart.radialAxis.minorGridLines.count;\n        var arcCx;\n        var nextAngle;\n        // let k: number = 0;\n        var betweenAngle;\n        var circlePoint;\n        var previous;\n        var next;\n        var size;\n        var distance;\n        var count;\n        var interval;\n        var centerValue;\n        var circumference = Math.PI * (this.areaRadius * 2);\n        var arcStartX = arcCx = (smithchart.renderType === 'Impedance') ?\n            this.circleCenterX + this.areaRadius : this.circleCenterX - this.areaRadius;\n        var arcStartY = this.circleCenterY;\n        this.minorGridArcPoints = [];\n        var arcStartPoint = { x: arcStartX, y: arcStartY };\n        for (var i = 2; i < this.labelCollections.length - 3; i++) {\n            previous = this.labelCollections[i];\n            next = this.labelCollections[i + 1];\n            if (smithchart.renderType === 'Impedance') {\n                nextAngle = next['angle'] === 360 ? 0 : next['angle'];\n                betweenAngle = Math.abs(nextAngle - previous['angle']);\n            }\n            else {\n                nextAngle = previous['angle'] === 360 ? 0 : previous['angle'];\n                betweenAngle = Math.abs(nextAngle - next['angle']);\n            }\n            distance = (circumference / 360) * betweenAngle;\n            count = Math.floor((maxCount / 100) * distance);\n            interval = betweenAngle / count;\n            centerValue = next['value'] > 0 ? next['value'] : previous['value'];\n            circlePoint = this.minorGridLineArcIntersectCircle(Math.abs(centerValue));\n            for (var j = 1; j < count; j++) {\n                var outterInterSectAngle = (interval * j) + (previous['angle'] === 360 ? nextAngle : previous['angle']);\n                var outerInterSectPoint = this.circlePointPosition(this.circleCenterX, this.circleCenterY, outterInterSectAngle, this.areaRadius);\n                var radius = this.arcRadius(arcStartPoint, outerInterSectPoint, outterInterSectAngle);\n                var arcCy = outterInterSectAngle > 180 ? this.circleCenterY - radius : this.circleCenterY + radius;\n                var innerInterSectPoint = this.intersectingCirclePoints(arcCx, arcCy, radius, circlePoint[0].centerX, circlePoint[0].centerY, circlePoint[0].radius, smithchart.renderType);\n                var startPoint = { x: innerInterSectPoint.x, y: innerInterSectPoint.y };\n                var endPoint = { x: outerInterSectPoint.x, y: outerInterSectPoint.y };\n                size = { width: radius, height: radius };\n                var sweepDirection = previous['value'] >= 0 ? this.direction['clockwise'] : this.direction['counterclockwise'];\n                this.minorGridArcPoints.push({\n                    startPoint: startPoint,\n                    endPoint: endPoint,\n                    rotationAngle: 2 * Math.PI,\n                    sweepDirection: sweepDirection,\n                    isLargeArc: false,\n                    size: size\n                });\n                // k++;\n            }\n        }\n    };\n    AxisRender.prototype.minorGridLineArcIntersectCircle = function (centerValue) {\n        var calValue;\n        if (centerValue >= 3) {\n            calValue = 20;\n        }\n        else if (centerValue >= 1.5) {\n            calValue = 10;\n        }\n        else if (centerValue >= 0.6) {\n            calValue = 3;\n        }\n        else {\n            calValue = 2;\n        }\n        var circlePoint = this.horizontalLabelCollections.filter(function (c) { return c['value'] === calValue; });\n        return circlePoint;\n    };\n    AxisRender.prototype.circlePointPosition = function (cx, cy, angle, r) {\n        var radian = angle * (Math.PI / 180);\n        var pointX = cx + r * Math.cos(radian);\n        var pointY = cy + r * Math.sin(radian);\n        return { x: pointX, y: pointY };\n    };\n    AxisRender.prototype.setLabelsInsidePosition = function (angle, px, py, textSize) {\n        var x = px;\n        var y = py;\n        if (angle === 0 || angle === 360) {\n            x -= textSize.width;\n            y -= textSize.height / 2;\n        }\n        else if (angle === 90) {\n            x -= textSize.width;\n            y += textSize.height / 8;\n        }\n        else if (angle === 180) {\n            y += textSize.height;\n        }\n        else if (angle === 270) {\n            y += textSize.height / 2;\n        }\n        else if (angle > 0 && angle <= 20) {\n            x -= (textSize.width);\n        }\n        else if (angle > 20 && angle <= 60) {\n            x -= (textSize.width + textSize.width / 2);\n            y += textSize.height / 2;\n        }\n        else if (angle > 60 && angle < 90) {\n            x -= (textSize.width + textSize.width / 4);\n            y += textSize.height / 4;\n        }\n        else if (angle > 90 && angle <= 135) {\n            x -= (textSize.width / 2);\n            y += (textSize.height) / 16;\n        }\n        else if (angle > 135 && angle <= 150) {\n            x += (textSize.width / 2);\n            y += (textSize.height / 2);\n        }\n        else if (angle > 150 && angle < 180) {\n            x += (textSize.width / 2);\n            y += (textSize.height);\n        }\n        else if (angle > 180 && angle <= 210) {\n            x += (textSize.width / 6);\n            y += (textSize.height / 6);\n        }\n        else if (angle > 210 && angle < 240) {\n            y += (textSize.height / 4);\n        }\n        else if (angle > 225 && angle < 270) {\n            y += (textSize.height / 3);\n        }\n        else if (angle > 270 && angle <= 300) {\n            x -= (textSize.width + textSize.width / 4);\n            y += (textSize.height / 4);\n        }\n        else if (angle > 300 && angle <= 330) {\n            x -= (textSize.width + textSize.width / 3);\n            y += (textSize.height / 4);\n        }\n        else if (angle > 330 && angle <= 340) {\n            x -= (textSize.width + textSize.width / 2);\n            y += textSize.height / 4;\n        }\n        else if (angle > 340) {\n            x -= textSize.width;\n            y += textSize.height / 8;\n        }\n        return { x: x, y: y };\n    };\n    AxisRender.prototype.setLabelsOutsidePosition = function (angle, px, py, textSize) {\n        var x = px;\n        var y = py;\n        if (angle === 90) {\n            x -= textSize.width / 2;\n            y += textSize.height;\n        }\n        else if (angle === 180) {\n            x -= (textSize.width + 5);\n            y -= textSize.height / 4;\n        }\n        else if (angle === 270) {\n            x -= textSize.width / 2;\n            y -= textSize.height / 4;\n        }\n        else if (angle === 360) {\n            x += 5;\n            y -= textSize.height / 2;\n        }\n        else if (angle > 0 && angle <= 30) {\n            x += textSize.width / 4;\n            y += textSize.height / 8;\n        }\n        else if (angle > 30 && angle <= 60) {\n            x += textSize.width / 2;\n            y += textSize.height / 4;\n        }\n        else if (angle > 60 && angle <= 90) {\n            x -= textSize.width / 2;\n            y += textSize.height;\n        }\n        else if (angle > 90 && angle <= 135) {\n            x -= textSize.width;\n            y += textSize.height;\n        }\n        else if (angle > 135 && angle <= 180) {\n            x -= (textSize.width + textSize.width / 4);\n            y += textSize.height / 4;\n        }\n        else if (angle > 180 && angle <= 210) {\n            x -= textSize.width + textSize.width / 4;\n            y -= textSize.height / 4;\n        }\n        else if (angle > 210 && angle <= 270) {\n            x -= textSize.width;\n            y -= textSize.height / 4;\n        }\n        else if (angle > 270 && angle <= 340) {\n            y -= textSize.height / 4;\n        }\n        else if (angle > 340) {\n            y += textSize.height / 4;\n            x += textSize.width / 6;\n        }\n        return { x: x, y: y };\n    };\n    AxisRender.prototype.arcRadius = function (startPoint, endPoint, angle) {\n        var radian = angle > 180 ? (90 * Math.PI / 180) : (270 * Math.PI / 180); // Angle 90 and 270 used for calculating upper and lower circle\n        var mx = (endPoint.x - startPoint.x) / 2;\n        var my = (endPoint.y - startPoint.y) / 2;\n        var u = (Math.cos(radian) * my - Math.sin(radian) * mx) / (Math.cos(radian) * mx + Math.sin(radian) * my);\n        var t = (my - mx * u) / Math.sin(radian);\n        var cy = startPoint.y + Math.sin(radian) * t;\n        var radius = Math.abs(startPoint.y - cy);\n        return radius;\n    };\n    return AxisRender;\n}());\nexport { AxisRender };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}