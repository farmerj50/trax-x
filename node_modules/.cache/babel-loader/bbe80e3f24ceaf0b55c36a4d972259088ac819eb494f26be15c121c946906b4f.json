{"ast":null,"code":"import { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { first, functor, getAxisCanvas, GenericChartComponent, last, noop } from \"@react-financial-charts/core\";\nimport { drawOnCanvas } from \"./EdgeCoordinateV3\";\nexport class EdgeIndicator extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const edge = this.helper(this.props, moreProps);\n      if (edge === undefined) {\n        return;\n      }\n      const props = Object.assign(Object.assign({}, this.props), edge);\n      drawOnCanvas(ctx, props);\n    };\n    this.helper = (props, moreProps) => {\n      const {\n        itemType,\n        yAccessor\n      } = props;\n      const {\n        plotData\n      } = moreProps;\n      const item = itemType === \"first\" ? first(plotData, yAccessor) : last(plotData, yAccessor);\n      const edge = item !== undefined ? this.getEdge(moreProps, item) : undefined;\n      return edge;\n    };\n    this.getEdge = (moreProps, item) => {\n      const {\n        fontFamily,\n        fontSize,\n        type: edgeType,\n        displayFormat = EdgeIndicator.defaultProps.displayFormat,\n        edgeAt,\n        yAxisPad = EdgeIndicator.defaultProps.yAxisPad,\n        orient,\n        lineStroke,\n        yAccessor,\n        fill,\n        fullWidth,\n        textFill,\n        rectHeight,\n        rectWidth,\n        arrowWidth,\n        stroke\n      } = this.props;\n      const {\n        xScale,\n        chartConfig: {\n          yScale\n        },\n        xAccessor,\n        width\n      } = moreProps;\n      const yValue = yAccessor(item);\n      if (yValue === undefined) {\n        return undefined;\n      }\n      const xValue = xAccessor(item);\n      const x1 = fullWidth ? 0 : Math.round(xScale(xValue));\n      const y1 = Math.round(yScale(yValue));\n      const [left, right] = [0, width];\n      const edgeX = edgeAt === \"left\" ? left - yAxisPad : right + yAxisPad;\n      return {\n        coordinate: displayFormat(yValue),\n        show: true,\n        type: edgeType,\n        orient,\n        edgeAt: edgeX,\n        fill: functor(fill)(item),\n        lineStroke: functor(lineStroke)(item),\n        stroke: functor(stroke)(item),\n        fontFamily,\n        fontSize,\n        textFill: functor(textFill)(item),\n        rectHeight,\n        rectWidth,\n        arrowWidth,\n        x1,\n        y1,\n        x2: right,\n        y2: y1\n      };\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      edgeClip: true,\n      clip: false,\n      canvasDraw: this.drawOnCanvas,\n      canvasToDraw: getAxisCanvas,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nEdgeIndicator.defaultProps = {\n  fitToText: false,\n  lineStroke: \"#000000\",\n  lineOpacity: 1,\n  lineStrokeDasharray: \"ShortDot\",\n  orient: \"right\",\n  displayFormat: format(\".2f\"),\n  edgeAt: \"right\",\n  yAxisPad: 0,\n  rectHeight: 20,\n  rectWidth: 50,\n  arrowWidth: 0,\n  fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n  fontSize: 13,\n  dx: 0,\n  hideLine: false,\n  fill: \"#8a8a8a\",\n  opacity: 1,\n  stroke: noop,\n  strokeOpacity: 1,\n  strokeWidth: 1,\n  textFill: \"#FFFFFF\",\n  type: \"horizontal\"\n};","map":{"version":3,"names":["format","React","first","functor","getAxisCanvas","GenericChartComponent","last","noop","drawOnCanvas","EdgeIndicator","Component","constructor","ctx","moreProps","edge","helper","props","undefined","Object","assign","itemType","yAccessor","plotData","item","getEdge","fontFamily","fontSize","type","edgeType","displayFormat","defaultProps","edgeAt","yAxisPad","orient","lineStroke","fill","fullWidth","textFill","rectHeight","rectWidth","arrowWidth","stroke","xScale","chartConfig","yScale","xAccessor","width","yValue","xValue","x1","Math","round","y1","left","right","edgeX","coordinate","show","x2","y2","render","createElement","edgeClip","clip","canvasDraw","canvasToDraw","drawOn","fitToText","lineOpacity","lineStrokeDasharray","dx","hideLine","opacity","strokeOpacity","strokeWidth"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\coordinates\\src\\EdgeIndicator.tsx"],"sourcesContent":["import { format } from \"d3-format\";\nimport * as React from \"react\";\nimport {\n    first,\n    functor,\n    getAxisCanvas,\n    GenericChartComponent,\n    last,\n    noop,\n    strokeDashTypes,\n} from \"@react-financial-charts/core\";\nimport { drawOnCanvas } from \"./EdgeCoordinateV3\";\n\nexport interface EdgeIndicatorProps {\n    readonly arrowWidth?: number;\n    readonly displayFormat?: (n: number) => string;\n    readonly edgeAt?: \"left\" | \"right\";\n    readonly fill?: string | ((datum: any) => string);\n    readonly fitToText?: boolean;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fullWidth?: boolean;\n    readonly itemType: \"first\" | \"last\";\n    readonly lineStroke?: string | ((datum: any) => string);\n    readonly lineStrokeDasharray?: strokeDashTypes;\n    readonly orient?: \"left\" | \"right\";\n    readonly rectHeight?: number;\n    readonly rectWidth?: number;\n    readonly stroke?: string | ((datum: any) => string);\n    readonly textFill?: string | ((datum: any) => string);\n    readonly type?: \"horizontal\";\n    readonly yAccessor: (data: any) => number | undefined;\n    readonly yAxisPad?: number;\n}\n\nexport class EdgeIndicator extends React.Component<EdgeIndicatorProps> {\n    public static defaultProps = {\n        fitToText: false,\n        lineStroke: \"#000000\",\n        lineOpacity: 1,\n        lineStrokeDasharray: \"ShortDot\",\n        orient: \"right\",\n        displayFormat: format(\".2f\"),\n        edgeAt: \"right\",\n        yAxisPad: 0,\n        rectHeight: 20,\n        rectWidth: 50,\n        arrowWidth: 0,\n        fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n        fontSize: 13,\n        dx: 0,\n        hideLine: false,\n        fill: \"#8a8a8a\",\n        opacity: 1,\n        stroke: noop,\n        strokeOpacity: 1,\n        strokeWidth: 1,\n        textFill: \"#FFFFFF\",\n        type: \"horizontal\",\n    };\n\n    public render() {\n        return (\n            <GenericChartComponent\n                edgeClip\n                clip={false}\n                canvasDraw={this.drawOnCanvas}\n                canvasToDraw={getAxisCanvas}\n                drawOn={[\"pan\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const edge = this.helper(this.props, moreProps);\n        if (edge === undefined) {\n            return;\n        }\n\n        const props = {\n            ...this.props,\n            ...edge,\n        };\n\n        drawOnCanvas(ctx, props);\n    };\n\n    private readonly helper = (props: EdgeIndicatorProps, moreProps: any) => {\n        const { itemType, yAccessor } = props;\n\n        const { plotData } = moreProps;\n\n        const item = itemType === \"first\" ? first(plotData, yAccessor) : last(plotData, yAccessor);\n\n        const edge = item !== undefined ? this.getEdge(moreProps, item) : undefined;\n\n        return edge;\n    };\n\n    private readonly getEdge = (moreProps: any, item: any) => {\n        const {\n            fontFamily,\n            fontSize,\n            type: edgeType,\n            displayFormat = EdgeIndicator.defaultProps.displayFormat,\n            edgeAt,\n            yAxisPad = EdgeIndicator.defaultProps.yAxisPad,\n            orient,\n            lineStroke,\n            yAccessor,\n            fill,\n            fullWidth,\n            textFill,\n            rectHeight,\n            rectWidth,\n            arrowWidth,\n            stroke,\n        } = this.props;\n\n        const {\n            xScale,\n            chartConfig: { yScale },\n            xAccessor,\n            width,\n        } = moreProps;\n\n        const yValue = yAccessor(item);\n        if (yValue === undefined) {\n            return undefined;\n        }\n\n        const xValue = xAccessor(item);\n\n        const x1 = fullWidth ? 0 : Math.round(xScale(xValue));\n        const y1 = Math.round(yScale(yValue));\n\n        const [left, right] = [0, width];\n        const edgeX = edgeAt === \"left\" ? left - yAxisPad : right + yAxisPad;\n\n        return {\n            coordinate: displayFormat(yValue),\n            show: true,\n            type: edgeType,\n            orient,\n            edgeAt: edgeX,\n            fill: functor(fill)(item),\n            lineStroke: functor(lineStroke)(item),\n            stroke: functor(stroke)(item),\n            fontFamily,\n            fontSize,\n            textFill: functor(textFill)(item),\n            rectHeight,\n            rectWidth,\n            arrowWidth,\n            x1,\n            y1,\n            x2: right,\n            y2: y1,\n        };\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}