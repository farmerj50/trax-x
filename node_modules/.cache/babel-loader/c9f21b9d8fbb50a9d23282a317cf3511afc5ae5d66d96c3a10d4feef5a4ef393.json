{"ast":null,"code":"import { functor, GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\nconst displayTextsDefault = {\n  o: \"O: \",\n  h: \" H: \",\n  l: \" L: \",\n  c: \" C: \",\n  na: \"n/a\"\n};\nexport class OHLCTooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.renderSVG = moreProps => {\n      var _a;\n      const {\n        accessor,\n        changeFormat = OHLCTooltip.defaultProps.changeFormat,\n        className,\n        displayTexts = OHLCTooltip.defaultProps.displayTexts,\n        displayValuesFor = OHLCTooltip.defaultProps.displayValuesFor,\n        fontFamily,\n        fontSize,\n        fontWeight,\n        labelFill,\n        labelFontWeight,\n        ohlcFormat = OHLCTooltip.defaultProps.ohlcFormat,\n        onClick,\n        percentFormat = OHLCTooltip.defaultProps.percentFormat,\n        textFill\n      } = this.props;\n      const {\n        chartConfig: {\n          width,\n          height\n        },\n        fullData\n      } = moreProps;\n      const currentItem = (_a = displayValuesFor(this.props, moreProps)) !== null && _a !== void 0 ? _a : last(fullData);\n      let open = displayTexts.na;\n      let high = displayTexts.na;\n      let low = displayTexts.na;\n      let close = displayTexts.na;\n      let change = displayTexts.na;\n      if (currentItem !== undefined && accessor !== undefined) {\n        const item = accessor(currentItem);\n        if (item !== undefined) {\n          open = ohlcFormat(item.open);\n          high = ohlcFormat(item.high);\n          low = ohlcFormat(item.low);\n          close = ohlcFormat(item.close);\n          change = `${changeFormat(item.close - item.open)} (${percentFormat((item.close - item.open) / item.open)})`;\n        }\n      }\n      const {\n        origin: originProp\n      } = this.props;\n      const [x, y] = functor(originProp)(width, height);\n      const valueFill = functor(textFill)(currentItem);\n      return React.createElement(\"g\", {\n        className: className,\n        transform: `translate(${x}, ${y})`,\n        onClick: onClick\n      }, React.createElement(ToolTipText, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }, React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight,\n        key: \"label_O\"\n      }, displayTexts.o), React.createElement(\"tspan\", {\n        key: \"value_O\",\n        fill: valueFill\n      }, open), React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight,\n        key: \"label_H\"\n      }, displayTexts.h), React.createElement(\"tspan\", {\n        key: \"value_H\",\n        fill: valueFill\n      }, high), React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight,\n        key: \"label_L\"\n      }, displayTexts.l), React.createElement(\"tspan\", {\n        key: \"value_L\",\n        fill: valueFill\n      }, low), React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight,\n        key: \"label_C\"\n      }, displayTexts.c), React.createElement(\"tspan\", {\n        key: \"value_C\",\n        fill: valueFill\n      }, close), React.createElement(\"tspan\", {\n        key: \"value_Change\",\n        fill: valueFill\n      }, ` ${change}`)));\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      svgDraw: this.renderSVG,\n      drawOn: [\"mousemove\"]\n    });\n  }\n}\nOHLCTooltip.defaultProps = {\n  accessor: d => d,\n  changeFormat: format(\"+.2f\"),\n  className: \"react-financial-charts-tooltip-hover\",\n  displayTexts: displayTextsDefault,\n  displayValuesFor: (_, props) => props.currentItem,\n  fontFamily: \"-apple-system, system-ui, 'Helvetica Neue', Ubuntu, sans-serif\",\n  ohlcFormat: format(\".2f\"),\n  origin: [0, 0],\n  percentFormat: format(\"+.2%\")\n};","map":{"version":3,"names":["functor","GenericChartComponent","last","format","React","ToolTipText","ToolTipTSpanLabel","displayTextsDefault","o","h","l","c","na","OHLCTooltip","Component","constructor","renderSVG","moreProps","accessor","changeFormat","defaultProps","className","displayTexts","displayValuesFor","fontFamily","fontSize","fontWeight","labelFill","labelFontWeight","ohlcFormat","onClick","percentFormat","textFill","props","chartConfig","width","height","fullData","currentItem","_a","open","high","low","close","change","undefined","item","origin","originProp","x","y","valueFill","createElement","transform","fill","key","render","clip","svgDraw","drawOn","d","_"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\OHLCTooltip.tsx"],"sourcesContent":["import { functor, GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\n\nconst displayTextsDefault = {\n    o: \"O: \",\n    h: \" H: \",\n    l: \" L: \",\n    c: \" C: \",\n    na: \"n/a\",\n};\n\nexport interface OHLCTooltipProps {\n    readonly accessor?: (data: any) => any;\n    readonly className?: string;\n    readonly changeFormat?: (n: number | { valueOf(): number }) => string;\n    readonly displayTexts?: {\n        o: string;\n        h: string;\n        l: string;\n        c: string;\n        na: string;\n    };\n    readonly displayValuesFor?: (props: OHLCTooltipProps, moreProps: any) => any;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly labelFill?: string;\n    readonly labelFontWeight?: number;\n    readonly ohlcFormat?: (n: number | { valueOf(): number }) => string;\n    readonly onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n    readonly origin?: [number, number] | ((width: number, height: number) => [number, number]);\n    readonly percentFormat?: (n: number | { valueOf(): number }) => string;\n    readonly textFill?: string | ((item: any) => string);\n}\n\nexport class OHLCTooltip extends React.Component<OHLCTooltipProps> {\n    public static defaultProps = {\n        accessor: (d: unknown) => d,\n        changeFormat: format(\"+.2f\"),\n        className: \"react-financial-charts-tooltip-hover\",\n        displayTexts: displayTextsDefault,\n        displayValuesFor: (_: any, props: any) => props.currentItem,\n        fontFamily: \"-apple-system, system-ui, 'Helvetica Neue', Ubuntu, sans-serif\",\n        ohlcFormat: format(\".2f\"),\n        origin: [0, 0],\n        percentFormat: format(\"+.2%\"),\n    };\n\n    public render() {\n        return <GenericChartComponent clip={false} svgDraw={this.renderSVG} drawOn={[\"mousemove\"]} />;\n    }\n\n    private readonly renderSVG = (moreProps: any) => {\n        const {\n            accessor,\n            changeFormat = OHLCTooltip.defaultProps.changeFormat,\n            className,\n            displayTexts = OHLCTooltip.defaultProps.displayTexts,\n            displayValuesFor = OHLCTooltip.defaultProps.displayValuesFor,\n            fontFamily,\n            fontSize,\n            fontWeight,\n            labelFill,\n            labelFontWeight,\n            ohlcFormat = OHLCTooltip.defaultProps.ohlcFormat,\n            onClick,\n            percentFormat = OHLCTooltip.defaultProps.percentFormat,\n            textFill,\n        } = this.props;\n\n        const {\n            chartConfig: { width, height },\n            fullData,\n        } = moreProps;\n\n        const currentItem = displayValuesFor(this.props, moreProps) ?? last(fullData);\n\n        let open: string = displayTexts.na;\n        let high: string = displayTexts.na;\n        let low: string = displayTexts.na;\n        let close: string = displayTexts.na;\n        let change: string = displayTexts.na;\n\n        if (currentItem !== undefined && accessor !== undefined) {\n            const item = accessor(currentItem);\n            if (item !== undefined) {\n                open = ohlcFormat(item.open);\n                high = ohlcFormat(item.high);\n                low = ohlcFormat(item.low);\n                close = ohlcFormat(item.close);\n                change = `${changeFormat(item.close - item.open)} (${percentFormat(\n                    (item.close - item.open) / item.open,\n                )})`;\n            }\n        }\n\n        const { origin: originProp } = this.props;\n        const [x, y] = functor(originProp)(width, height);\n        const valueFill = functor(textFill)(currentItem);\n\n        return (\n            <g className={className} transform={`translate(${x}, ${y})`} onClick={onClick}>\n                <ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight} key=\"label_O\">\n                        {displayTexts.o}\n                    </ToolTipTSpanLabel>\n                    <tspan key=\"value_O\" fill={valueFill}>\n                        {open}\n                    </tspan>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight} key=\"label_H\">\n                        {displayTexts.h}\n                    </ToolTipTSpanLabel>\n                    <tspan key=\"value_H\" fill={valueFill}>\n                        {high}\n                    </tspan>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight} key=\"label_L\">\n                        {displayTexts.l}\n                    </ToolTipTSpanLabel>\n                    <tspan key=\"value_L\" fill={valueFill}>\n                        {low}\n                    </tspan>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight} key=\"label_C\">\n                        {displayTexts.c}\n                    </ToolTipTSpanLabel>\n                    <tspan key=\"value_C\" fill={valueFill}>\n                        {close}\n                    </tspan>\n                    <tspan key=\"value_Change\" fill={valueFill}>\n                        {` ${change}`}\n                    </tspan>\n                </ToolTipText>\n            </g>\n        );\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}