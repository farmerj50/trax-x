{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\CandlestickChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport \"./CandlestickChart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandlestickChart = ({\n  ticker,\n  entryPoint,\n  exitPoint,\n  additionalData\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null); // Reference to the chart\n  const candlestickSeriesRef = useRef(null); // Reference to the candlestick series\n  const currentPriceLineRef = useRef(null); // Reference to the current price line\n\n  useEffect(() => {\n    // Initialize the chart\n    chartRef.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth || 700,\n      height: 400,\n      layout: {\n        backgroundColor: \"#ffffff\",\n        textColor: \"#000000\"\n      },\n      grid: {\n        vertLines: {\n          color: \"#eeeeee\"\n        },\n        horzLines: {\n          color: \"#eeeeee\"\n        }\n      },\n      priceScale: {\n        borderColor: \"#cccccc\"\n      },\n      timeScale: {\n        borderColor: \"#cccccc\"\n      }\n    });\n\n    // Add candlestick series\n    candlestickSeriesRef.current = chartRef.current.addCandlestickSeries();\n\n    // Fetch initial data\n    const fetchInitialData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\n        const data = await response.json();\n        if (data.dates && data.open && data.high && data.low && data.close) {\n          const formattedData = data.dates.map((date, index) => ({\n            time: date,\n            open: data.open[index],\n            high: data.high[index],\n            low: data.low[index],\n            close: data.close[index]\n          }));\n          candlestickSeriesRef.current.setData(formattedData);\n\n          // Get the current price and dynamically set the color\n          const currentPrice = formattedData[formattedData.length - 1].close;\n          const currentPriceColor = currentPrice > entryPoint ? \"green\" : \"red\";\n\n          // Create the current price line and store a reference\n          currentPriceLineRef.current = candlestickSeriesRef.current.createPriceLine({\n            price: currentPrice,\n            color: currentPriceColor,\n            lineWidth: 2,\n            lineStyle: 0,\n            axisLabelVisible: true,\n            title: `Current: ${currentPrice.toFixed(2)}`\n          });\n\n          // Add entry price line\n          candlestickSeriesRef.current.createPriceLine({\n            price: entryPoint,\n            color: \"green\",\n            lineWidth: 1,\n            lineStyle: 2,\n            axisLabelVisible: true,\n            title: `Entry: ${entryPoint.toFixed(2)}`\n          });\n\n          // Add exit price line\n          candlestickSeriesRef.current.createPriceLine({\n            price: exitPoint,\n            color: \"red\",\n            lineWidth: 1,\n            lineStyle: 2,\n            axisLabelVisible: true,\n            title: `Exit: ${exitPoint.toFixed(2)}`\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching initial data:\", error);\n      }\n    };\n    fetchInitialData();\n\n    // Real-time updates\n    const updateChart = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\n        const data = await response.json();\n        if (data.dates && data.open && data.high && data.low && data.close) {\n          const latestData = {\n            time: data.dates[data.dates.length - 1],\n            open: data.open[data.open.length - 1],\n            high: data.high[data.high.length - 1],\n            low: data.low[data.low.length - 1],\n            close: data.close[data.close.length - 1]\n          };\n          if (candlestickSeriesRef.current) {\n            candlestickSeriesRef.current.update(latestData);\n\n            // Update the current price line dynamically\n            const currentPrice = latestData.close;\n            const currentPriceColor = currentPrice > entryPoint ? \"green\" : \"red\";\n            if (currentPriceLineRef.current) {\n              currentPriceLineRef.current.applyOptions({\n                price: currentPrice,\n                color: currentPriceColor,\n                title: `Current: ${currentPrice.toFixed(2)}`\n              });\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"Error updating chart:\", error);\n      }\n    };\n    const intervalId = setInterval(updateChart, 5000); // Fetch new data every 5 seconds\n\n    // Resize the chart on window resize\n    const handleResize = () => {\n      if (chartRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      clearInterval(intervalId); // Clear interval on unmount\n      window.removeEventListener(\"resize\", handleResize);\n\n      // Dispose of the chart and series to avoid errors\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n      }\n      candlestickSeriesRef.current = null;\n      currentPriceLineRef.current = null;\n    };\n  }, [ticker, entryPoint, exitPoint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: ticker\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartContainerRef,\n      className: \"chart-wrapper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: additionalData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Entry Point:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), \" $\", entryPoint.toFixed(2), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 66\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Exit Point:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), \" $\", exitPoint.toFixed(2), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 64\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Current Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), \" Displayed on chart\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(CandlestickChart, \"I+tnW2/joK/pIurg4AWbAntPKtY=\");\n_c = CandlestickChart;\nexport default CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","CandlestickChart","ticker","entryPoint","exitPoint","additionalData","_s","chartContainerRef","chartRef","candlestickSeriesRef","currentPriceLineRef","current","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","borderColor","timeScale","addCandlestickSeries","fetchInitialData","response","fetch","data","json","dates","open","high","low","close","formattedData","map","date","index","time","setData","currentPrice","length","currentPriceColor","createPriceLine","price","lineWidth","lineStyle","axisLabelVisible","title","toFixed","error","console","updateChart","latestData","update","applyOptions","intervalId","setInterval","handleResize","window","addEventListener","clearInterval","removeEventListener","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/CandlestickChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { createChart } from \"lightweight-charts\";\r\nimport \"./CandlestickChart.css\";\r\n\r\nconst CandlestickChart = ({ ticker, entryPoint, exitPoint, additionalData }) => {\r\n  const chartContainerRef = useRef(null);\r\n  const chartRef = useRef(null); // Reference to the chart\r\n  const candlestickSeriesRef = useRef(null); // Reference to the candlestick series\r\n  const currentPriceLineRef = useRef(null); // Reference to the current price line\r\n\r\n  useEffect(() => {\r\n    // Initialize the chart\r\n    chartRef.current = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.clientWidth || 700,\r\n      height: 400,\r\n      layout: {\r\n        backgroundColor: \"#ffffff\",\r\n        textColor: \"#000000\",\r\n      },\r\n      grid: {\r\n        vertLines: { color: \"#eeeeee\" },\r\n        horzLines: { color: \"#eeeeee\" },\r\n      },\r\n      priceScale: { borderColor: \"#cccccc\" },\r\n      timeScale: { borderColor: \"#cccccc\" },\r\n    });\r\n\r\n    // Add candlestick series\r\n    candlestickSeriesRef.current = chartRef.current.addCandlestickSeries();\r\n\r\n    // Fetch initial data\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data.dates && data.open && data.high && data.low && data.close) {\r\n          const formattedData = data.dates.map((date, index) => ({\r\n            time: date,\r\n            open: data.open[index],\r\n            high: data.high[index],\r\n            low: data.low[index],\r\n            close: data.close[index],\r\n          }));\r\n          candlestickSeriesRef.current.setData(formattedData);\r\n\r\n          // Get the current price and dynamically set the color\r\n          const currentPrice = formattedData[formattedData.length - 1].close;\r\n          const currentPriceColor = currentPrice > entryPoint ? \"green\" : \"red\";\r\n\r\n          // Create the current price line and store a reference\r\n          currentPriceLineRef.current = candlestickSeriesRef.current.createPriceLine({\r\n            price: currentPrice,\r\n            color: currentPriceColor,\r\n            lineWidth: 2,\r\n            lineStyle: 0,\r\n            axisLabelVisible: true,\r\n            title: `Current: ${currentPrice.toFixed(2)}`,\r\n          });\r\n\r\n          // Add entry price line\r\n          candlestickSeriesRef.current.createPriceLine({\r\n            price: entryPoint,\r\n            color: \"green\",\r\n            lineWidth: 1,\r\n            lineStyle: 2,\r\n            axisLabelVisible: true,\r\n            title: `Entry: ${entryPoint.toFixed(2)}`,\r\n          });\r\n\r\n          // Add exit price line\r\n          candlestickSeriesRef.current.createPriceLine({\r\n            price: exitPoint,\r\n            color: \"red\",\r\n            lineWidth: 1,\r\n            lineStyle: 2,\r\n            axisLabelVisible: true,\r\n            title: `Exit: ${exitPoint.toFixed(2)}`,\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching initial data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n\r\n    // Real-time updates\r\n    const updateChart = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data.dates && data.open && data.high && data.low && data.close) {\r\n          const latestData = {\r\n            time: data.dates[data.dates.length - 1],\r\n            open: data.open[data.open.length - 1],\r\n            high: data.high[data.high.length - 1],\r\n            low: data.low[data.low.length - 1],\r\n            close: data.close[data.close.length - 1],\r\n          };\r\n\r\n          if (candlestickSeriesRef.current) {\r\n            candlestickSeriesRef.current.update(latestData);\r\n\r\n            // Update the current price line dynamically\r\n            const currentPrice = latestData.close;\r\n            const currentPriceColor = currentPrice > entryPoint ? \"green\" : \"red\";\r\n\r\n            if (currentPriceLineRef.current) {\r\n              currentPriceLineRef.current.applyOptions({\r\n                price: currentPrice,\r\n                color: currentPriceColor,\r\n                title: `Current: ${currentPrice.toFixed(2)}`,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating chart:\", error);\r\n      }\r\n    };\r\n\r\n    const intervalId = setInterval(updateChart, 5000); // Fetch new data every 5 seconds\r\n\r\n    // Resize the chart on window resize\r\n    const handleResize = () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.applyOptions({ width: chartContainerRef.current.clientWidth });\r\n      }\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      clearInterval(intervalId); // Clear interval on unmount\r\n      window.removeEventListener(\"resize\", handleResize);\r\n\r\n      // Dispose of the chart and series to avoid errors\r\n      if (chartRef.current) {\r\n        chartRef.current.remove();\r\n        chartRef.current = null;\r\n      }\r\n      candlestickSeriesRef.current = null;\r\n      currentPriceLineRef.current = null;\r\n    };\r\n  }, [ticker, entryPoint, exitPoint]);\r\n\r\n  return (\r\n    <div className=\"chart-container\">\r\n      <h3 className=\"chart-title\">{ticker}</h3>\r\n      <div ref={chartContainerRef} className=\"chart-wrapper\"></div>\r\n      <div className=\"chart-info\">\r\n        <p>{additionalData}</p>\r\n        <p>\r\n          <strong>Entry Point:</strong> ${entryPoint.toFixed(2)} <br />\r\n          <strong>Exit Point:</strong> ${exitPoint.toFixed(2)} <br />\r\n          <strong>Current Price:</strong> Displayed on chart\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}