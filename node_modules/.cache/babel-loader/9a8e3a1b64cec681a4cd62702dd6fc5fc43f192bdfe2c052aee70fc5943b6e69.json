{"ast":null,"code":"import * as React from \"react\";\nimport { ChartCanvasContext } from \"@react-financial-charts/core\";\nexport const AlternateDataSeries = ({\n  data,\n  children\n}) => {\n  const context = React.useContext(ChartCanvasContext);\n  const contextValue = React.useMemo(() => {\n    const {\n      plotData,\n      xAccessor\n    } = context;\n    const startDate = xAccessor(plotData[0]);\n    const endDate = xAccessor(plotData[plotData.length - 1]);\n    return Object.assign(Object.assign({}, context), {\n      plotData: data.filter(d => {\n        const date = xAccessor(d);\n        return date > startDate && date < endDate;\n      })\n    });\n  }, [data, context]);\n  return React.createElement(ChartCanvasContext.Provider, {\n    value: contextValue\n  }, children);\n};","map":{"version":3,"names":["React","ChartCanvasContext","AlternateDataSeries","data","children","context","useContext","contextValue","useMemo","plotData","xAccessor","startDate","endDate","length","Object","assign","filter","d","date","createElement","Provider","value"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\AlternateDataSeries.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { ChartCanvasContext } from \"@react-financial-charts/core\";\n\nexport interface AlternateDataSeriesProps<TData> {\n    readonly data: TData[];\n}\n\nexport const AlternateDataSeries = <TData,>({\n    data,\n    children,\n}: React.PropsWithChildren<AlternateDataSeriesProps<TData>>) => {\n    const context = React.useContext(ChartCanvasContext);\n    const contextValue = React.useMemo(() => {\n        const { plotData, xAccessor } = context;\n\n        const startDate = xAccessor(plotData[0]);\n        const endDate = xAccessor(plotData[plotData.length - 1]);\n\n        return {\n            ...context,\n            plotData: data.filter((d) => {\n                const date = xAccessor(d);\n                return date > startDate && date < endDate;\n            }),\n        };\n    }, [data, context]);\n\n    return <ChartCanvasContext.Provider value={contextValue}>{children}</ChartCanvasContext.Provider>;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,kBAAkB,QAAQ,8BAA8B;AAMjE,OAAO,MAAMC,mBAAmB,GAAGA,CAAS;EACxCC,IAAI;EACJC;AAAQ,CAC+C,KAAI;EAC3D,MAAMC,OAAO,GAAGL,KAAK,CAACM,UAAU,CAACL,kBAAkB,CAAC;EACpD,MAAMM,YAAY,GAAGP,KAAK,CAACQ,OAAO,CAAC,MAAK;IACpC,MAAM;MAAEC,QAAQ;MAAEC;IAAS,CAAE,GAAGL,OAAO;IAEvC,MAAMM,SAAS,GAAGD,SAAS,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxC,MAAMG,OAAO,GAAGF,SAAS,CAACD,QAAQ,CAACA,QAAQ,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;IAExD,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACOV,OAAO;MACVI,QAAQ,EAAEN,IAAI,CAACa,MAAM,CAAEC,CAAC,IAAI;QACxB,MAAMC,IAAI,GAAGR,SAAS,CAACO,CAAC,CAAC;QACzB,OAAOC,IAAI,GAAGP,SAAS,IAAIO,IAAI,GAAGN,OAAO;MAC7C,CAAC;IAAC;EAEV,CAAC,EAAE,CAACT,IAAI,EAAEE,OAAO,CAAC,CAAC;EAEnB,OAAOL,KAAA,CAAAmB,aAAA,CAAClB,kBAAkB,CAACmB,QAAQ;IAACC,KAAK,EAAEd;EAAY,GAAGH,QAAQ,CAA+B;AACrG,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}