{"ast":null,"code":"import * as React from \"react\";\nimport { ChartContext, GenericChartComponent, getMouseCanvas, isDefined, noop } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse } from \"./components\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachText } from \"./wrapper\";\nexport class InteractiveText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDraw = (e, moreProps) => {\n      const {\n        enabled\n      } = this.props;\n      if (enabled) {\n        const {\n          mouseXY: [, mouseY],\n          chartConfig: {\n            yScale\n          },\n          xAccessor,\n          currentItem\n        } = moreProps;\n        const {\n          defaultText,\n          onChoosePosition\n        } = this.props;\n        if (onChoosePosition !== undefined) {\n          const xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n          const newText = Object.assign(Object.assign({}, defaultText), {\n            position: xyValue\n          });\n          onChoosePosition(e, newText, moreProps);\n        }\n      }\n    };\n    this.handleDragComplete = (e, moreProps) => {\n      const {\n        override\n      } = this.state;\n      if (isDefined(override)) {\n        const {\n          textList\n        } = this.props;\n        const newTextList = textList.map((each, idx) => {\n          const selected = idx === override.index;\n          return selected ? Object.assign(Object.assign({}, each), {\n            position: override.position,\n            selected\n          }) : Object.assign(Object.assign({}, each), {\n            selected\n          });\n        });\n        this.setState({\n          override: null\n        }, () => {\n          const {\n            onDragComplete\n          } = this.props;\n          if (onDragComplete !== undefined) {\n            onDragComplete(e, newTextList, moreProps);\n          }\n        });\n      }\n    };\n    this.handleDrag = (_, index, position) => {\n      this.setState({\n        override: {\n          index,\n          position\n        }\n      });\n    };\n    this.terminate = terminate.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType(\"textList\").bind(this);\n    this.state = {};\n  }\n  render() {\n    const {\n      textList,\n      defaultText,\n      hoverText\n    } = this.props;\n    const {\n      override\n    } = this.state;\n    return React.createElement(\"g\", null, textList.map((each, idx) => {\n      const defaultHoverText = InteractiveText.defaultProps.hoverText;\n      const props = Object.assign(Object.assign(Object.assign({}, defaultText), each), {\n        hoverText: Object.assign(Object.assign(Object.assign({}, defaultHoverText), hoverText), each.hoverText || {})\n      });\n      return React.createElement(EachText, Object.assign({\n        key: idx,\n        ref: this.saveNodeType(idx),\n        index: idx\n      }, props, {\n        selected: each.selected,\n        position: getValueFromOverride(override, idx, \"position\", each.position),\n        onDrag: this.handleDrag,\n        onDragComplete: this.handleDragComplete,\n        edgeInteractiveCursor: \"react-financial-charts-move-cursor\"\n      }));\n    }), React.createElement(GenericChartComponent, {\n      onClick: this.handleDraw,\n      canvasToDraw: getMouseCanvas,\n      drawOn: [\"mousemove\", \"pan\"]\n    }), \";\");\n  }\n}\nInteractiveText.defaultProps = {\n  onSelect: noop,\n  defaultText: {\n    bgFill: \"#D3D3D3\",\n    bgOpacity: 1,\n    bgStrokeWidth: 1,\n    textFill: \"#F10040\",\n    fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n    fontSize: 12,\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    text: \"Lorem ipsum...\"\n  },\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click to select object\",\n    selectedText: \"\"\n  }),\n  textList: []\n};\nInteractiveText.contextType = ChartContext;","map":{"version":3,"names":["React","ChartContext","GenericChartComponent","getMouseCanvas","isDefined","noop","HoverTextNearMouse","getValueFromOverride","isHoverForInteractiveType","saveNodeType","terminate","EachText","InteractiveText","Component","constructor","props","handleDraw","e","moreProps","enabled","mouseXY","mouseY","chartConfig","yScale","xAccessor","currentItem","defaultText","onChoosePosition","undefined","xyValue","invert","newText","Object","assign","position","handleDragComplete","override","state","textList","newTextList","map","each","idx","selected","index","setState","onDragComplete","handleDrag","_","bind","getSelectionState","render","hoverText","createElement","defaultHoverText","defaultProps","key","ref","onDrag","edgeInteractiveCursor","onClick","canvasToDraw","drawOn","onSelect","bgFill","bgOpacity","bgStrokeWidth","textFill","fontFamily","fontSize","fontStyle","fontWeight","text","enable","bgHeight","bgWidth","selectedText","contextType"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\InteractiveText.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { ChartContext, GenericChartComponent, getMouseCanvas, isDefined, noop } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse } from \"./components\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachText } from \"./wrapper\";\n\ninterface InteractiveTextProps {\n    readonly onChoosePosition: (e: React.MouseEvent, newText: any, moreProps: any) => void;\n    readonly onDragComplete?: (e: React.MouseEvent, newTextList: any[], moreProps: any) => void;\n    readonly onSelect?: (e: React.MouseEvent, interactives: any[], moreProps: any) => void;\n    readonly defaultText: {\n        readonly bgFill: string;\n        readonly bgOpacity: number;\n        readonly bgStrokeWidth?: number;\n        readonly bgStroke?: string;\n        readonly textFill: string;\n        readonly fontFamily: string;\n        readonly fontWeight: string;\n        readonly fontStyle: string;\n        readonly fontSize: number;\n        readonly text: string;\n    };\n    readonly hoverText: object;\n    readonly textList: any[];\n    readonly enabled: boolean;\n}\n\ninterface InteractiveTextState {\n    current?: any;\n    override?: any;\n}\n\nexport class InteractiveText extends React.Component<InteractiveTextProps, InteractiveTextState> {\n    public static defaultProps = {\n        onSelect: noop,\n        defaultText: {\n            bgFill: \"#D3D3D3\",\n            bgOpacity: 1,\n            bgStrokeWidth: 1,\n            textFill: \"#F10040\",\n            fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n            fontSize: 12,\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            text: \"Lorem ipsum...\",\n        },\n        hoverText: {\n            ...HoverTextNearMouse.defaultProps,\n            enable: true,\n            bgHeight: \"auto\",\n            bgWidth: \"auto\",\n            text: \"Click to select object\",\n            selectedText: \"\",\n        },\n        textList: [],\n    };\n\n    public static contextType = ChartContext;\n\n    // @ts-ignore\n    private getSelectionState: any;\n    private saveNodeType: any;\n\n    // @ts-ignore\n    private terminate: any;\n\n    public constructor(props: InteractiveTextProps) {\n        super(props);\n\n        this.terminate = terminate.bind(this);\n        this.saveNodeType = saveNodeType.bind(this);\n        this.getSelectionState = isHoverForInteractiveType(\"textList\").bind(this);\n\n        this.state = {};\n    }\n\n    public render() {\n        const { textList, defaultText, hoverText } = this.props;\n        const { override } = this.state;\n        return (\n            <g>\n                {textList.map((each, idx) => {\n                    const defaultHoverText = InteractiveText.defaultProps.hoverText;\n                    const props = {\n                        ...defaultText,\n                        ...each,\n                        hoverText: {\n                            ...defaultHoverText,\n                            ...hoverText,\n                            ...(each.hoverText || {}),\n                        },\n                    };\n                    return (\n                        <EachText\n                            key={idx}\n                            ref={this.saveNodeType(idx)}\n                            index={idx}\n                            {...props}\n                            selected={each.selected}\n                            position={getValueFromOverride(override, idx, \"position\", each.position)}\n                            onDrag={this.handleDrag}\n                            onDragComplete={this.handleDragComplete}\n                            edgeInteractiveCursor=\"react-financial-charts-move-cursor\"\n                        />\n                    );\n                })}\n                <GenericChartComponent\n                    onClick={this.handleDraw}\n                    canvasToDraw={getMouseCanvas}\n                    drawOn={[\"mousemove\", \"pan\"]}\n                />\n                ;\n            </g>\n        );\n    }\n\n    private readonly handleDraw = (e: React.MouseEvent, moreProps: any) => {\n        const { enabled } = this.props;\n        if (enabled) {\n            const {\n                mouseXY: [, mouseY],\n                chartConfig: { yScale },\n                xAccessor,\n                currentItem,\n            } = moreProps;\n\n            const { defaultText, onChoosePosition } = this.props;\n\n            if (onChoosePosition !== undefined) {\n                const xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n                const newText = {\n                    ...defaultText,\n                    position: xyValue,\n                };\n                onChoosePosition(e, newText, moreProps);\n            }\n        }\n    };\n\n    private readonly handleDragComplete = (e: React.MouseEvent, moreProps: any) => {\n        const { override } = this.state;\n        if (isDefined(override)) {\n            const { textList } = this.props;\n            const newTextList = textList.map((each, idx) => {\n                const selected = idx === override.index;\n                return selected\n                    ? {\n                          ...each,\n                          position: override.position,\n                          selected,\n                      }\n                    : {\n                          ...each,\n                          selected,\n                      };\n            });\n            this.setState(\n                {\n                    override: null,\n                },\n                () => {\n                    const { onDragComplete } = this.props;\n                    if (onDragComplete !== undefined) {\n                        onDragComplete(e, newTextList, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleDrag = (_: React.MouseEvent, index: any, position: any) => {\n        this.setState({\n            override: {\n                index,\n                position,\n            },\n        });\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}