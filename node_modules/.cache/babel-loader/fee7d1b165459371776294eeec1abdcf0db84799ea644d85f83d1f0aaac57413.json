{"ast":null,"code":"import * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport class InteractiveText extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.calculateTextWidth = true;\n    this.isHover = moreProps => {\n      const {\n        onHover\n      } = this.props;\n      if (onHover !== undefined && this.textWidth !== undefined && !this.calculateTextWidth) {\n        const {\n          rect\n        } = this.helper(moreProps, this.textWidth);\n        const {\n          mouseXY: [x, y]\n        } = moreProps;\n        if (x >= rect.x && y >= rect.y && x <= rect.x + rect.width && y <= rect.y + rect.height) {\n          return true;\n        }\n      }\n      return false;\n    };\n    this.drawOnCanvas = (ctx, moreProps) => {\n      var _a;\n      const {\n        bgFillStyle,\n        bgStrokeWidth,\n        bgStroke,\n        textFill,\n        fontFamily,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        text\n      } = this.props;\n      if (this.calculateTextWidth) {\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n        const {\n          width\n        } = ctx.measureText(text);\n        this.textWidth = width;\n        this.calculateTextWidth = false;\n      }\n      const {\n        selected\n      } = this.props;\n      const {\n        x,\n        y,\n        rect\n      } = this.helper(moreProps, (_a = this.textWidth) !== null && _a !== void 0 ? _a : 0);\n      ctx.fillStyle = bgFillStyle;\n      ctx.beginPath();\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      if (selected) {\n        ctx.strokeStyle = bgStroke;\n        ctx.lineWidth = bgStrokeWidth;\n        ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n      }\n      ctx.fillStyle = textFill;\n      ctx.textBaseline = \"middle\";\n      ctx.textAlign = \"center\";\n      ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n      ctx.beginPath();\n      ctx.fillText(text, x, y);\n    };\n    this.helper = (moreProps, textWidth) => {\n      const {\n        position,\n        fontSize\n      } = this.props;\n      const {\n        xScale,\n        chartConfig: {\n          yScale\n        }\n      } = moreProps;\n      const [xValue, yValue] = position;\n      const x = xScale(xValue);\n      const y = yScale(yValue);\n      const rect = {\n        x: x - textWidth / 2 - fontSize,\n        y: y - fontSize,\n        width: textWidth + fontSize * 2,\n        height: fontSize * 2\n      };\n      return {\n        x,\n        y,\n        rect\n      };\n    };\n  }\n  componentDidUpdate(previousProps) {\n    this.calculateTextWidth = previousProps.text !== this.props.text || previousProps.fontStyle !== this.props.fontStyle || previousProps.fontWeight !== this.props.fontWeight || previousProps.fontSize !== this.props.fontSize || previousProps.fontFamily !== this.props.fontFamily;\n  }\n  render() {\n    const {\n      selected,\n      interactiveCursorClass\n    } = this.props;\n    const {\n      onHover,\n      onUnHover\n    } = this.props;\n    const {\n      onDragStart,\n      onDrag,\n      onDragComplete\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      isHover: this.isHover,\n      canvasToDraw: getMouseCanvas,\n      canvasDraw: this.drawOnCanvas,\n      interactiveCursorClass: interactiveCursorClass,\n      selected: selected,\n      onDragStart: onDragStart,\n      onDrag: onDrag,\n      onDragComplete: onDragComplete,\n      onHover: onHover,\n      onUnHover: onUnHover,\n      drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n    });\n  }\n}\nInteractiveText.defaultProps = {\n  type: \"SD\",\n  fontWeight: \"normal\",\n  tolerance: 4,\n  selected: false\n};","map":{"version":3,"names":["React","getMouseCanvas","GenericChartComponent","InteractiveText","Component","constructor","calculateTextWidth","isHover","moreProps","onHover","props","undefined","textWidth","rect","helper","mouseXY","x","y","width","height","drawOnCanvas","ctx","bgFillStyle","bgStrokeWidth","bgStroke","textFill","fontFamily","fontSize","fontStyle","fontWeight","text","font","measureText","selected","_a","fillStyle","beginPath","fillRect","strokeStyle","lineWidth","strokeRect","textBaseline","textAlign","fillText","position","xScale","chartConfig","yScale","xValue","yValue","componentDidUpdate","previousProps","render","interactiveCursorClass","onUnHover","onDragStart","onDrag","onDragComplete","createElement","canvasToDraw","canvasDraw","drawOn","defaultProps","type","tolerance"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\components\\InteractiveText.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\n\nexport interface InteractiveTextProps {\n    readonly bgFillStyle: string;\n    readonly bgStrokeWidth: number;\n    readonly bgStroke: string;\n    readonly defaultClassName?: string;\n    readonly fontFamily: string;\n    readonly fontSize: number;\n    readonly fontWeight: number | string;\n    readonly fontStyle: string;\n    readonly onDragStart?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDrag?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDragComplete?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onUnHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly position?: any;\n    readonly interactiveCursorClass?: string;\n    readonly selected: boolean;\n    readonly text: string;\n    readonly textFill: string;\n    readonly tolerance: number;\n}\n\nexport class InteractiveText extends React.Component<InteractiveTextProps> {\n    public static defaultProps = {\n        type: \"SD\", // standard dev\n        fontWeight: \"normal\", // standard dev\n        tolerance: 4,\n        selected: false,\n    };\n\n    private calculateTextWidth = true;\n    private textWidth?: number;\n\n    public componentDidUpdate(previousProps: InteractiveTextProps) {\n        this.calculateTextWidth =\n            previousProps.text !== this.props.text ||\n            previousProps.fontStyle !== this.props.fontStyle ||\n            previousProps.fontWeight !== this.props.fontWeight ||\n            previousProps.fontSize !== this.props.fontSize ||\n            previousProps.fontFamily !== this.props.fontFamily;\n    }\n\n    public render() {\n        const { selected, interactiveCursorClass } = this.props;\n        const { onHover, onUnHover } = this.props;\n        const { onDragStart, onDrag, onDragComplete } = this.props;\n\n        return (\n            <GenericChartComponent\n                isHover={this.isHover}\n                canvasToDraw={getMouseCanvas}\n                canvasDraw={this.drawOnCanvas}\n                interactiveCursorClass={interactiveCursorClass}\n                selected={selected}\n                onDragStart={onDragStart}\n                onDrag={onDrag}\n                onDragComplete={onDragComplete}\n                onHover={onHover}\n                onUnHover={onUnHover}\n                drawOn={[\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]}\n            />\n        );\n    }\n\n    private readonly isHover = (moreProps: any) => {\n        const { onHover } = this.props;\n\n        if (onHover !== undefined && this.textWidth !== undefined && !this.calculateTextWidth) {\n            const { rect } = this.helper(moreProps, this.textWidth);\n            const {\n                mouseXY: [x, y],\n            } = moreProps;\n\n            if (x >= rect.x && y >= rect.y && x <= rect.x + rect.width && y <= rect.y + rect.height) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { bgFillStyle, bgStrokeWidth, bgStroke, textFill, fontFamily, fontSize, fontStyle, fontWeight, text } =\n            this.props;\n\n        if (this.calculateTextWidth) {\n            ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n            const { width } = ctx.measureText(text);\n            this.textWidth = width;\n            this.calculateTextWidth = false;\n        }\n\n        const { selected } = this.props;\n\n        const { x, y, rect } = this.helper(moreProps, this.textWidth ?? 0);\n\n        ctx.fillStyle = bgFillStyle;\n\n        ctx.beginPath();\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n\n        if (selected) {\n            ctx.strokeStyle = bgStroke;\n            ctx.lineWidth = bgStrokeWidth;\n            ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n        }\n\n        ctx.fillStyle = textFill;\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"center\";\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        ctx.beginPath();\n        ctx.fillText(text, x, y);\n    };\n\n    private readonly helper = (moreProps: any, textWidth: number) => {\n        const { position, fontSize } = this.props;\n\n        const {\n            xScale,\n            chartConfig: { yScale },\n        } = moreProps;\n\n        const [xValue, yValue] = position;\n        const x = xScale(xValue);\n        const y = yScale(yValue);\n\n        const rect = {\n            x: x - textWidth / 2 - fontSize,\n            y: y - fontSize,\n            width: textWidth + fontSize * 2,\n            height: fontSize * 2,\n        };\n\n        return {\n            x,\n            y,\n            rect,\n        };\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}