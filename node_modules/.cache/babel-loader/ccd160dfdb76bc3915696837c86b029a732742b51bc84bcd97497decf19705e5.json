{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { ChartLocation, animateAddPoints, getPoint, withInRange } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * The `StackingStepAreaSeries` module is used to render the stacking step area series.\n */\nvar StackingStepAreaSeries = /** @class */function (_super) {\n  __extends(StackingStepAreaSeries, _super);\n  function StackingStepAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the Stacking Step Area series.\n   *\n   * @param {Series} stackSeries - The series to be rendered.\n   * @param {Axis} xAxis - The x-axis of the chart.\n   * @param {Axis} yAxis - The y-axis of the chart.\n   * @param {boolean} isInverted - Specifies whether the chart is inverted.\n   * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n   * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n   * @returns {void}\n   * @private\n   */\n  StackingStepAreaSeries.prototype.render = function (stackSeries, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n    var currentPointLocation;\n    var secondPoint;\n    var start = null;\n    var direction = '';\n    var borderDirection = '';\n    var stackedvalue = stackSeries.stackedValues;\n    var visiblePoint = this.enableComplexProperty(stackSeries);\n    var origin = Math.max(stackSeries.yAxis.visibleRange.min, stackedvalue.startValues[0]);\n    var pointsLength = visiblePoint.length;\n    var options;\n    var point;\n    var point2;\n    var point3;\n    var xValue;\n    var lineLength;\n    var prevPoint = null;\n    var validIndex;\n    var startPoint = 0;\n    var pointIndex;\n    if (xAxis.valueType === 'Category' && xAxis.labelPlacement === 'BetweenTicks') {\n      lineLength = 0.5;\n    } else {\n      lineLength = 0;\n    }\n    for (var i = 0; i < pointsLength; i++) {\n      point = visiblePoint[i];\n      xValue = point.xValue;\n      point.symbolLocations = [];\n      point.regions = [];\n      pointIndex = point.index;\n      if (point.visible && withInRange(visiblePoint[i - 1], point, visiblePoint[i + 1], stackSeries)) {\n        if (start === null) {\n          start = new ChartLocation(xValue, 0);\n          currentPointLocation = getPoint(xValue - lineLength, origin, xAxis, yAxis, isInverted);\n          direction += 'M' + ' ' + currentPointLocation.x + ' ' + currentPointLocation.y + ' ';\n          currentPointLocation = getPoint(xValue - lineLength, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted);\n          direction += 'L' + ' ' + currentPointLocation.x + ' ' + currentPointLocation.y + ' ';\n          borderDirection += 'M' + ' ' + currentPointLocation.x + ' ' + currentPointLocation.y + ' ';\n        }\n        if (prevPoint != null) {\n          currentPointLocation = getPoint(point.xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted);\n          secondPoint = getPoint(prevPoint.xValue, stackedvalue.endValues[prevPoint.index], xAxis, yAxis, isInverted);\n          direction += this.GetStepLineDirection(currentPointLocation, secondPoint, stackSeries.step, 'L', stackSeries, false);\n          borderDirection += this.GetStepLineDirection(currentPointLocation, secondPoint, stackSeries.step, 'L', stackSeries, true);\n        } else if (stackSeries.emptyPointSettings.mode === 'Gap') {\n          currentPointLocation = getPoint(point.xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted);\n          direction += 'L' + ' ' + currentPointLocation.x + ' ' + currentPointLocation.y + ' ';\n          borderDirection += 'L' + ' ' + currentPointLocation.x + ' ' + currentPointLocation.y + ' ';\n        }\n        visiblePoint[i].symbolLocations.push(getPoint(visiblePoint[i].xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted));\n        visiblePoint[i].regions.push(new Rect(visiblePoint[i].symbolLocations[0].x - stackSeries.marker.width, visiblePoint[i].symbolLocations[0].y - stackSeries.marker.height, 2 * stackSeries.marker.width, 2 * stackSeries.marker.height));\n        prevPoint = point;\n      }\n      // If we set the empty point mode is Gap or next point of the current point is false, we will close the series path.\n      if (visiblePoint[i + 1] && !visiblePoint[i + 1].visible && start !== null && stackSeries.emptyPointSettings.mode !== 'Drop') {\n        var previousPointIndex = void 0;\n        for (var j = i; j >= startPoint; j--) {\n          pointIndex = visiblePoint[j].index;\n          previousPointIndex = j === 0 ? 0 : visiblePoint[j - 1].index;\n          currentPointLocation = getPoint(visiblePoint[pointIndex].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n          if (j !== 0 && (stackedvalue.startValues[pointIndex] < stackedvalue.startValues[previousPointIndex] || stackedvalue.startValues[pointIndex] > stackedvalue.startValues[previousPointIndex])) {\n            direction = direction.concat('L' + ' ' + currentPointLocation.x + ' ' + currentPointLocation.y + ' ');\n            secondPoint = getPoint(visiblePoint[previousPointIndex].xValue, stackedvalue.startValues[previousPointIndex], xAxis, yAxis, isInverted);\n          } else {\n            secondPoint = getPoint(visiblePoint[pointIndex].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n          }\n          if (visiblePoint[previousPointIndex].visible) {\n            direction = direction.concat(this.GetStepLineDirection(secondPoint, currentPointLocation, this.prevStep, 'L', stackSeries));\n          }\n        }\n        startPoint = i + 2;\n        start = null;\n        prevPoint = null;\n      }\n    }\n    if (direction !== '') {\n      // For category axis\n      if (pointsLength > 1) {\n        pointIndex = visiblePoint[pointsLength - 1].index;\n        start = {\n          'x': visiblePoint[pointsLength - 1].xValue + lineLength,\n          'y': stackedvalue.endValues[pointIndex]\n        };\n        secondPoint = getPoint(start.x, start.y, xAxis, yAxis, isInverted);\n        direction += 'L' + ' ' + secondPoint.x + ' ' + secondPoint.y + ' ';\n        borderDirection += 'L' + ' ' + secondPoint.x + ' ' + secondPoint.y + ' ';\n        start = {\n          'x': visiblePoint[pointsLength - 1].xValue + lineLength,\n          'y': stackedvalue.startValues[pointIndex]\n        };\n        secondPoint = getPoint(start.x, start.y, xAxis, yAxis, isInverted);\n        direction += 'L' + ' ' + secondPoint.x + ' ' + secondPoint.y + ' ';\n      }\n      // To close the stacked step area series path in reverse order\n      for (var j = pointsLength - 1; j >= startPoint; j--) {\n        var index = void 0;\n        if (visiblePoint[j].visible) {\n          pointIndex = visiblePoint[j].index;\n          point2 = getPoint(visiblePoint[j].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n          direction = direction.concat('L' + ' ' + point2.x + ' ' + point2.y + ' ');\n        }\n        if (j !== 0 && !visiblePoint[j - 1].visible) {\n          index = this.getNextVisiblePointIndex(visiblePoint, j);\n        }\n        if (j !== 0) {\n          validIndex = index ? index : j - 1;\n          pointIndex = index ? visiblePoint[index].index : visiblePoint[j - 1].index;\n          point3 = getPoint(visiblePoint[validIndex].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n          if (!(j !== 0 && !visiblePoint[j - 1].visible)) {\n            direction = direction.concat(this.GetStepLineDirection(point3, point2, this.prevStep, 'L', stackSeries));\n          }\n        }\n      }\n      this.prevStep = stackSeries.step === 'Right' ? 'Left' : stackSeries.step === 'Left' ? 'Right' : stackSeries.step;\n      options = new PathOption(stackSeries.chart.element.id + '_Series_' + stackSeries.index, stackSeries.interior, 0, 'transparent', stackSeries.opacity, stackSeries.dashArray, direction);\n      this[pointAnimate ? 'addPath' : 'appendLinePath'](options, stackSeries, '');\n      /**\n       * To draw border for the path directions of area\n       */\n      if (stackSeries.border.width !== 0) {\n        options = new PathOption(stackSeries.chart.element.id + '_Series_border_' + stackSeries.index, 'transparent', stackSeries.border.width, stackSeries.border.color ? stackSeries.border.color : stackSeries.interior, 1, stackSeries.border.dashArray, borderDirection);\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](options, stackSeries, '');\n      }\n      if (!pointUpdate) {\n        this.renderMarker(stackSeries);\n      }\n    }\n  };\n  /**\n   * To animate point for stacking step area series.\n   *\n   * @param {Series} series - Specifies the series.\n   * @param {number} point - Specifies the point.\n   * @returns {void}\n   * @private\n   */\n  StackingStepAreaSeries.prototype.updateDirection = function (series, point) {\n    for (var i = 0; i < series.xAxis.series.length; i++) {\n      var stackSeries = series.xAxis.series[i];\n      this.render(stackSeries, stackSeries.xAxis, stackSeries.yAxis, stackSeries.chart.requireInvertedAxis, false, true);\n      for (var j = 0; j < point.length; j++) {\n        if (stackSeries.marker && stackSeries.marker.visible) {\n          stackSeries.chart.markerRender.renderMarker(stackSeries, stackSeries.points[point[j]], stackSeries.points[point[j]].symbolLocations[0], null, true);\n        }\n        if (stackSeries.marker.dataLabel.visible && stackSeries.chart.dataLabelModule) {\n          stackSeries.chart.dataLabelModule.commonId = stackSeries.chart.element.id + '_Series_' + stackSeries.index + '_Point_';\n          stackSeries.chart.dataLabelModule.renderDataLabel(stackSeries, stackSeries.points[point[j]], null, stackSeries.marker.dataLabel);\n        }\n      }\n    }\n  };\n  /**\n   * Adds a area path to equate the start and end paths.\n   *\n   * @param {PathOption} options - The options for the path.\n   * @param {Series} series - The series to which the path belongs.\n   * @param {string} clipRect - The clip rectangle for the path.\n   * @returns {void}\n   * @private\n   */\n  StackingStepAreaSeries.prototype.addPath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    if (points.previousDirection !== '' && options.d !== '') {\n      var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var endPathCommands = options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n      var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n      if (startPathCommands.length < endPathCommands.length) {\n        for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            startPathCommands.splice(Math.floor(startPathCommands.length / 2) - 1, 0, startPathCommands[Math.floor(startPathCommands.length / 2) - 1], startPathCommands[Math.floor(startPathCommands.length / 2) - 1]);\n            startPathCommands.splice(Math.floor(startPathCommands.length / 2) + 2, 0, startPathCommands[Math.floor(startPathCommands.length / 2) + 2], startPathCommands[Math.floor(startPathCommands.length / 2) + 2], startPathCommands[Math.floor(startPathCommands.length / 2) + 2]);\n          }\n        }\n        animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n      } else if (startPathCommands.length > endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            endPathCommands.splice(2, 0, endPathCommands[2]);\n            endPathCommands.splice(endPathCommands.length - 3, 0, endPathCommands[endPathCommands.length - 3]);\n          }\n        }\n        animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n      } else {\n        animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n      }\n    }\n  };\n  /**\n   * Animates the series.\n   *\n   * @param  {Series} series - Defines the series to animate.\n   * @returns {void}\n   * @private\n   */\n  StackingStepAreaSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * To destroy the stacking step area.\n   *\n   * @returns {void}\n   * @private\n   */\n  StackingStepAreaSeries.prototype.destroy = function () {\n    /**\n     * Destroy method calling here.\n     */\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   */\n  StackingStepAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series.\n     */\n    return 'StackingStepAreaSeries';\n  };\n  /**\n   * To get the nearest visible point.\n   *\n   * @param {Points[]} points points\n   * @param {number} j index\n   * @returns {number} - Returns the nearest visible point.\n   */\n  StackingStepAreaSeries.prototype.getNextVisiblePointIndex = function (points, j) {\n    var index;\n    for (index = j - 1; index >= 0; index--) {\n      if (!points[index].visible) {\n        continue;\n      } else {\n        return index;\n      }\n    }\n    return 0;\n  };\n  return StackingStepAreaSeries;\n}(LineBase);\nexport { StackingStepAreaSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ChartLocation","animateAddPoints","getPoint","withInRange","PathOption","Rect","LineBase","StackingStepAreaSeries","_super","apply","arguments","render","stackSeries","xAxis","yAxis","isInverted","pointAnimate","pointUpdate","currentPointLocation","secondPoint","start","direction","borderDirection","stackedvalue","stackedValues","visiblePoint","enableComplexProperty","origin","Math","max","visibleRange","min","startValues","pointsLength","length","options","point","point2","point3","xValue","lineLength","prevPoint","validIndex","startPoint","pointIndex","valueType","labelPlacement","i","symbolLocations","regions","index","visible","x","y","endValues","GetStepLineDirection","step","emptyPointSettings","mode","push","marker","width","height","previousPointIndex","j","concat","prevStep","getNextVisiblePointIndex","chart","element","id","interior","opacity","dashArray","border","color","renderMarker","updateDirection","series","requireInvertedAxis","markerRender","points","dataLabel","dataLabelModule","commonId","renderDataLabel","addPath","clipRect","appendPathElement","previousDirection","startPathCommands","match","endPathCommands","maxLength","minLength","splice","floor","redraw","join","duration","doAnimation","option","animation","doLinearAnimation","destroy","getModuleName"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/chart/series/stacking-step-area-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { ChartLocation, animateAddPoints, getPoint, withInRange } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { LineBase } from './line-base';\n/**\n * The `StackingStepAreaSeries` module is used to render the stacking step area series.\n */\nvar StackingStepAreaSeries = /** @class */ (function (_super) {\n    __extends(StackingStepAreaSeries, _super);\n    function StackingStepAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the Stacking Step Area series.\n     *\n     * @param {Series} stackSeries - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n     * @returns {void}\n     * @private\n     */\n    StackingStepAreaSeries.prototype.render = function (stackSeries, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n        var currentPointLocation;\n        var secondPoint;\n        var start = null;\n        var direction = '';\n        var borderDirection = '';\n        var stackedvalue = stackSeries.stackedValues;\n        var visiblePoint = this.enableComplexProperty(stackSeries);\n        var origin = Math.max(stackSeries.yAxis.visibleRange.min, stackedvalue.startValues[0]);\n        var pointsLength = visiblePoint.length;\n        var options;\n        var point;\n        var point2;\n        var point3;\n        var xValue;\n        var lineLength;\n        var prevPoint = null;\n        var validIndex;\n        var startPoint = 0;\n        var pointIndex;\n        if (xAxis.valueType === 'Category' && xAxis.labelPlacement === 'BetweenTicks') {\n            lineLength = 0.5;\n        }\n        else {\n            lineLength = 0;\n        }\n        for (var i = 0; i < pointsLength; i++) {\n            point = visiblePoint[i];\n            xValue = point.xValue;\n            point.symbolLocations = [];\n            point.regions = [];\n            pointIndex = point.index;\n            if (point.visible && withInRange(visiblePoint[i - 1], point, visiblePoint[i + 1], stackSeries)) {\n                if (start === null) {\n                    start = new ChartLocation(xValue, 0);\n                    currentPointLocation = getPoint(xValue - lineLength, origin, xAxis, yAxis, isInverted);\n                    direction += ('M' + ' ' + (currentPointLocation.x) + ' ' + (currentPointLocation.y) + ' ');\n                    currentPointLocation = getPoint(xValue - lineLength, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted);\n                    direction += ('L' + ' ' + (currentPointLocation.x) + ' ' + (currentPointLocation.y) + ' ');\n                    borderDirection += ('M' + ' ' + (currentPointLocation.x) + ' ' + (currentPointLocation.y) + ' ');\n                }\n                if (prevPoint != null) {\n                    currentPointLocation = getPoint(point.xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted);\n                    secondPoint = getPoint(prevPoint.xValue, stackedvalue.endValues[prevPoint.index], xAxis, yAxis, isInverted);\n                    direction += (this.GetStepLineDirection(currentPointLocation, secondPoint, stackSeries.step, 'L', stackSeries, false));\n                    borderDirection += (this.GetStepLineDirection(currentPointLocation, secondPoint, stackSeries.step, 'L', stackSeries, true));\n                }\n                else if (stackSeries.emptyPointSettings.mode === 'Gap') {\n                    currentPointLocation = getPoint(point.xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted);\n                    direction += 'L' + ' ' + (currentPointLocation.x) + ' ' + (currentPointLocation.y) + ' ';\n                    borderDirection += 'L' + ' ' + (currentPointLocation.x) + ' ' + (currentPointLocation.y) + ' ';\n                }\n                visiblePoint[i].symbolLocations.push(getPoint(visiblePoint[i].xValue, stackedvalue.endValues[pointIndex], xAxis, yAxis, isInverted));\n                visiblePoint[i].regions.push(new Rect(visiblePoint[i].symbolLocations[0].x - stackSeries.marker.width, visiblePoint[i].symbolLocations[0].y - stackSeries.marker.height, 2 * stackSeries.marker.width, 2 * stackSeries.marker.height));\n                prevPoint = point;\n            }\n            // If we set the empty point mode is Gap or next point of the current point is false, we will close the series path.\n            if (visiblePoint[i + 1] && (!visiblePoint[i + 1].visible && start !== null) && stackSeries.emptyPointSettings.mode !== 'Drop') {\n                var previousPointIndex = void 0;\n                for (var j = i; j >= startPoint; j--) {\n                    pointIndex = visiblePoint[j].index;\n                    previousPointIndex = j === 0 ? 0 : visiblePoint[j - 1].index;\n                    currentPointLocation = getPoint(visiblePoint[pointIndex].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n                    if (j !== 0 && (stackedvalue.startValues[pointIndex] <\n                        stackedvalue.startValues[previousPointIndex] ||\n                        stackedvalue.startValues[pointIndex] > stackedvalue.startValues[previousPointIndex])) {\n                        direction = direction.concat('L' + ' ' + (currentPointLocation.x) + ' ' + (currentPointLocation.y) + ' ');\n                        secondPoint = getPoint(visiblePoint[previousPointIndex].xValue, stackedvalue.startValues[previousPointIndex], xAxis, yAxis, isInverted);\n                    }\n                    else {\n                        secondPoint = getPoint(visiblePoint[pointIndex].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n                    }\n                    if (visiblePoint[previousPointIndex].visible) {\n                        direction = direction.concat(this.GetStepLineDirection(secondPoint, currentPointLocation, this.prevStep, 'L', stackSeries));\n                    }\n                }\n                startPoint = i + 2;\n                start = null;\n                prevPoint = null;\n            }\n        }\n        if (direction !== '') {\n            // For category axis\n            if (pointsLength > 1) {\n                pointIndex = visiblePoint[pointsLength - 1].index;\n                start = { 'x': visiblePoint[pointsLength - 1].xValue + lineLength, 'y': stackedvalue.endValues[pointIndex] };\n                secondPoint = getPoint(start.x, start.y, xAxis, yAxis, isInverted);\n                direction += ('L' + ' ' + (secondPoint.x) + ' ' + (secondPoint.y) + ' ');\n                borderDirection += ('L' + ' ' + (secondPoint.x) + ' ' + (secondPoint.y) + ' ');\n                start = { 'x': visiblePoint[pointsLength - 1].xValue + lineLength, 'y': stackedvalue.startValues[pointIndex] };\n                secondPoint = getPoint(start.x, start.y, xAxis, yAxis, isInverted);\n                direction += ('L' + ' ' + (secondPoint.x) + ' ' + (secondPoint.y) + ' ');\n            }\n            // To close the stacked step area series path in reverse order\n            for (var j = pointsLength - 1; j >= startPoint; j--) {\n                var index = void 0;\n                if (visiblePoint[j].visible) {\n                    pointIndex = visiblePoint[j].index;\n                    point2 = getPoint(visiblePoint[j].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n                    direction = direction.concat('L' + ' ' + (point2.x) + ' ' + (point2.y) + ' ');\n                }\n                if (j !== 0 && !visiblePoint[j - 1].visible) {\n                    index = this.getNextVisiblePointIndex(visiblePoint, j);\n                }\n                if (j !== 0) {\n                    validIndex = index ? index : j - 1;\n                    pointIndex = index ? visiblePoint[index].index : visiblePoint[j - 1].index;\n                    point3 = getPoint(visiblePoint[validIndex].xValue, stackedvalue.startValues[pointIndex], xAxis, yAxis, isInverted);\n                    if (!(j !== 0 && !visiblePoint[j - 1].visible)) {\n                        direction = direction.concat(this.GetStepLineDirection(point3, point2, this.prevStep, 'L', stackSeries));\n                    }\n                }\n            }\n            this.prevStep = stackSeries.step === 'Right' ? 'Left' : stackSeries.step === 'Left' ? 'Right' : stackSeries.step;\n            options = new PathOption(stackSeries.chart.element.id + '_Series_' + stackSeries.index, stackSeries.interior, 0, 'transparent', stackSeries.opacity, stackSeries.dashArray, direction);\n            this[pointAnimate ? 'addPath' : 'appendLinePath'](options, stackSeries, '');\n            /**\n             * To draw border for the path directions of area\n             */\n            if (stackSeries.border.width !== 0) {\n                options = new PathOption(stackSeries.chart.element.id + '_Series_border_' + stackSeries.index, 'transparent', stackSeries.border.width, stackSeries.border.color ? stackSeries.border.color : stackSeries.interior, 1, stackSeries.border.dashArray, borderDirection);\n                this[pointAnimate ? 'addPath' : 'appendLinePath'](options, stackSeries, '');\n            }\n            if (!pointUpdate) {\n                this.renderMarker(stackSeries);\n            }\n        }\n    };\n    /**\n     * To animate point for stacking step area series.\n     *\n     * @param {Series} series - Specifies the series.\n     * @param {number} point - Specifies the point.\n     * @returns {void}\n     * @private\n     */\n    StackingStepAreaSeries.prototype.updateDirection = function (series, point) {\n        for (var i = 0; i < series.xAxis.series.length; i++) {\n            var stackSeries = series.xAxis.series[i];\n            this.render(stackSeries, stackSeries.xAxis, stackSeries.yAxis, stackSeries.chart.requireInvertedAxis, false, true);\n            for (var j = 0; j < point.length; j++) {\n                if (stackSeries.marker && stackSeries.marker.visible) {\n                    stackSeries.chart.markerRender.renderMarker(stackSeries, stackSeries.points[point[j]], stackSeries.points[point[j]].symbolLocations[0], null, true);\n                }\n                if (stackSeries.marker.dataLabel.visible && stackSeries.chart.dataLabelModule) {\n                    stackSeries.chart.dataLabelModule.commonId = stackSeries.chart.element.id + '_Series_' + stackSeries.index + '_Point_';\n                    stackSeries.chart.dataLabelModule.\n                        renderDataLabel(stackSeries, stackSeries.points[point[j]], null, stackSeries.marker.dataLabel);\n                }\n            }\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @returns {void}\n     * @private\n     */\n    StackingStepAreaSeries.prototype.addPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        startPathCommands.splice((Math.floor((startPathCommands.length / 2)) - 1), 0, startPathCommands[Math.floor((startPathCommands.length / 2)) - 1], startPathCommands[Math.floor((startPathCommands.length / 2)) - 1]);\n                        startPathCommands.splice((Math.floor((startPathCommands.length / 2)) + 2), 0, startPathCommands[Math.floor((startPathCommands.length / 2)) + 2], startPathCommands[Math.floor((startPathCommands.length / 2)) + 2], startPathCommands[Math.floor((startPathCommands.length / 2)) + 2]);\n                    }\n                }\n                animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        endPathCommands.splice(2, 0, endPathCommands[2]);\n                        endPathCommands.splice(endPathCommands.length - 3, 0, endPathCommands[endPathCommands.length - 3]);\n                    }\n                }\n                animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    StackingStepAreaSeries.prototype.doAnimation = function (series) {\n        var option = series.animation;\n        this.doLinearAnimation(series, option);\n    };\n    /**\n     * To destroy the stacking step area.\n     *\n     * @returns {void}\n     * @private\n     */\n    StackingStepAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    StackingStepAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'StackingStepAreaSeries';\n    };\n    /**\n     * To get the nearest visible point.\n     *\n     * @param {Points[]} points points\n     * @param {number} j index\n     * @returns {number} - Returns the nearest visible point.\n     */\n    StackingStepAreaSeries.prototype.getNextVisiblePointIndex = function (points, j) {\n        var index;\n        for (index = j - 1; index >= 0; index--) {\n            if (!points[index].visible) {\n                continue;\n            }\n            else {\n                return index;\n            }\n        }\n        return 0;\n    };\n    return StackingStepAreaSeries;\n}(LineBase));\nexport { StackingStepAreaSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}