{"ast":null,"code":"import { identity, merge, slidingWindow } from \"../utils\";\nexport default function () {\n  let windowSize = 1;\n  let accumulator = identity;\n  let mergeAs = identity;\n  function algorithm(data) {\n    const defaultAlgorithm = slidingWindow().windowSize(windowSize).accumulator(accumulator);\n    const calculator = merge().algorithm(defaultAlgorithm).merge(mergeAs);\n    const newData = calculator(data);\n    return newData;\n  }\n  algorithm.accumulator = newAccumulator => {\n    if (newAccumulator === undefined) {\n      return accumulator;\n    }\n    accumulator = newAccumulator;\n    return algorithm;\n  };\n  algorithm.windowSize = newWindowSize => {\n    if (newWindowSize === undefined) {\n      return windowSize;\n    }\n    windowSize = newWindowSize;\n    return algorithm;\n  };\n  algorithm.merge = newMerge => {\n    if (newMerge === undefined) {\n      return mergeAs;\n    }\n    mergeAs = newMerge;\n    return algorithm;\n  };\n  return algorithm;\n}","map":{"version":3,"names":["identity","merge","slidingWindow","windowSize","accumulator","mergeAs","algorithm","data","defaultAlgorithm","calculator","newData","newAccumulator","undefined","newWindowSize","newMerge"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\indicator\\algorithm.ts"],"sourcesContent":["import { identity, merge, slidingWindow } from \"../utils\";\n\nexport interface Algorithm {\n    (data: any[]): any;\n    accumulator(): any;\n    accumulator(newAccumulator: any): Algorithm;\n    windowSize(): number;\n    windowSize(windowSize: number): Algorithm;\n    merge(): any;\n    merge(newMerge: any): Algorithm;\n}\n\nexport default function () {\n    let windowSize = 1;\n    let accumulator = identity;\n    let mergeAs = identity;\n\n    function algorithm(data: any[]) {\n        const defaultAlgorithm = slidingWindow().windowSize(windowSize).accumulator(accumulator);\n\n        const calculator = merge().algorithm(defaultAlgorithm).merge(mergeAs);\n\n        const newData = calculator(data);\n\n        return newData;\n    }\n\n    algorithm.accumulator = (newAccumulator?: any) => {\n        if (newAccumulator === undefined) {\n            return accumulator;\n        }\n        accumulator = newAccumulator;\n        return algorithm;\n    };\n\n    algorithm.windowSize = (newWindowSize?: number) => {\n        if (newWindowSize === undefined) {\n            return windowSize;\n        }\n        windowSize = newWindowSize;\n        return algorithm;\n    };\n\n    algorithm.merge = (newMerge?: any) => {\n        if (newMerge === undefined) {\n            return mergeAs;\n        }\n        mergeAs = newMerge;\n        return algorithm;\n    };\n\n    return algorithm as Algorithm;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAYzD,eAAc;EACV,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,WAAW,GAAGJ,QAAQ;EAC1B,IAAIK,OAAO,GAAGL,QAAQ;EAEtB,SAASM,SAASA,CAACC,IAAW;IAC1B,MAAMC,gBAAgB,GAAGN,aAAa,EAAE,CAACC,UAAU,CAACA,UAAU,CAAC,CAACC,WAAW,CAACA,WAAW,CAAC;IAExF,MAAMK,UAAU,GAAGR,KAAK,EAAE,CAACK,SAAS,CAACE,gBAAgB,CAAC,CAACP,KAAK,CAACI,OAAO,CAAC;IAErE,MAAMK,OAAO,GAAGD,UAAU,CAACF,IAAI,CAAC;IAEhC,OAAOG,OAAO;EAClB;EAEAJ,SAAS,CAACF,WAAW,GAAIO,cAAoB,IAAI;IAC7C,IAAIA,cAAc,KAAKC,SAAS,EAAE;MAC9B,OAAOR,WAAW;;IAEtBA,WAAW,GAAGO,cAAc;IAC5B,OAAOL,SAAS;EACpB,CAAC;EAEDA,SAAS,CAACH,UAAU,GAAIU,aAAsB,IAAI;IAC9C,IAAIA,aAAa,KAAKD,SAAS,EAAE;MAC7B,OAAOT,UAAU;;IAErBA,UAAU,GAAGU,aAAa;IAC1B,OAAOP,SAAS;EACpB,CAAC;EAEDA,SAAS,CAACL,KAAK,GAAIa,QAAc,IAAI;IACjC,IAAIA,QAAQ,KAAKF,SAAS,EAAE;MACxB,OAAOP,OAAO;;IAElBA,OAAO,GAAGS,QAAQ;IAClB,OAAOR,SAAS;EACpB,CAAC;EAED,OAAOA,SAAsB;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}