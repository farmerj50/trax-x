{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from \"react\";\nimport { isDefined, isNotDefined, noop } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse, MouseLocationIndicator } from \"./components\";\nimport { getSlope, getYIntercept } from \"./components/InteractiveStraightLine\";\nimport { isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachEquidistantChannel } from \"./wrapper\";\nexport class EquidistantChannel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDragChannel = (_, index, newXYValue) => {\n      this.setState({\n        override: Object.assign({\n          index\n        }, newXYValue)\n      });\n    };\n    this.handleDragChannelComplete = (e, moreProps) => {\n      const {\n        override\n      } = this.state;\n      const {\n        channels\n      } = this.props;\n      if (isDefined(override)) {\n        const {\n            index\n          } = override,\n          rest = __rest(override, [\"index\"]);\n        const newChannels = channels.map((each, idx) => idx === index ? Object.assign(Object.assign(Object.assign({}, each), rest), {\n          selected: true\n        }) : each);\n        this.setState({\n          override: null\n        }, () => {\n          const {\n            onComplete\n          } = this.props;\n          if (onComplete !== undefined) {\n            onComplete(e, newChannels, moreProps);\n          }\n        });\n      }\n    };\n    this.handleStart = (_, xyValue) => {\n      const {\n        current\n      } = this.state;\n      if (isNotDefined(current) || isNotDefined(current.startXY)) {\n        this.mouseMoved = false;\n        this.setState({\n          current: {\n            startXY: xyValue,\n            endXY: null\n          }\n        }, () => {\n          const {\n            onStart\n          } = this.props;\n          if (onStart !== undefined) {\n            onStart();\n          }\n        });\n      }\n    };\n    this.handleEnd = (e, _, moreProps) => {\n      const {\n        current\n      } = this.state;\n      const {\n        channels,\n        appearance\n      } = this.props;\n      if (this.mouseMoved && isDefined(current) && isDefined(current.startXY)) {\n        if (isNotDefined(current.dy)) {\n          this.setState({\n            current: Object.assign(Object.assign({}, current), {\n              dy: 0\n            })\n          });\n        } else {\n          const newChannels = [...channels.map(d => Object.assign(Object.assign({}, d), {\n            selected: false\n          })), Object.assign(Object.assign({}, current), {\n            selected: true,\n            appearance\n          })];\n          this.setState({\n            current: null\n          }, () => {\n            const {\n              onComplete\n            } = this.props;\n            if (onComplete !== undefined) {\n              onComplete(e, newChannels, moreProps);\n            }\n          });\n        }\n      }\n    };\n    this.handleDrawChannel = (_, xyValue) => {\n      const {\n        current\n      } = this.state;\n      if (isDefined(current) && isDefined(current.startXY)) {\n        this.mouseMoved = true;\n        if (isNotDefined(current.dy)) {\n          this.setState({\n            current: {\n              startXY: current.startXY,\n              endXY: xyValue\n            }\n          });\n        } else {\n          const m = getSlope(current.startXY, current.endXY);\n          const b = getYIntercept(m, current.endXY);\n          // @ts-ignore\n          const y = m * xyValue[0] + b;\n          const dy = xyValue[1] - y;\n          this.setState({\n            current: Object.assign(Object.assign({}, current), {\n              dy\n            })\n          });\n        }\n      }\n    };\n    this.terminate = terminate.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType(\"channels\").bind(this);\n    this.state = {};\n  }\n  render() {\n    const {\n      appearance,\n      channels,\n      currentPositionOpacity,\n      currentPositionRadius = EquidistantChannel.defaultProps.currentPositionRadius,\n      currentPositionStroke,\n      currentPositionStrokeWidth,\n      enabled,\n      hoverText\n    } = this.props;\n    const {\n      current,\n      override\n    } = this.state;\n    const overrideIndex = isDefined(override) ? override.index : null;\n    const tempChannel = isDefined(current) && isDefined(current.endXY) ? React.createElement(EachEquidistantChannel, Object.assign({\n      interactive: false\n    }, current, {\n      appearance: appearance,\n      hoverText: hoverText\n    })) : null;\n    return React.createElement(\"g\", null, channels.map((each, idx) => {\n      const eachAppearance = isDefined(each.appearance) ? Object.assign(Object.assign({}, appearance), each.appearance) : appearance;\n      return React.createElement(EachEquidistantChannel, Object.assign({\n        key: idx,\n        ref: this.saveNodeType(idx),\n        index: idx,\n        selected: each.selected,\n        hoverText: hoverText\n      }, idx === overrideIndex ? override : each, {\n        appearance: eachAppearance,\n        onDrag: this.handleDragChannel,\n        onDragComplete: this.handleDragChannelComplete\n      }));\n    }), tempChannel, React.createElement(MouseLocationIndicator, {\n      enabled: enabled,\n      snap: false,\n      r: currentPositionRadius,\n      stroke: currentPositionStroke,\n      opacity: currentPositionOpacity,\n      strokeWidth: currentPositionStrokeWidth,\n      onMouseDown: this.handleStart,\n      onClick: this.handleEnd,\n      onMouseMove: this.handleDrawChannel\n    }));\n  }\n}\nEquidistantChannel.defaultProps = {\n  onSelect: noop,\n  currentPositionStroke: \"#000000\",\n  currentPositionOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 4,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 120,\n    text: \"Click to select object\"\n  }),\n  channels: [],\n  appearance: {\n    stroke: \"#000000\",\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    fill: \"#8AAFE2\",\n    fillOpacity: 0.7,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    edgeFill2: \"#250B98\",\n    edgeStrokeWidth: 1,\n    r: 5\n  }\n};","map":{"version":3,"names":["React","isDefined","isNotDefined","noop","HoverTextNearMouse","MouseLocationIndicator","getSlope","getYIntercept","isHoverForInteractiveType","saveNodeType","terminate","EachEquidistantChannel","EquidistantChannel","Component","constructor","props","handleDragChannel","_","index","newXYValue","setState","override","Object","assign","handleDragChannelComplete","e","moreProps","state","channels","rest","__rest","newChannels","map","each","idx","selected","onComplete","undefined","handleStart","xyValue","current","startXY","mouseMoved","endXY","onStart","handleEnd","appearance","dy","d","handleDrawChannel","m","b","y","bind","getSelectionState","render","currentPositionOpacity","currentPositionRadius","defaultProps","currentPositionStroke","currentPositionStrokeWidth","enabled","hoverText","overrideIndex","tempChannel","createElement","interactive","eachAppearance","key","ref","onDrag","onDragComplete","snap","r","stroke","opacity","strokeWidth","onMouseDown","onClick","onMouseMove","onSelect","enable","bgHeight","bgWidth","text","strokeOpacity","fill","fillOpacity","edgeStroke","edgeFill","edgeFill2","edgeStrokeWidth"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\EquidistantChannel.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { isDefined, isNotDefined, noop } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse, MouseLocationIndicator } from \"./components\";\nimport { getSlope, getYIntercept } from \"./components/InteractiveStraightLine\";\nimport { isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachEquidistantChannel } from \"./wrapper\";\n\ninterface EquidistantChannelProps {\n    readonly enabled: boolean;\n    readonly onStart: () => void;\n    readonly onComplete: (e: React.MouseEvent, newChannels: any[], moreProps: any) => void;\n    readonly onSelect: (e: React.MouseEvent, interactives: any[], moreProps: any) => void;\n    readonly currentPositionStroke?: string;\n    readonly currentPositionStrokeWidth?: number;\n    readonly currentPositionOpacity?: number;\n    readonly currentPositionRadius?: number;\n    readonly hoverText: object;\n    readonly channels: any[];\n    readonly appearance: {\n        readonly stroke: string;\n        readonly strokeOpacity: number;\n        readonly strokeWidth: number;\n        readonly fill: string;\n        readonly fillOpacity: number;\n        readonly edgeStroke: string;\n        readonly edgeFill: string;\n        readonly edgeFill2: string;\n        readonly edgeStrokeWidth: number;\n        readonly r: number;\n    };\n}\n\ninterface EquidistantChannelState {\n    current?: any;\n    override?: any;\n}\n\nexport class EquidistantChannel extends React.Component<EquidistantChannelProps, EquidistantChannelState> {\n    public static defaultProps = {\n        onSelect: noop,\n        currentPositionStroke: \"#000000\",\n        currentPositionOpacity: 1,\n        currentPositionStrokeWidth: 3,\n        currentPositionRadius: 4,\n        hoverText: {\n            ...HoverTextNearMouse.defaultProps,\n            enable: true,\n            bgHeight: 18,\n            bgWidth: 120,\n            text: \"Click to select object\",\n        },\n        channels: [],\n        appearance: {\n            stroke: \"#000000\",\n            strokeOpacity: 1,\n            strokeWidth: 1,\n            fill: \"#8AAFE2\",\n            fillOpacity: 0.7,\n            edgeStroke: \"#000000\",\n            edgeFill: \"#FFFFFF\",\n            edgeFill2: \"#250B98\",\n            edgeStrokeWidth: 1,\n            r: 5,\n        },\n    };\n\n    // @ts-ignore\n    private terminate: () => void;\n    private saveNodeType: any;\n    // @ts-ignore\n    private getSelectionState: any;\n    private mouseMoved: any;\n\n    public constructor(props: EquidistantChannelProps) {\n        super(props);\n\n        this.terminate = terminate.bind(this);\n        this.saveNodeType = saveNodeType.bind(this);\n        this.getSelectionState = isHoverForInteractiveType(\"channels\").bind(this);\n\n        this.state = {};\n    }\n\n    public render() {\n        const {\n            appearance,\n            channels,\n            currentPositionOpacity,\n            currentPositionRadius = EquidistantChannel.defaultProps.currentPositionRadius,\n            currentPositionStroke,\n            currentPositionStrokeWidth,\n            enabled,\n            hoverText,\n        } = this.props;\n\n        const { current, override } = this.state;\n\n        const overrideIndex = isDefined(override) ? override.index : null;\n\n        const tempChannel =\n            isDefined(current) && isDefined(current.endXY) ? (\n                <EachEquidistantChannel\n                    interactive={false}\n                    {...current}\n                    appearance={appearance}\n                    hoverText={hoverText}\n                />\n            ) : null;\n\n        return (\n            <g>\n                {channels.map((each, idx) => {\n                    const eachAppearance = isDefined(each.appearance)\n                        ? { ...appearance, ...each.appearance }\n                        : appearance;\n\n                    return (\n                        <EachEquidistantChannel\n                            key={idx}\n                            ref={this.saveNodeType(idx)}\n                            index={idx}\n                            selected={each.selected}\n                            hoverText={hoverText}\n                            {...(idx === overrideIndex ? override : each)}\n                            appearance={eachAppearance}\n                            onDrag={this.handleDragChannel}\n                            onDragComplete={this.handleDragChannelComplete}\n                        />\n                    );\n                })}\n                {tempChannel}\n                <MouseLocationIndicator\n                    enabled={enabled}\n                    snap={false}\n                    r={currentPositionRadius}\n                    stroke={currentPositionStroke}\n                    opacity={currentPositionOpacity}\n                    strokeWidth={currentPositionStrokeWidth}\n                    onMouseDown={this.handleStart}\n                    onClick={this.handleEnd}\n                    onMouseMove={this.handleDrawChannel}\n                />\n            </g>\n        );\n    }\n\n    private readonly handleDragChannel = (_: React.MouseEvent, index: any, newXYValue: any) => {\n        this.setState({\n            override: {\n                index,\n                ...newXYValue,\n            },\n        });\n    };\n\n    private readonly handleDragChannelComplete = (e: React.MouseEvent, moreProps: any) => {\n        const { override } = this.state;\n        const { channels } = this.props;\n\n        if (isDefined(override)) {\n            const { index, ...rest } = override;\n            const newChannels = channels.map((each, idx) =>\n                idx === index ? { ...each, ...rest, selected: true } : each,\n            );\n\n            this.setState(\n                {\n                    override: null,\n                },\n                () => {\n                    const { onComplete } = this.props;\n                    if (onComplete !== undefined) {\n                        onComplete(e, newChannels, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleStart = (_: React.MouseEvent, xyValue: any) => {\n        const { current } = this.state;\n\n        if (isNotDefined(current) || isNotDefined(current.startXY)) {\n            this.mouseMoved = false;\n            this.setState(\n                {\n                    current: {\n                        startXY: xyValue,\n                        endXY: null,\n                    },\n                },\n                () => {\n                    const { onStart } = this.props;\n                    if (onStart !== undefined) {\n                        onStart();\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleEnd = (e: React.MouseEvent, _: any, moreProps: any) => {\n        const { current } = this.state;\n        const { channels, appearance } = this.props;\n\n        if (this.mouseMoved && isDefined(current) && isDefined(current.startXY)) {\n            if (isNotDefined(current.dy)) {\n                this.setState({\n                    current: {\n                        ...current,\n                        dy: 0,\n                    },\n                });\n            } else {\n                const newChannels = [\n                    ...channels.map((d) => ({ ...d, selected: false })),\n                    {\n                        ...current,\n                        selected: true,\n                        appearance,\n                    },\n                ];\n\n                this.setState(\n                    {\n                        current: null,\n                    },\n                    () => {\n                        const { onComplete } = this.props;\n                        if (onComplete !== undefined) {\n                            onComplete(e, newChannels, moreProps);\n                        }\n                    },\n                );\n            }\n        }\n    };\n\n    private readonly handleDrawChannel = (_: React.MouseEvent, xyValue: any) => {\n        const { current } = this.state;\n\n        if (isDefined(current) && isDefined(current.startXY)) {\n            this.mouseMoved = true;\n            if (isNotDefined(current.dy)) {\n                this.setState({\n                    current: {\n                        startXY: current.startXY,\n                        endXY: xyValue,\n                    },\n                });\n            } else {\n                const m = getSlope(current.startXY, current.endXY);\n                const b = getYIntercept(m, current.endXY);\n\n                // @ts-ignore\n                const y = m * xyValue[0] + b;\n                const dy = xyValue[1] - y;\n\n                this.setState({\n                    current: {\n                        ...current,\n                        dy,\n                    },\n                });\n            }\n        }\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}