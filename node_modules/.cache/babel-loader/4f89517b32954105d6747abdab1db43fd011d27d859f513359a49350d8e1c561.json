{"ast":null,"code":"import React, { Component } from \"react\";\nimport { AreaOnlySeries } from \"./AreaOnlySeries\";\nimport { LineSeries } from \"./LineSeries\";\n/**\n * `AreaSeries` component is similar to a `LineSeries` but with the area between the line and base filled.\n */\nexport class AreaSeries extends Component {\n  render() {\n    const {\n      baseAt,\n      connectNulls,\n      strokeStyle,\n      strokeWidth,\n      strokeDasharray,\n      fillStyle,\n      curve,\n      canvasClip,\n      yAccessor\n    } = this.props;\n    return React.createElement(\"g\", null, React.createElement(AreaOnlySeries, {\n      connectNulls: connectNulls,\n      yAccessor: yAccessor,\n      curve: curve,\n      base: baseAt,\n      fillStyle: fillStyle,\n      canvasClip: canvasClip\n    }), React.createElement(LineSeries, {\n      connectNulls: connectNulls,\n      yAccessor: yAccessor,\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      strokeDasharray: strokeDasharray,\n      curve: curve,\n      canvasClip: canvasClip,\n      highlightOnHover: false\n    }));\n  }\n}\nAreaSeries.defaultProps = {\n  fillStyle: \"rgba(33, 150, 243, 0.1)\",\n  strokeStyle: \"#2196f3\",\n  strokeWidth: 3,\n  strokeDasharray: \"Solid\"\n};","map":{"version":3,"names":["React","Component","AreaOnlySeries","LineSeries","AreaSeries","render","baseAt","connectNulls","strokeStyle","strokeWidth","strokeDasharray","fillStyle","curve","canvasClip","yAccessor","props","createElement","base","highlightOnHover","defaultProps"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\AreaSeries.tsx"],"sourcesContent":["import { strokeDashTypes } from \"@react-financial-charts/core\";\nimport { ScaleContinuousNumeric } from \"d3-scale\";\nimport { CurveFactory } from \"d3-shape\";\nimport React, { Component } from \"react\";\nimport { AreaOnlySeries } from \"./AreaOnlySeries\";\nimport { LineSeries } from \"./LineSeries\";\n\nexport interface AreaSeriesProps {\n    /**\n     * The base y value to draw the area to.\n     */\n    readonly baseAt?:\n        | number\n        | ((yScale: ScaleContinuousNumeric<number, number>, d: [number, number], moreProps: any) => number);\n    readonly canvasClip?: (context: CanvasRenderingContext2D, moreProps: any) => void;\n    /**\n     * Whether to connect the area between undefined data points.\n     */\n    readonly connectNulls?: boolean;\n    /**\n     * Color, gradient, or pattern to use for fill.\n     */\n    readonly fillStyle?:\n        | string\n        | ((context: CanvasRenderingContext2D, moreProps: any) => string | CanvasGradient | CanvasPattern);\n    /**\n     * A factory for a curve generator for the area and line.\n     */\n    readonly curve?: CurveFactory;\n    /**\n     * Color, gradient, or pattern to use for the stroke.\n     */\n    readonly strokeStyle?: string;\n    /**\n     * Stroke dash.\n     */\n    readonly strokeDasharray?: strokeDashTypes;\n    /**\n     * Stroke width.\n     */\n    readonly strokeWidth?: number;\n    /**\n     * Selector for data to plot.\n     */\n    readonly yAccessor: (data: any) => number | undefined;\n}\n\n/**\n * `AreaSeries` component is similar to a `LineSeries` but with the area between the line and base filled.\n */\nexport class AreaSeries extends Component<AreaSeriesProps> {\n    public static defaultProps: Partial<AreaSeriesProps> = {\n        fillStyle: \"rgba(33, 150, 243, 0.1)\",\n        strokeStyle: \"#2196f3\",\n        strokeWidth: 3,\n        strokeDasharray: \"Solid\",\n    };\n\n    public render() {\n        const {\n            baseAt,\n            connectNulls,\n            strokeStyle,\n            strokeWidth,\n            strokeDasharray,\n            fillStyle,\n            curve,\n            canvasClip,\n            yAccessor,\n        } = this.props;\n\n        return (\n            <g>\n                <AreaOnlySeries\n                    connectNulls={connectNulls}\n                    yAccessor={yAccessor}\n                    curve={curve}\n                    base={baseAt}\n                    fillStyle={fillStyle}\n                    canvasClip={canvasClip}\n                />\n                <LineSeries\n                    connectNulls={connectNulls}\n                    yAccessor={yAccessor}\n                    strokeStyle={strokeStyle}\n                    strokeWidth={strokeWidth}\n                    strokeDasharray={strokeDasharray}\n                    curve={curve}\n                    canvasClip={canvasClip}\n                    highlightOnHover={false}\n                />\n            </g>\n        );\n    }\n}\n"],"mappings":"AAGA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,cAAc;AA0CzC;;;AAGA,OAAM,MAAOC,UAAW,SAAQH,SAA0B;EAQ/CI,MAAMA,CAAA;IACT,MAAM;MACFC,MAAM;MACNC,YAAY;MACZC,WAAW;MACXC,WAAW;MACXC,eAAe;MACfC,SAAS;MACTC,KAAK;MACLC,UAAU;MACVC;IAAS,CACZ,GAAG,IAAI,CAACC,KAAK;IAEd,OACIf,KAAA,CAAAgB,aAAA,YACIhB,KAAA,CAAAgB,aAAA,CAACd,cAAc;MACXK,YAAY,EAAEA,YAAY;MAC1BO,SAAS,EAAEA,SAAS;MACpBF,KAAK,EAAEA,KAAK;MACZK,IAAI,EAAEX,MAAM;MACZK,SAAS,EAAEA,SAAS;MACpBE,UAAU,EAAEA;IAAU,EACxB,EACFb,KAAA,CAAAgB,aAAA,CAACb,UAAU;MACPI,YAAY,EAAEA,YAAY;MAC1BO,SAAS,EAAEA,SAAS;MACpBN,WAAW,EAAEA,WAAW;MACxBC,WAAW,EAAEA,WAAW;MACxBC,eAAe,EAAEA,eAAe;MAChCE,KAAK,EAAEA,KAAK;MACZC,UAAU,EAAEA,UAAU;MACtBK,gBAAgB,EAAE;IAAK,EACzB,CACF;EAEZ;;AA1Ccd,UAAA,CAAAe,YAAY,GAA6B;EACnDR,SAAS,EAAE,yBAAyB;EACpCH,WAAW,EAAE,SAAS;EACtBC,WAAW,EAAE,CAAC;EACdC,eAAe,EAAE;CACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}