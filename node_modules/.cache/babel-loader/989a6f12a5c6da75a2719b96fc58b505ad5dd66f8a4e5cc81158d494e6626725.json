{"ast":null,"code":"export const getClosestItemIndexes = (array, value, accessor) => {\n  let lo = 0;\n  let hi = array.length - 1;\n  while (hi - lo > 1) {\n    const mid = Math.round((lo + hi) / 2);\n    const itemAtMid = array[mid];\n    const valueAtMid = accessor(itemAtMid);\n    if (valueAtMid <= value) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  const lowItemValue = accessor(array[lo]);\n  const highItemValue = accessor(array[hi]);\n  // for Date object === does not work, so using the <= in combination with >=\n  // the same code works for both dates and numbers\n  if ((lowItemValue === null || lowItemValue === void 0 ? void 0 : lowItemValue.valueOf()) === (value === null || value === void 0 ? void 0 : value.valueOf())) {\n    hi = lo;\n  }\n  if ((highItemValue === null || highItemValue === void 0 ? void 0 : highItemValue.valueOf()) === (value === null || value === void 0 ? void 0 : value.valueOf())) {\n    lo = hi;\n  }\n  if (lowItemValue < value && highItemValue < value) {\n    lo = hi;\n  }\n  if (lowItemValue > value && highItemValue > value) {\n    hi = lo;\n  }\n  return {\n    left: lo,\n    right: hi\n  };\n};\nexport const getClosestItem = (array, value, accessor) => {\n  const {\n    left,\n    right\n  } = getClosestItemIndexes(array, value, accessor);\n  if (left === right) {\n    return array[left];\n  }\n  const leftItem = accessor(array[left]);\n  const rightItem = accessor(array[right]);\n  const closest = Math.abs(leftItem.valueOf() - value.valueOf()) < Math.abs(rightItem.valueOf() - value.valueOf()) ? array[left] : array[right];\n  return closest;\n};","map":{"version":3,"names":["getClosestItemIndexes","array","value","accessor","lo","hi","length","mid","Math","round","itemAtMid","valueAtMid","lowItemValue","highItemValue","valueOf","left","right","getClosestItem","leftItem","rightItem","closest","abs"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\core\\src\\utils\\closestItem.ts"],"sourcesContent":["export const getClosestItemIndexes = <T, TAccessor extends number | Date>(\n    array: T[],\n    value: TAccessor,\n    accessor: (item: T) => TAccessor,\n) => {\n    let lo = 0;\n    let hi = array.length - 1;\n    while (hi - lo > 1) {\n        const mid = Math.round((lo + hi) / 2);\n        const itemAtMid = array[mid];\n        const valueAtMid = accessor(itemAtMid);\n        if (valueAtMid <= value) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n\n    const lowItemValue = accessor(array[lo]);\n    const highItemValue = accessor(array[hi]);\n\n    // for Date object === does not work, so using the <= in combination with >=\n    // the same code works for both dates and numbers\n    if (lowItemValue?.valueOf() === value?.valueOf()) {\n        hi = lo;\n    }\n    if (highItemValue?.valueOf() === value?.valueOf()) {\n        lo = hi;\n    }\n\n    if (lowItemValue < value && highItemValue < value) {\n        lo = hi;\n    }\n    if (lowItemValue > value && highItemValue > value) {\n        hi = lo;\n    }\n\n    return { left: lo, right: hi };\n};\n\nexport const getClosestItem = <T, TAccessor extends number | Date>(\n    array: T[],\n    value: TAccessor,\n    accessor: (item: T) => TAccessor,\n) => {\n    const { left, right } = getClosestItemIndexes(array, value, accessor);\n    if (left === right) {\n        return array[left];\n    }\n\n    const leftItem = accessor(array[left]);\n    const rightItem = accessor(array[right]);\n\n    const closest =\n        Math.abs(leftItem.valueOf() - value.valueOf()) < Math.abs(rightItem.valueOf() - value.valueOf())\n            ? array[left]\n            : array[right];\n\n    return closest;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,qBAAqB,GAAGA,CACjCC,KAAU,EACVC,KAAgB,EAChBC,QAAgC,KAChC;EACA,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAGJ,KAAK,CAACK,MAAM,GAAG,CAAC;EACzB,OAAOD,EAAE,GAAGD,EAAE,GAAG,CAAC,EAAE;IAChB,MAAMG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,EAAE,GAAGC,EAAE,IAAI,CAAC,CAAC;IACrC,MAAMK,SAAS,GAAGT,KAAK,CAACM,GAAG,CAAC;IAC5B,MAAMI,UAAU,GAAGR,QAAQ,CAACO,SAAS,CAAC;IACtC,IAAIC,UAAU,IAAIT,KAAK,EAAE;MACrBE,EAAE,GAAGG,GAAG;KACX,MAAM;MACHF,EAAE,GAAGE,GAAG;;;EAIhB,MAAMK,YAAY,GAAGT,QAAQ,CAACF,KAAK,CAACG,EAAE,CAAC,CAAC;EACxC,MAAMS,aAAa,GAAGV,QAAQ,CAACF,KAAK,CAACI,EAAE,CAAC,CAAC;EAEzC;EACA;EACA,IAAI,CAAAO,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEE,OAAO,EAAE,OAAKZ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEY,OAAO,EAAE,GAAE;IAC9CT,EAAE,GAAGD,EAAE;;EAEX,IAAI,CAAAS,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,OAAO,EAAE,OAAKZ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEY,OAAO,EAAE,GAAE;IAC/CV,EAAE,GAAGC,EAAE;;EAGX,IAAIO,YAAY,GAAGV,KAAK,IAAIW,aAAa,GAAGX,KAAK,EAAE;IAC/CE,EAAE,GAAGC,EAAE;;EAEX,IAAIO,YAAY,GAAGV,KAAK,IAAIW,aAAa,GAAGX,KAAK,EAAE;IAC/CG,EAAE,GAAGD,EAAE;;EAGX,OAAO;IAAEW,IAAI,EAAEX,EAAE;IAAEY,KAAK,EAAEX;EAAE,CAAE;AAClC,CAAC;AAED,OAAO,MAAMY,cAAc,GAAGA,CAC1BhB,KAAU,EACVC,KAAgB,EAChBC,QAAgC,KAChC;EACA,MAAM;IAAEY,IAAI;IAAEC;EAAK,CAAE,GAAGhB,qBAAqB,CAACC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,CAAC;EACrE,IAAIY,IAAI,KAAKC,KAAK,EAAE;IAChB,OAAOf,KAAK,CAACc,IAAI,CAAC;;EAGtB,MAAMG,QAAQ,GAAGf,QAAQ,CAACF,KAAK,CAACc,IAAI,CAAC,CAAC;EACtC,MAAMI,SAAS,GAAGhB,QAAQ,CAACF,KAAK,CAACe,KAAK,CAAC,CAAC;EAExC,MAAMI,OAAO,GACTZ,IAAI,CAACa,GAAG,CAACH,QAAQ,CAACJ,OAAO,EAAE,GAAGZ,KAAK,CAACY,OAAO,EAAE,CAAC,GAAGN,IAAI,CAACa,GAAG,CAACF,SAAS,CAACL,OAAO,EAAE,GAAGZ,KAAK,CAACY,OAAO,EAAE,CAAC,GAC1Fb,KAAK,CAACc,IAAI,CAAC,GACXd,KAAK,CAACe,KAAK,CAAC;EAEtB,OAAOI,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}