{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\CandlestickChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandlestickChart = ({\n  ticker\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null); // Reference to the chart instance\n  const seriesRef = useRef(null); // Reference to the candlestick series\n\n  useEffect(() => {\n    // Create chart instance\n    chartRef.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.offsetWidth || 700,\n      height: 400,\n      layout: {\n        backgroundColor: \"#ffffff\",\n        textColor: \"#000\"\n      },\n      grid: {\n        vertLines: {\n          color: \"#eaeaea\"\n        },\n        horzLines: {\n          color: \"#eaeaea\"\n        }\n      },\n      timeScale: {\n        borderColor: \"#d1d4dc\"\n      }\n    });\n    seriesRef.current = chartRef.current.addCandlestickSeries();\n\n    // Fetch and set initial data\n    const fetchData = async () => {\n      const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\n      const data = await response.json();\n      if (data && data.dates) {\n        const formattedData = data.dates.map((time, i) => ({\n          time,\n          open: data.open[i],\n          high: data.high[i],\n          low: data.low[i],\n          close: data.close[i]\n        }));\n        seriesRef.current.setData(formattedData);\n      }\n    };\n    fetchData();\n\n    // Real-time updates\n    const intervalId = setInterval(async () => {\n      const response = await fetch(`http://localhost:5000/api/realtime?ticker=${ticker}`);\n      const latestData = await response.json();\n      if (chartRef.current && seriesRef.current) {\n        seriesRef.current.update(latestData);\n      }\n    }, 5000);\n\n    // Cleanup on unmount\n    return () => {\n      clearInterval(intervalId);\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n      }\n      seriesRef.current = null;\n    };\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartContainerRef,\n    style: {\n      position: \"relative\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s(CandlestickChart, \"XLkB4NiEtSHdipIANbfOXd0sZfg=\");\n_c = CandlestickChart;\nexport default CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","CandlestickChart","ticker","_s","chartContainerRef","chartRef","seriesRef","current","width","offsetWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","timeScale","borderColor","addCandlestickSeries","fetchData","response","fetch","data","json","dates","formattedData","map","time","i","open","high","low","close","setData","intervalId","setInterval","latestData","update","clearInterval","remove","ref","style","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/CandlestickChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { createChart } from \"lightweight-charts\";\r\n\r\nconst CandlestickChart = ({ ticker }) => {\r\n  const chartContainerRef = useRef(null);\r\n  const chartRef = useRef(null); // Reference to the chart instance\r\n  const seriesRef = useRef(null); // Reference to the candlestick series\r\n\r\n  useEffect(() => {\r\n    // Create chart instance\r\n    chartRef.current = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.offsetWidth || 700,\r\n      height: 400,\r\n      layout: { backgroundColor: \"#ffffff\", textColor: \"#000\" },\r\n      grid: { vertLines: { color: \"#eaeaea\" }, horzLines: { color: \"#eaeaea\" } },\r\n      timeScale: { borderColor: \"#d1d4dc\" },\r\n    });\r\n\r\n    seriesRef.current = chartRef.current.addCandlestickSeries();\r\n\r\n    // Fetch and set initial data\r\n    const fetchData = async () => {\r\n      const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\r\n      const data = await response.json();\r\n      if (data && data.dates) {\r\n        const formattedData = data.dates.map((time, i) => ({\r\n          time,\r\n          open: data.open[i],\r\n          high: data.high[i],\r\n          low: data.low[i],\r\n          close: data.close[i],\r\n        }));\r\n        seriesRef.current.setData(formattedData);\r\n      }\r\n    };\r\n    fetchData();\r\n\r\n    // Real-time updates\r\n    const intervalId = setInterval(async () => {\r\n      const response = await fetch(`http://localhost:5000/api/realtime?ticker=${ticker}`);\r\n      const latestData = await response.json();\r\n      if (chartRef.current && seriesRef.current) {\r\n        seriesRef.current.update(latestData);\r\n      }\r\n    }, 5000);\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      if (chartRef.current) {\r\n        chartRef.current.remove();\r\n        chartRef.current = null;\r\n      }\r\n      seriesRef.current = null;\r\n    };\r\n  }, [ticker]);\r\n\r\n  return <div ref={chartContainerRef} style={{ position: \"relative\" }} />;\r\n};\r\n\r\nexport default CandlestickChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}