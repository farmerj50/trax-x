{"ast":null,"code":"import { functor, identity, GenericChartComponent, noop, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\nexport class SingleValueTooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.renderSVG = moreProps => {\n      var _a;\n      const {\n        onClick,\n        fontFamily,\n        fontSize,\n        fontWeight,\n        labelFill,\n        labelFontWeight,\n        valueFill,\n        className,\n        displayValuesFor = SingleValueTooltip.defaultProps.displayValuesFor,\n        origin: originProp,\n        xDisplayFormat = SingleValueTooltip.defaultProps.xDisplayFormat,\n        yDisplayFormat = SingleValueTooltip.defaultProps.yDisplayFormat,\n        xLabel,\n        yLabel,\n        xAccessor = SingleValueTooltip.defaultProps.xAccessor,\n        yAccessor = SingleValueTooltip.defaultProps.yAccessor,\n        xInitDisplay,\n        yInitDisplay\n      } = this.props;\n      const {\n        chartConfig: {\n          width,\n          height\n        },\n        fullData\n      } = moreProps;\n      const currentItem = (_a = displayValuesFor(this.props, moreProps)) !== null && _a !== void 0 ? _a : last(fullData);\n      let xDisplayValue = xInitDisplay;\n      let yDisplayValue = yInitDisplay;\n      if (currentItem !== undefined) {\n        const xItem = xAccessor(currentItem);\n        if (xItem !== undefined) {\n          xDisplayValue = xDisplayFormat(xItem);\n        }\n        const yItem = yAccessor(currentItem);\n        if (yItem !== undefined) {\n          yDisplayValue = yDisplayFormat(yItem);\n        }\n      }\n      const origin = functor(originProp);\n      const [x, y] = origin(width, height);\n      return React.createElement(\"g\", {\n        className: className,\n        transform: `translate(${x}, ${y})`,\n        onClick: onClick\n      }, React.createElement(ToolTipText, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }, xLabel ? React.createElement(ToolTipTSpanLabel, {\n        x: 0,\n        dy: \"5\",\n        fill: labelFill\n      }, `${xLabel}: `) : null, xLabel ? React.createElement(\"tspan\", {\n        fill: valueFill\n      }, `${xDisplayValue} `) : null, React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight\n      }, `${yLabel} `), React.createElement(\"tspan\", {\n        fill: valueFill\n      }, yDisplayValue)));\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      svgDraw: this.renderSVG,\n      drawOn: [\"mousemove\"]\n    });\n  }\n}\nSingleValueTooltip.defaultProps = {\n  className: \"react-financial-charts-tooltip\",\n  displayValuesFor: (_, props) => props.currentItem,\n  labelFill: \"#4682B4\",\n  origin: [0, 0],\n  valueFill: \"#000000\",\n  xAccessor: noop,\n  xDisplayFormat: identity,\n  xInitDisplay: \"n/a\",\n  yAccessor: identity,\n  yDisplayFormat: format(\".2f\"),\n  yInitDisplay: \"n/a\"\n};","map":{"version":3,"names":["functor","identity","GenericChartComponent","noop","last","format","React","ToolTipText","ToolTipTSpanLabel","SingleValueTooltip","Component","constructor","renderSVG","moreProps","onClick","fontFamily","fontSize","fontWeight","labelFill","labelFontWeight","valueFill","className","displayValuesFor","defaultProps","origin","originProp","xDisplayFormat","yDisplayFormat","xLabel","yLabel","xAccessor","yAccessor","xInitDisplay","yInitDisplay","props","chartConfig","width","height","fullData","currentItem","_a","xDisplayValue","yDisplayValue","undefined","xItem","yItem","x","y","createElement","transform","dy","fill","render","clip","svgDraw","drawOn","_"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\SingleValueTooltip.tsx"],"sourcesContent":["import { functor, identity, GenericChartComponent, noop, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\n\nexport interface SingleValueTooltipProps {\n    readonly xDisplayFormat?: (value: number) => string;\n    readonly yDisplayFormat?: (value: number) => string;\n    readonly xInitDisplay?: string;\n    readonly yInitDisplay?: string;\n    readonly xLabel?: string;\n    readonly yLabel: string;\n    readonly labelFill?: string;\n    readonly labelFontWeight?: number;\n    readonly valueFill?: string;\n    readonly origin?: [number, number] | ((width: number, height: number) => [number, number]);\n    readonly className?: string;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n    readonly displayValuesFor?: (props: SingleValueTooltipProps, moreProps: any) => any;\n    readonly xAccessor?: (d: any) => number;\n    readonly yAccessor?: (d: any) => number;\n}\n\nexport class SingleValueTooltip extends React.Component<SingleValueTooltipProps> {\n    public static defaultProps = {\n        className: \"react-financial-charts-tooltip\",\n        displayValuesFor: (_: any, props: any) => props.currentItem,\n        labelFill: \"#4682B4\",\n        origin: [0, 0],\n        valueFill: \"#000000\",\n        xAccessor: noop,\n        xDisplayFormat: identity as (value: number) => string,\n        xInitDisplay: \"n/a\",\n        yAccessor: identity as (d: any) => number,\n        yDisplayFormat: format(\".2f\") as (value: number) => string,\n        yInitDisplay: \"n/a\",\n    };\n\n    public render() {\n        return <GenericChartComponent clip={false} svgDraw={this.renderSVG} drawOn={[\"mousemove\"]} />;\n    }\n\n    private readonly renderSVG = (moreProps: any) => {\n        const {\n            onClick,\n            fontFamily,\n            fontSize,\n            fontWeight,\n            labelFill,\n            labelFontWeight,\n            valueFill,\n            className,\n            displayValuesFor = SingleValueTooltip.defaultProps.displayValuesFor,\n            origin: originProp,\n            xDisplayFormat = SingleValueTooltip.defaultProps.xDisplayFormat,\n            yDisplayFormat = SingleValueTooltip.defaultProps.yDisplayFormat,\n            xLabel,\n            yLabel,\n            xAccessor = SingleValueTooltip.defaultProps.xAccessor,\n            yAccessor = SingleValueTooltip.defaultProps.yAccessor,\n            xInitDisplay,\n            yInitDisplay,\n        } = this.props;\n\n        const {\n            chartConfig: { width, height },\n            fullData,\n        } = moreProps;\n\n        const currentItem = displayValuesFor(this.props, moreProps) ?? last(fullData);\n\n        let xDisplayValue = xInitDisplay;\n        let yDisplayValue = yInitDisplay;\n        if (currentItem !== undefined) {\n            const xItem = xAccessor(currentItem);\n            if (xItem !== undefined) {\n                xDisplayValue = xDisplayFormat(xItem);\n            }\n\n            const yItem = yAccessor(currentItem);\n            if (yItem !== undefined) {\n                yDisplayValue = yDisplayFormat(yItem);\n            }\n        }\n\n        const origin = functor(originProp);\n\n        const [x, y] = origin(width, height);\n\n        return (\n            <g className={className} transform={`translate(${x}, ${y})`} onClick={onClick}>\n                <ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                    {xLabel ? (\n                        <ToolTipTSpanLabel x={0} dy=\"5\" fill={labelFill}>{`${xLabel}: `}</ToolTipTSpanLabel>\n                    ) : null}\n                    {xLabel ? <tspan fill={valueFill}>{`${xDisplayValue} `}</tspan> : null}\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight}>{`${yLabel} `}</ToolTipTSpanLabel>\n                    <tspan fill={valueFill}>{yDisplayValue}</tspan>\n                </ToolTipText>\n            </g>\n        );\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}