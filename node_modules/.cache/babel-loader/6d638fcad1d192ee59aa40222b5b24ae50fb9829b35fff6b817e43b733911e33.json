{"ast":null,"code":"import * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport class Text extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.isHover = () => {\n      return false;\n    };\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        xyProvider,\n        fontFamily,\n        fontSize,\n        fillStyle,\n        children\n      } = this.props;\n      const [x, y] = xyProvider(moreProps);\n      ctx.font = `${fontSize}px ${fontFamily}`;\n      ctx.fillStyle = fillStyle;\n      ctx.beginPath();\n      ctx.fillText(children, x, y);\n    };\n  }\n  render() {\n    const {\n      selected\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      isHover: this.isHover,\n      selected: selected,\n      canvasToDraw: getMouseCanvas,\n      canvasDraw: this.drawOnCanvas,\n      drawOn: [\"mousemove\", \"pan\", \"drag\"]\n    });\n  }\n}\nText.defaultProps = {\n  selected: false\n};","map":{"version":3,"names":["React","getMouseCanvas","GenericChartComponent","Text","Component","constructor","isHover","drawOnCanvas","ctx","moreProps","xyProvider","fontFamily","fontSize","fillStyle","children","props","x","y","font","beginPath","fillText","render","selected","createElement","canvasToDraw","canvasDraw","drawOn","defaultProps"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\components\\Text.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\n\nexport interface TextProps {\n    readonly children: string;\n    readonly fontFamily: string;\n    readonly fontSize: number;\n    readonly fillStyle: string;\n    readonly selected?: boolean;\n    readonly xyProvider: (moreProps: any) => number[];\n}\n\nexport class Text extends React.Component<TextProps> {\n    public static defaultProps = {\n        selected: false,\n    };\n\n    public render() {\n        const { selected } = this.props;\n\n        return (\n            <GenericChartComponent\n                isHover={this.isHover}\n                selected={selected}\n                canvasToDraw={getMouseCanvas}\n                canvasDraw={this.drawOnCanvas}\n                drawOn={[\"mousemove\", \"pan\", \"drag\"]}\n            />\n        );\n    }\n\n    private readonly isHover = () => {\n        return false;\n    };\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { xyProvider, fontFamily, fontSize, fillStyle, children } = this.props;\n\n        const [x, y] = xyProvider(moreProps);\n\n        ctx.font = `${fontSize}px ${fontFamily}`;\n        ctx.fillStyle = fillStyle;\n\n        ctx.beginPath();\n        ctx.fillText(children, x, y);\n    };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,8BAA8B;AAWpF,OAAM,MAAOC,IAAK,SAAQH,KAAK,CAACI,SAAoB;EAApDC,YAAA;;IAmBqB,KAAAC,OAAO,GAAG,MAAK;MAC5B,OAAO,KAAK;IAChB,CAAC;IAEgB,KAAAC,YAAY,GAAG,CAACC,GAA6B,EAAEC,SAAc,KAAI;MAC9E,MAAM;QAAEC,UAAU;QAAEC,UAAU;QAAEC,QAAQ;QAAEC,SAAS;QAAEC;MAAQ,CAAE,GAAG,IAAI,CAACC,KAAK;MAE5E,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGP,UAAU,CAACD,SAAS,CAAC;MAEpCD,GAAG,CAACU,IAAI,GAAG,GAAGN,QAAQ,MAAMD,UAAU,EAAE;MACxCH,GAAG,CAACK,SAAS,GAAGA,SAAS;MAEzBL,GAAG,CAACW,SAAS,EAAE;MACfX,GAAG,CAACY,QAAQ,CAACN,QAAQ,EAAEE,CAAC,EAAEC,CAAC,CAAC;IAChC,CAAC;EACL;EA7BWI,MAAMA,CAAA;IACT,MAAM;MAAEC;IAAQ,CAAE,GAAG,IAAI,CAACP,KAAK;IAE/B,OACIf,KAAA,CAAAuB,aAAA,CAACrB,qBAAqB;MAClBI,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBgB,QAAQ,EAAEA,QAAQ;MAClBE,YAAY,EAAEvB,cAAc;MAC5BwB,UAAU,EAAE,IAAI,CAAClB,YAAY;MAC7BmB,MAAM,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM;IAAC,EACtC;EAEV;;AAhBcvB,IAAA,CAAAwB,YAAY,GAAG;EACzBL,QAAQ,EAAE;CACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}