{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { withInRange, getPoint, animateAddPoints } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * The `SplineRangeAreaSeries` module is used to render the spline range area series.\n */\nvar SplineRangeAreaSeries = /** @class */function (_super) {\n  __extends(SplineRangeAreaSeries, _super);\n  function SplineRangeAreaSeries() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.borderDirection = '';\n    return _this;\n  }\n  /**\n   * Render SplineRangeArea Series.\n   *\n   * @param {Series} series - The series to be rendered.\n   * @param {Axis} xAxis - The x-axis of the chart.\n   * @param {Axis} yAxis - The y-axis of the chart.\n   * @param {boolean} inverted - Specifies whether the chart is inverted.\n   * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n   * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n   * @returns {void}\n   * @private\n   */\n  SplineRangeAreaSeries.prototype.render = function (series, xAxis, yAxis, inverted, pointAnimate, pointUpdate) {\n    var point;\n    var direction = '';\n    var closed = undefined;\n    var firstPoint = null;\n    var pt;\n    var betweenPt1;\n    var betweenPt2;\n    var highControlPt1;\n    var highControlPt2;\n    var realPoint = [];\n    var points = [];\n    var Index = 0;\n    var borderWidth = series.border.width ? series.border.width : 0;\n    var borderColor = series.border.color ? series.border.color : series.interior;\n    var lastPoint = '';\n    realPoint = this.filterEmptyPoints(series);\n    for (var i = 0; i < realPoint.length; i++) {\n      point = realPoint[i];\n      if (point.x === null || point.x === '') {\n        continue;\n      } else {\n        point.index = Index;\n        Index++;\n        points.push(point);\n      }\n    }\n    var previous;\n    var next;\n    var visiblePoint = this.enableComplexProperty(series);\n    var length = visiblePoint.length;\n    for (var i = 0; i < length; i++) {\n      point = visiblePoint[i];\n      point.regions = [];\n      point.symbolLocations = [];\n      next = this.getNextIndex(points, point.index - 1, series);\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n      var lowPoint = Math.min(point.low, point.high);\n      var highPoint = Math.max(point.low, point.high);\n      if (yAxis.isAxisInverse) {\n        var temp = lowPoint;\n        lowPoint = highPoint;\n        highPoint = temp;\n      }\n      var lowPtCoordinate = getPoint(point.xValue, lowPoint, xAxis, yAxis, inverted);\n      var highPtCoordinate = getPoint(point.xValue, highPoint, xAxis, yAxis, inverted);\n      point.symbolLocations.push(highPtCoordinate);\n      point.symbolLocations.push(lowPtCoordinate);\n      var rect1 = new Rect(Math.min(lowPtCoordinate.x, highPtCoordinate.x), Math.min(lowPtCoordinate.y, highPtCoordinate.y), Math.max(Math.abs(highPtCoordinate.x - lowPtCoordinate.x), series.marker.width), Math.max(Math.abs(highPtCoordinate.y - lowPtCoordinate.y), series.marker.width));\n      if (!inverted) {\n        rect1.x -= series.marker.width / 2;\n      } else {\n        rect1.y -= series.marker.width / 2;\n      }\n      point.regions.push(rect1);\n      //Path to connect the high points\n      if (point.visible && withInRange(visiblePoint[previous], point, visiblePoint[next], series)) {\n        if (firstPoint) {\n          highControlPt1 = series.drawPoints[previous].controlPoint1;\n          highControlPt2 = series.drawPoints[previous].controlPoint2;\n          pt = getPoint(point.xValue, point.high > point.low ? point.high : point.low, xAxis, yAxis, inverted);\n          betweenPt1 = getPoint(highControlPt1.x, highControlPt1.y, xAxis, yAxis, inverted);\n          betweenPt2 = getPoint(highControlPt2.x, highControlPt2.y, xAxis, yAxis, inverted);\n          direction = direction.concat('C ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ');\n          this.borderDirection += 'C ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ';\n        } else {\n          if (yAxis.isAxisInverse) {\n            direction = direction.concat('M ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ' + 'L ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ');\n            this.borderDirection += 'M ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ';\n            lastPoint = 'L ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y;\n          } else {\n            direction = direction.concat('M ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ' + 'L ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ');\n            this.borderDirection += 'M ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ';\n            lastPoint = 'L ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y;\n          }\n          closed = false;\n        }\n        if (i + 1 < visiblePoint.length && !visiblePoint[i + 1].visible || i === visiblePoint.length - 1) {\n          // Path to connect the low points\n          direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n          this.borderDirection += lastPoint;\n          lastPoint = '';\n          direction = direction.concat(' ' + 'Z');\n          closed = true;\n        }\n        firstPoint = point;\n      } else {\n        if (closed === false && i !== 0) {\n          direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n          closed = true;\n        }\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n    }\n    var name1 = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name : series.chart.element.id + '_Series_' + series.index;\n    var options = new PathOption(name1, series.interior, 0, 'transparent', series.opacity, series.dashArray, direction);\n    this[pointAnimate ? 'addPath' : 'appendLinePath'](options, series, '');\n    /**\n     * To draw border for the path directions of area\n     */\n    if (series.border.width !== 0) {\n      this[pointAnimate ? 'addPath' : 'appendLinePath'](new PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', borderWidth, borderColor, 1, series.border.dashArray, this.borderDirection), series, '');\n      this.borderDirection = '';\n    }\n    if (!pointUpdate) {\n      this.renderMarker(series);\n    }\n  };\n  /**\n   * path for rendering the low points in SplineRangeArea\n   *\n   * @returns {void}.\n   * @private\n   */\n  SplineRangeAreaSeries.prototype.closeSplineRangeAreaPath = function (visiblePoint, point, series, direction, i, xAxis, yAxis, inverted) {\n    var firstPoint = null;\n    var pt;\n    var betweenPt1;\n    var betweenPt2;\n    var lowControlPt1;\n    var lowControlPt2;\n    for (var j = i; j > 0; j--) {\n      if (visiblePoint[j].visible) {\n        point = visiblePoint[j];\n        var low = Math.min(point.low, point.high);\n        var high = Math.max(point.low, point.high);\n        if (yAxis.isAxisInverse) {\n          var temp = low;\n          low = high;\n          high = temp;\n        }\n        var lowPtCoordinate = getPoint(point.xValue, low, xAxis, yAxis, inverted);\n        var highPtCoordinate = getPoint(point.xValue, high, xAxis, yAxis, inverted);\n        if (firstPoint) {\n          lowControlPt1 = series.lowDrawPoints[j].controlPoint1;\n          lowControlPt2 = series.lowDrawPoints[j].controlPoint2;\n          pt = getPoint(point.xValue, point.low < point.high ? point.low : point.high, xAxis, yAxis, inverted);\n          betweenPt1 = getPoint(lowControlPt1.x, lowControlPt1.y, xAxis, yAxis, inverted);\n          betweenPt2 = getPoint(lowControlPt2.x, lowControlPt2.y, xAxis, yAxis, inverted);\n          if (!isNaN(betweenPt1.y) || !isNaN(betweenPt2.y)) {\n            direction = direction.concat('C ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ');\n            this.borderDirection += 'C ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ';\n          }\n        } else {\n          if (yAxis.isAxisInverse) {\n            direction = direction.concat('L ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ');\n            this.borderDirection += 'M ' + highPtCoordinate.x + ' ' + highPtCoordinate.y + ' ';\n          } else {\n            direction = direction.concat('L ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ');\n            this.borderDirection += 'M ' + lowPtCoordinate.x + ' ' + lowPtCoordinate.y + ' ';\n          }\n        }\n      } else {\n        break;\n      }\n      firstPoint = point;\n    }\n    return direction;\n  };\n  /**\n   * To animate point for spline range area series.\n   *\n   * @param {Series} series - Specifies the series.\n   * @param {number} point - Specifies the point.\n   * @returns {void}\n   * @private\n   */\n  SplineRangeAreaSeries.prototype.updateDirection = function (series, point) {\n    this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n    var _loop_1 = function (i) {\n      if (series.marker && series.marker.visible) {\n        series.points[i].symbolLocations.map(function (location, index) {\n          series.chart.markerRender.renderMarker(series, series.points[point[i]], location, index, true);\n        });\n      }\n      if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n        series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n        series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n      }\n    };\n    for (var i = 0; i < point.length; i++) {\n      _loop_1(i);\n    }\n  };\n  /**\n   * Adds a area path to equate the start and end paths.\n   *\n   * @param {PathOption} options - The options for the path.\n   * @param {Series} series - The series to which the path belongs.\n   * @param {string} clipRect - The clip rectangle for the path.\n   * @returns {void}\n   * @private\n   */\n  SplineRangeAreaSeries.prototype.addPath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    if (points.previousDirection !== '' && options.d !== '') {\n      var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var endPathCommands = options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n      var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n      if (startPathCommands.length < endPathCommands.length) {\n        for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            startPathCommands.splice(startPathCommands.length / 2 + 1, 0, 'C ' + startPathCommands[(startPathCommands.length - 1) / 2].split(' ').slice(5, 7).join(' ') + ' ' + startPathCommands[(startPathCommands.length - 1) / 2].split(' ').slice(5, 7).join(' ') + ' ' + startPathCommands[(startPathCommands.length - 1) / 2].split(' ').slice(5, 7).join(' '));\n            startPathCommands.splice(startPathCommands.length / 2 + 2, 0, 'C ' + startPathCommands[startPathCommands.length / 2 + 1].split(' ').slice(1, 3).join(' ') + ' ' + startPathCommands[startPathCommands.length / 2 + 1].split(' ').slice(1, 3).join(' ') + ' ' + startPathCommands[startPathCommands.length / 2 + 1].split(' ').slice(1, 3).join(' '));\n          }\n        }\n        animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n      } else if (startPathCommands.length > endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            endPathCommands.splice(2, 0, 'C ' + endPathCommands[1].split(' ').slice(-3).join(' ') + endPathCommands[1].split(' ').slice(-3).join(' ') + endPathCommands[1].split(' ').slice(-3).join(' '));\n            endPathCommands.splice(endPathCommands.length - 1, 0, 'C ' + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' ') + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' ') + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' '));\n          }\n        }\n        animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n      } else {\n        animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n      }\n    }\n  };\n  /**\n   * Animates the series.\n   *\n   * @param  {Series} series - Defines the series to animate.\n   * @returns {void}\n   * @private\n   */\n  SplineRangeAreaSeries.prototype.doAnimation = function (series) {\n    var option = series.animation;\n    this.doLinearAnimation(series, option);\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   */\n  SplineRangeAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series.\n     */\n    return 'SplineRangeAreaSeries';\n  };\n  /**\n   * To destroy the line series.\n   *\n   * @returns {void}\n   * @private\n   */\n  SplineRangeAreaSeries.prototype.destroy = function () {\n    /**\n     * Destroys range area series.\n     */\n  };\n  return SplineRangeAreaSeries;\n}(SplineBase);\nexport { SplineRangeAreaSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","withInRange","getPoint","animateAddPoints","PathOption","Rect","SplineBase","SplineRangeAreaSeries","_super","_this","apply","arguments","borderDirection","render","series","xAxis","yAxis","inverted","pointAnimate","pointUpdate","point","direction","closed","undefined","firstPoint","pt","betweenPt1","betweenPt2","highControlPt1","highControlPt2","realPoint","points","Index","borderWidth","border","width","borderColor","color","interior","lastPoint","filterEmptyPoints","i","length","x","index","push","previous","next","visiblePoint","enableComplexProperty","regions","symbolLocations","getNextIndex","getPreviousIndex","lowPoint","Math","min","low","high","highPoint","max","isAxisInverse","temp","lowPtCoordinate","xValue","highPtCoordinate","rect1","y","abs","marker","visible","drawPoints","controlPoint1","controlPoint2","concat","closeSplineRangeAreaPath","name1","category","chart","element","id","name","options","opacity","dashArray","renderMarker","lowControlPt1","lowControlPt2","j","lowDrawPoints","isNaN","updateDirection","requireInvertedAxis","_loop_1","map","location","markerRender","dataLabel","dataLabelModule","commonId","renderDataLabel","addPath","clipRect","appendPathElement","previousDirection","startPathCommands","match","endPathCommands","maxLength","minLength","splice","split","slice","join","redraw","duration","doAnimation","option","animation","doLinearAnimation","getModuleName","destroy"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/chart/series/spline-range-area-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { withInRange, getPoint, animateAddPoints } from '../../common/utils/helper';\nimport { PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * The `SplineRangeAreaSeries` module is used to render the spline range area series.\n */\nvar SplineRangeAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineRangeAreaSeries, _super);\n    function SplineRangeAreaSeries() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.borderDirection = '';\n        return _this;\n    }\n    /**\n     * Render SplineRangeArea Series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} inverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated or not.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated or not.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.render = function (series, xAxis, yAxis, inverted, pointAnimate, pointUpdate) {\n        var point;\n        var direction = '';\n        var closed = undefined;\n        var firstPoint = null;\n        var pt;\n        var betweenPt1;\n        var betweenPt2;\n        var highControlPt1;\n        var highControlPt2;\n        var realPoint = [];\n        var points = [];\n        var Index = 0;\n        var borderWidth = series.border.width ? series.border.width : 0;\n        var borderColor = series.border.color ? series.border.color : series.interior;\n        var lastPoint = '';\n        realPoint = this.filterEmptyPoints(series);\n        for (var i = 0; i < realPoint.length; i++) {\n            point = realPoint[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = Index;\n                Index++;\n                points.push(point);\n            }\n        }\n        var previous;\n        var next;\n        var visiblePoint = this.enableComplexProperty(series);\n        var length = visiblePoint.length;\n        for (var i = 0; i < length; i++) {\n            point = visiblePoint[i];\n            point.regions = [];\n            point.symbolLocations = [];\n            next = this.getNextIndex(points, point.index - 1, series);\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            var lowPoint = Math.min(point.low, point.high);\n            var highPoint = Math.max(point.low, point.high);\n            if (yAxis.isAxisInverse) {\n                var temp = lowPoint;\n                lowPoint = highPoint;\n                highPoint = temp;\n            }\n            var lowPtCoordinate = getPoint(point.xValue, lowPoint, xAxis, yAxis, inverted);\n            var highPtCoordinate = getPoint(point.xValue, highPoint, xAxis, yAxis, inverted);\n            point.symbolLocations.push(highPtCoordinate);\n            point.symbolLocations.push(lowPtCoordinate);\n            var rect1 = new Rect(Math.min(lowPtCoordinate.x, highPtCoordinate.x), Math.min(lowPtCoordinate.y, highPtCoordinate.y), Math.max(Math.abs(highPtCoordinate.x - lowPtCoordinate.x), series.marker.width), Math.max(Math.abs(highPtCoordinate.y - lowPtCoordinate.y), series.marker.width));\n            if (!inverted) {\n                rect1.x -= series.marker.width / 2;\n            }\n            else {\n                rect1.y -= series.marker.width / 2;\n            }\n            point.regions.push(rect1);\n            //Path to connect the high points\n            if (point.visible &&\n                withInRange(visiblePoint[previous], point, visiblePoint[next], series)) {\n                if (firstPoint) {\n                    highControlPt1 = series.drawPoints[previous].controlPoint1;\n                    highControlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt = getPoint(point.xValue, point.high > point.low ? point.high : point.low, xAxis, yAxis, inverted);\n                    betweenPt1 = getPoint(highControlPt1.x, highControlPt1.y, xAxis, yAxis, inverted);\n                    betweenPt2 = getPoint(highControlPt2.x, highControlPt2.y, xAxis, yAxis, inverted);\n                    direction = direction.concat('C ' + betweenPt1.x + ' '\n                        + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ');\n                    this.borderDirection += 'C ' + betweenPt1.x + ' '\n                        + betweenPt1.y + ' ' + betweenPt2.x + ' ' + betweenPt2.y + ' ' + pt.x + ' ' + pt.y + ' ';\n                }\n                else {\n                    if (yAxis.isAxisInverse) {\n                        direction = direction.concat('M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ' + 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ';\n                        lastPoint = 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y);\n                    }\n                    else {\n                        direction = direction.concat('M ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ' + 'L ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ';\n                        lastPoint = 'L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y);\n                    }\n                    closed = false;\n                }\n                if ((i + 1 < visiblePoint.length && !visiblePoint[i + 1].visible)\n                    || i === visiblePoint.length - 1) {\n                    // Path to connect the low points\n                    direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n                    this.borderDirection += lastPoint;\n                    lastPoint = '';\n                    direction = direction.concat(' ' + 'Z');\n                    closed = true;\n                }\n                firstPoint = point;\n            }\n            else {\n                if (closed === false && i !== 0) {\n                    direction = this.closeSplineRangeAreaPath(visiblePoint, point, series, direction, i, xAxis, yAxis, inverted);\n                    closed = true;\n                }\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n        }\n        var name1 = series.category === 'Indicator' ? series.chart.element.id + '_Indicator_' + series.index + '_' + series.name :\n            series.chart.element.id + '_Series_' + series.index;\n        var options = new PathOption(name1, series.interior, 0, 'transparent', series.opacity, series.dashArray, direction);\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](options, series, '');\n        /**\n         * To draw border for the path directions of area\n         */\n        if (series.border.width !== 0) {\n            this[pointAnimate ? 'addPath' : 'appendLinePath'](new PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', borderWidth, borderColor, 1, series.border.dashArray, this.borderDirection), series, '');\n            this.borderDirection = '';\n        }\n        if (!pointUpdate) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * path for rendering the low points in SplineRangeArea\n     *\n     * @returns {void}.\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.closeSplineRangeAreaPath = function (visiblePoint, point, series, direction, i, xAxis, yAxis, inverted) {\n        var firstPoint = null;\n        var pt;\n        var betweenPt1;\n        var betweenPt2;\n        var lowControlPt1;\n        var lowControlPt2;\n        for (var j = i; j > 0; j--) {\n            if (visiblePoint[j].visible) {\n                point = visiblePoint[j];\n                var low = Math.min(point.low, point.high);\n                var high = Math.max(point.low, point.high);\n                if (yAxis.isAxisInverse) {\n                    var temp = low;\n                    low = high;\n                    high = temp;\n                }\n                var lowPtCoordinate = getPoint(point.xValue, low, xAxis, yAxis, inverted);\n                var highPtCoordinate = getPoint(point.xValue, high, xAxis, yAxis, inverted);\n                if (firstPoint) {\n                    lowControlPt1 = series.lowDrawPoints[j].controlPoint1;\n                    lowControlPt2 = series.lowDrawPoints[j].controlPoint2;\n                    pt = getPoint(point.xValue, point.low < point.high ? point.low : point.high, xAxis, yAxis, inverted);\n                    betweenPt1 = getPoint(lowControlPt1.x, lowControlPt1.y, xAxis, yAxis, inverted);\n                    betweenPt2 = getPoint(lowControlPt2.x, lowControlPt2.y, xAxis, yAxis, inverted);\n                    if (!isNaN(betweenPt1.y) || !isNaN(betweenPt2.y)) {\n                        direction = direction.concat('C ' + betweenPt2.x + ' '\n                            + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ');\n                        this.borderDirection += 'C ' + betweenPt2.x + ' '\n                            + betweenPt2.y + ' ' + betweenPt1.x + ' ' + betweenPt1.y + ' ' + pt.x + ' ' + pt.y + ' ';\n                    }\n                }\n                else {\n                    if (yAxis.isAxisInverse) {\n                        direction = direction.concat('L ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (highPtCoordinate.x) + ' ' + (highPtCoordinate.y) + ' ';\n                    }\n                    else {\n                        direction = direction.concat('L ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ');\n                        this.borderDirection += 'M ' + (lowPtCoordinate.x) + ' ' + (lowPtCoordinate.y) + ' ';\n                    }\n                }\n            }\n            else {\n                break;\n            }\n            firstPoint = point;\n        }\n        return direction;\n    };\n    /**\n     * To animate point for spline range area series.\n     *\n     * @param {Series} series - Specifies the series.\n     * @param {number} point - Specifies the point.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.updateDirection = function (series, point) {\n        this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n        var _loop_1 = function (i) {\n            if (series.marker && series.marker.visible) {\n                series.points[i].symbolLocations.map(function (location, index) {\n                    series.chart.markerRender.renderMarker(series, series.points[point[i]], location, index, true);\n                });\n            }\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        };\n        for (var i = 0; i < point.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.addPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        startPathCommands.splice(((startPathCommands.length) / 2) + 1, 0, 'C ' + ((startPathCommands[(startPathCommands.length - 1) / 2].split(' ')).slice(5, 7)).join(' ') + ' ' + ((startPathCommands[(startPathCommands.length - 1) / 2].split(' ')).slice(5, 7)).join(' ') + ' ' + ((startPathCommands[(startPathCommands.length - 1) / 2].split(' ')).slice(5, 7)).join(' '));\n                        startPathCommands.splice((startPathCommands.length / 2) + 2, 0, 'C ' + (startPathCommands[(startPathCommands.length / 2) + 1].split(' ')).slice(1, 3).join(' ') + ' ' + (startPathCommands[(startPathCommands.length / 2) + 1].split(' ')).slice(1, 3).join(' ') + ' ' + (startPathCommands[(startPathCommands.length / 2) + 1].split(' ')).slice(1, 3).join(' '));\n                    }\n                }\n                animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        endPathCommands.splice(2, 0, 'C ' + endPathCommands[1].split(' ').slice(-3).join(' ') + endPathCommands[1].split(' ').slice(-3).join(' ') + endPathCommands[1].split(' ').slice(-3).join(' '));\n                        endPathCommands.splice(endPathCommands.length - 1, 0, 'C ' + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' ') + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' ') + endPathCommands[endPathCommands.length - 2].split(' ').slice(-4).join(' '));\n                    }\n                }\n                animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.doAnimation = function (series) {\n        var option = series.animation;\n        this.doLinearAnimation(series, option);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    SplineRangeAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'SplineRangeAreaSeries';\n    };\n    /**\n     * To destroy the line series.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineRangeAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroys range area series.\n         */\n    };\n    return SplineRangeAreaSeries;\n}(SplineBase));\nexport { SplineRangeAreaSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}