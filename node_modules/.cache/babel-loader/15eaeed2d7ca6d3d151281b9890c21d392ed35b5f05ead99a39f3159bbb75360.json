{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\SentimentChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, DateTime, Legend, Tooltip } from \"@syncfusion/ej2-react-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SentimentChart = ({\n  ticker\n}) => {\n  _s();\n  const [sentimentData, setSentimentData] = useState([]);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchSentimentData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/sentiment-plot?ticker=${ticker}&start_date=2023-01-01&end_date=2023-12-31`);\n        const data = await response.json();\n        if (!data.dates) {\n          setError(\"No sentiment data available.\");\n          return;\n        }\n        const formattedSentimentData = data.dates.map((date, index) => ({\n          x: new Date(date),\n          positive: data.positive[index],\n          negative: data.negative[index],\n          neutral: data.neutral[index]\n        }));\n        setSentimentData(formattedSentimentData);\n        setError(\"\");\n      } catch (err) {\n        console.error(`Error fetching sentiment data:`, err);\n        setError(\"Failed to load sentiment data.\");\n      }\n    };\n    fetchSentimentData();\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-chart-container\",\n    style: {\n      width: \"400px\",\n      height: \"300px\"\n    },\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChartComponent, {\n      id: `sentiment-chart-${ticker}`,\n      primaryXAxis: {\n        valueType: \"DateTime\",\n        labelFormat: \"MMM dd\",\n        intervalType: \"Months\"\n      },\n      primaryYAxis: {\n        title: \"Sentiment Count\"\n      },\n      tooltip: {\n        enable: true\n      },\n      legendSettings: {\n        visible: true\n      },\n      height: \"300px\",\n      width: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(Inject, {\n        services: [LineSeries, DateTime, Legend, Tooltip]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SeriesCollectionDirective, {\n        children: [/*#__PURE__*/_jsxDEV(SeriesDirective, {\n          dataSource: sentimentData,\n          xName: \"x\",\n          yName: \"positive\",\n          type: \"Line\",\n          name: \"Positive\",\n          marker: {\n            visible: true\n          },\n          width: 2,\n          color: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeriesDirective, {\n          dataSource: sentimentData,\n          xName: \"x\",\n          yName: \"negative\",\n          type: \"Line\",\n          name: \"Negative\",\n          marker: {\n            visible: true\n          },\n          width: 2,\n          color: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeriesDirective, {\n          dataSource: sentimentData,\n          xName: \"x\",\n          yName: \"neutral\",\n          type: \"Line\",\n          name: \"Neutral\",\n          marker: {\n            visible: true\n          },\n          width: 2,\n          color: \"gray\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(SentimentChart, \"yXYlednnK+mk1TG2tYvok/TtY44=\");\n_c = SentimentChart;\nexport default SentimentChart;\nvar _c;\n$RefreshReg$(_c, \"SentimentChart\");","map":{"version":3,"names":["React","useEffect","useState","ChartComponent","SeriesCollectionDirective","SeriesDirective","Inject","LineSeries","DateTime","Legend","Tooltip","jsxDEV","_jsxDEV","SentimentChart","ticker","_s","sentimentData","setSentimentData","error","setError","fetchSentimentData","response","fetch","data","json","dates","formattedSentimentData","map","date","index","x","Date","positive","negative","neutral","err","console","className","style","width","height","children","color","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","id","primaryXAxis","valueType","labelFormat","intervalType","primaryYAxis","title","tooltip","enable","legendSettings","visible","services","dataSource","xName","yName","type","name","marker","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/SentimentChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ChartComponent,\r\n  SeriesCollectionDirective,\r\n  SeriesDirective,\r\n  Inject,\r\n  LineSeries,\r\n  DateTime,\r\n  Legend,\r\n  Tooltip,\r\n} from \"@syncfusion/ej2-react-charts\";\r\n\r\nconst SentimentChart = ({ ticker }) => {\r\n  const [sentimentData, setSentimentData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchSentimentData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5000/api/sentiment-plot?ticker=${ticker}&start_date=2023-01-01&end_date=2023-12-31`\r\n        );\r\n        const data = await response.json();\r\n\r\n        if (!data.dates) {\r\n          setError(\"No sentiment data available.\");\r\n          return;\r\n        }\r\n\r\n        const formattedSentimentData = data.dates.map((date, index) => ({\r\n          x: new Date(date),\r\n          positive: data.positive[index],\r\n          negative: data.negative[index],\r\n          neutral: data.neutral[index],\r\n        }));\r\n\r\n        setSentimentData(formattedSentimentData);\r\n        setError(\"\");\r\n      } catch (err) {\r\n        console.error(`Error fetching sentiment data:`, err);\r\n        setError(\"Failed to load sentiment data.\");\r\n      }\r\n    };\r\n\r\n    fetchSentimentData();\r\n  }, [ticker]);\r\n\r\n  return (\r\n    <div className=\"sentiment-chart-container\" style={{ width: \"400px\", height: \"300px\" }}>\r\n      {error ? (\r\n        <p style={{ color: \"red\", textAlign: \"center\" }}>{error}</p>\r\n      ) : (\r\n        <ChartComponent\r\n          id={`sentiment-chart-${ticker}`}\r\n          primaryXAxis={{ valueType: \"DateTime\", labelFormat: \"MMM dd\", intervalType: \"Months\" }}\r\n          primaryYAxis={{ title: \"Sentiment Count\" }}\r\n          tooltip={{ enable: true }}\r\n          legendSettings={{ visible: true }}\r\n          height=\"300px\"\r\n          width=\"100%\"\r\n        >\r\n          <Inject services={[LineSeries, DateTime, Legend, Tooltip]} />\r\n          <SeriesCollectionDirective>\r\n            <SeriesDirective\r\n              dataSource={sentimentData}\r\n              xName=\"x\"\r\n              yName=\"positive\"\r\n              type=\"Line\"\r\n              name=\"Positive\"\r\n              marker={{ visible: true }}\r\n              width={2}\r\n              color=\"green\"\r\n            />\r\n            <SeriesDirective\r\n              dataSource={sentimentData}\r\n              xName=\"x\"\r\n              yName=\"negative\"\r\n              type=\"Line\"\r\n              name=\"Negative\"\r\n              marker={{ visible: true }}\r\n              width={2}\r\n              color=\"red\"\r\n            />\r\n            <SeriesDirective\r\n              dataSource={sentimentData}\r\n              xName=\"x\"\r\n              yName=\"neutral\"\r\n              type=\"Line\"\r\n              name=\"Neutral\"\r\n              marker={{ visible: true }}\r\n              width={2}\r\n              color=\"gray\"\r\n            />\r\n          </SeriesCollectionDirective>\r\n        </ChartComponent>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}