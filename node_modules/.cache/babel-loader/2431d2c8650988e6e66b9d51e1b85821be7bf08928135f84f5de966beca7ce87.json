{"ast":null,"code":"import * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { isHovering2 } from \"./InteractiveStraightLine\";\nexport class ClickableShape extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        strokeStyle,\n        strokeWidth,\n        hovering,\n        textBox\n      } = this.props;\n      const [x, y] = this.helper(this.props, moreProps, ctx);\n      this.closeIcon = {\n        x,\n        y\n      };\n      ctx.beginPath();\n      ctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n      ctx.strokeStyle = strokeStyle;\n      const halfWidth = textBox.closeIcon.width / 2;\n      ctx.moveTo(x - halfWidth, y - halfWidth);\n      ctx.lineTo(x + halfWidth, y + halfWidth);\n      ctx.moveTo(x - halfWidth, y + halfWidth);\n      ctx.lineTo(x + halfWidth, y - halfWidth);\n      ctx.stroke();\n    };\n    this.isHover = moreProps => {\n      const {\n        mouseXY\n      } = moreProps;\n      if (this.closeIcon) {\n        const {\n          textBox\n        } = this.props;\n        const {\n          x,\n          y\n        } = this.closeIcon;\n        const halfWidth = textBox.closeIcon.width / 2;\n        const start1 = [x - halfWidth, y - halfWidth];\n        const end1 = [x + halfWidth, y + halfWidth];\n        const start2 = [x - halfWidth, y + halfWidth];\n        const end2 = [x + halfWidth, y - halfWidth];\n        if (isHovering2(start1, end1, mouseXY, 3) || isHovering2(start2, end2, mouseXY, 3)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    this.helper = (props, moreProps, ctx) => {\n      const {\n        yValue,\n        text,\n        textBox\n      } = props;\n      const {\n        fontFamily,\n        fontStyle,\n        fontWeight,\n        fontSize\n      } = props;\n      ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n      const {\n        chartConfig: {\n          yScale\n        }\n      } = moreProps;\n      const x = textBox.left + textBox.padding.left + ctx.measureText(text).width + textBox.padding.right + textBox.closeIcon.padding.left + textBox.closeIcon.width / 2;\n      const y = yScale(yValue);\n      return [x, y];\n    };\n  }\n  render() {\n    const {\n      interactiveCursorClass,\n      onHover,\n      onUnHover,\n      onClick,\n      show\n    } = this.props;\n    if (!show) {\n      return null;\n    }\n    return React.createElement(GenericChartComponent, {\n      interactiveCursorClass: interactiveCursorClass,\n      isHover: this.isHover,\n      onClickWhenHover: onClick,\n      canvasDraw: this.drawOnCanvas,\n      canvasToDraw: getMouseCanvas,\n      onHover: onHover,\n      onUnHover: onUnHover,\n      drawOn: [\"pan\", \"mousemove\", \"drag\"]\n    });\n  }\n}\nClickableShape.defaultProps = {\n  show: false,\n  strokeWidth: 1\n};","map":{"version":3,"names":["React","getMouseCanvas","GenericChartComponent","isHovering2","ClickableShape","Component","constructor","drawOnCanvas","ctx","moreProps","strokeStyle","strokeWidth","hovering","textBox","props","x","y","helper","closeIcon","beginPath","lineWidth","halfWidth","width","moveTo","lineTo","stroke","isHover","mouseXY","start1","end1","start2","end2","yValue","text","fontFamily","fontStyle","fontWeight","fontSize","font","chartConfig","yScale","left","padding","measureText","right","render","interactiveCursorClass","onHover","onUnHover","onClick","show","createElement","onClickWhenHover","canvasDraw","canvasToDraw","drawOn","defaultProps"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\components\\ClickableShape.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { isHovering2 } from \"./InteractiveStraightLine\";\n\nexport interface ClickableShapeProps {\n    readonly fontWeight: string;\n    readonly fontFamily: string;\n    readonly fontStyle: string;\n    readonly fontSize: number;\n    readonly strokeStyle: string;\n    readonly strokeWidth: number;\n    readonly text: string;\n    readonly textBox: {\n        readonly closeIcon: any;\n        readonly left: number;\n        readonly padding: any;\n    };\n    readonly hovering?: boolean;\n    readonly interactiveCursorClass?: string;\n    readonly show?: boolean;\n    readonly onHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onUnHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onClick?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly yValue: number;\n}\n\nexport class ClickableShape extends React.Component<ClickableShapeProps> {\n    public static defaultProps = {\n        show: false,\n        strokeWidth: 1,\n    };\n\n    private closeIcon: any;\n\n    public render() {\n        const { interactiveCursorClass, onHover, onUnHover, onClick, show } = this.props;\n\n        if (!show) {\n            return null;\n        }\n\n        return (\n            <GenericChartComponent\n                interactiveCursorClass={interactiveCursorClass}\n                isHover={this.isHover}\n                onClickWhenHover={onClick}\n                canvasDraw={this.drawOnCanvas}\n                canvasToDraw={getMouseCanvas}\n                onHover={onHover}\n                onUnHover={onUnHover}\n                drawOn={[\"pan\", \"mousemove\", \"drag\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { strokeStyle, strokeWidth, hovering, textBox } = this.props;\n\n        const [x, y] = this.helper(this.props, moreProps, ctx);\n\n        this.closeIcon = { x, y };\n        ctx.beginPath();\n\n        ctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        const halfWidth = textBox.closeIcon.width / 2;\n        ctx.moveTo(x - halfWidth, y - halfWidth);\n        ctx.lineTo(x + halfWidth, y + halfWidth);\n        ctx.moveTo(x - halfWidth, y + halfWidth);\n        ctx.lineTo(x + halfWidth, y - halfWidth);\n        ctx.stroke();\n    };\n\n    private readonly isHover = (moreProps: any) => {\n        const { mouseXY } = moreProps;\n        if (this.closeIcon) {\n            const { textBox } = this.props;\n            const { x, y } = this.closeIcon;\n            const halfWidth = textBox.closeIcon.width / 2;\n\n            const start1 = [x - halfWidth, y - halfWidth];\n            const end1 = [x + halfWidth, y + halfWidth];\n            const start2 = [x - halfWidth, y + halfWidth];\n            const end2 = [x + halfWidth, y - halfWidth];\n\n            if (isHovering2(start1, end1, mouseXY, 3) || isHovering2(start2, end2, mouseXY, 3)) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    private readonly helper = (props: ClickableShapeProps, moreProps: any, ctx: CanvasRenderingContext2D) => {\n        const { yValue, text, textBox } = props;\n        const { fontFamily, fontStyle, fontWeight, fontSize } = props;\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        const {\n            chartConfig: { yScale },\n        } = moreProps;\n\n        const x =\n            textBox.left +\n            textBox.padding.left +\n            ctx.measureText(text).width +\n            textBox.padding.right +\n            textBox.closeIcon.padding.left +\n            textBox.closeIcon.width / 2;\n\n        const y = yScale(yValue);\n\n        return [x, y];\n    };\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,EAAEC,qBAAqB,QAAQ,8BAA8B;AACpF,SAASC,WAAW,QAAQ,2BAA2B;AAwBvD,OAAM,MAAOC,cAAe,SAAQJ,KAAK,CAACK,SAA8B;EAAxEC,YAAA;;IA6BqB,KAAAC,YAAY,GAAG,CAACC,GAA6B,EAAEC,SAAc,KAAI;MAC9E,MAAM;QAAEC,WAAW;QAAEC,WAAW;QAAEC,QAAQ;QAAEC;MAAO,CAAE,GAAG,IAAI,CAACC,KAAK;MAElE,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAG,IAAI,CAACC,MAAM,CAAC,IAAI,CAACH,KAAK,EAAEL,SAAS,EAAED,GAAG,CAAC;MAEtD,IAAI,CAACU,SAAS,GAAG;QAAEH,CAAC;QAAEC;MAAC,CAAE;MACzBR,GAAG,CAACW,SAAS,EAAE;MAEfX,GAAG,CAACY,SAAS,GAAGR,QAAQ,GAAGD,WAAW,GAAG,CAAC,GAAGA,WAAW;MACxDH,GAAG,CAACE,WAAW,GAAGA,WAAW;MAC7B,MAAMW,SAAS,GAAGR,OAAO,CAACK,SAAS,CAACI,KAAK,GAAG,CAAC;MAC7Cd,GAAG,CAACe,MAAM,CAACR,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;MACxCb,GAAG,CAACgB,MAAM,CAACT,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;MACxCb,GAAG,CAACe,MAAM,CAACR,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;MACxCb,GAAG,CAACgB,MAAM,CAACT,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;MACxCb,GAAG,CAACiB,MAAM,EAAE;IAChB,CAAC;IAEgB,KAAAC,OAAO,GAAIjB,SAAc,IAAI;MAC1C,MAAM;QAAEkB;MAAO,CAAE,GAAGlB,SAAS;MAC7B,IAAI,IAAI,CAACS,SAAS,EAAE;QAChB,MAAM;UAAEL;QAAO,CAAE,GAAG,IAAI,CAACC,KAAK;QAC9B,MAAM;UAAEC,CAAC;UAAEC;QAAC,CAAE,GAAG,IAAI,CAACE,SAAS;QAC/B,MAAMG,SAAS,GAAGR,OAAO,CAACK,SAAS,CAACI,KAAK,GAAG,CAAC;QAE7C,MAAMM,MAAM,GAAG,CAACb,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;QAC7C,MAAMQ,IAAI,GAAG,CAACd,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;QAC3C,MAAMS,MAAM,GAAG,CAACf,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;QAC7C,MAAMU,IAAI,GAAG,CAAChB,CAAC,GAAGM,SAAS,EAAEL,CAAC,GAAGK,SAAS,CAAC;QAE3C,IAAIlB,WAAW,CAACyB,MAAM,EAAEC,IAAI,EAAEF,OAAO,EAAE,CAAC,CAAC,IAAIxB,WAAW,CAAC2B,MAAM,EAAEC,IAAI,EAAEJ,OAAO,EAAE,CAAC,CAAC,EAAE;UAChF,OAAO,IAAI;;;MAGnB,OAAO,KAAK;IAChB,CAAC;IAEgB,KAAAV,MAAM,GAAG,CAACH,KAA0B,EAAEL,SAAc,EAAED,GAA6B,KAAI;MACpG,MAAM;QAAEwB,MAAM;QAAEC,IAAI;QAAEpB;MAAO,CAAE,GAAGC,KAAK;MACvC,MAAM;QAAEoB,UAAU;QAAEC,SAAS;QAAEC,UAAU;QAAEC;MAAQ,CAAE,GAAGvB,KAAK;MAC7DN,GAAG,CAAC8B,IAAI,GAAG,GAAGH,SAAS,IAAIC,UAAU,IAAIC,QAAQ,MAAMH,UAAU,EAAE;MAEnE,MAAM;QACFK,WAAW,EAAE;UAAEC;QAAM;MAAE,CAC1B,GAAG/B,SAAS;MAEb,MAAMM,CAAC,GACHF,OAAO,CAAC4B,IAAI,GACZ5B,OAAO,CAAC6B,OAAO,CAACD,IAAI,GACpBjC,GAAG,CAACmC,WAAW,CAACV,IAAI,CAAC,CAACX,KAAK,GAC3BT,OAAO,CAAC6B,OAAO,CAACE,KAAK,GACrB/B,OAAO,CAACK,SAAS,CAACwB,OAAO,CAACD,IAAI,GAC9B5B,OAAO,CAACK,SAAS,CAACI,KAAK,GAAG,CAAC;MAE/B,MAAMN,CAAC,GAAGwB,MAAM,CAACR,MAAM,CAAC;MAExB,OAAO,CAACjB,CAAC,EAAEC,CAAC,CAAC;IACjB,CAAC;EACL;EA/EW6B,MAAMA,CAAA;IACT,MAAM;MAAEC,sBAAsB;MAAEC,OAAO;MAAEC,SAAS;MAAEC,OAAO;MAAEC;IAAI,CAAE,GAAG,IAAI,CAACpC,KAAK;IAEhF,IAAI,CAACoC,IAAI,EAAE;MACP,OAAO,IAAI;;IAGf,OACIlD,KAAA,CAAAmD,aAAA,CAACjD,qBAAqB;MAClB4C,sBAAsB,EAAEA,sBAAsB;MAC9CpB,OAAO,EAAE,IAAI,CAACA,OAAO;MACrB0B,gBAAgB,EAAEH,OAAO;MACzBI,UAAU,EAAE,IAAI,CAAC9C,YAAY;MAC7B+C,YAAY,EAAErD,cAAc;MAC5B8C,OAAO,EAAEA,OAAO;MAChBC,SAAS,EAAEA,SAAS;MACpBO,MAAM,EAAE,CAAC,KAAK,EAAE,WAAW,EAAE,MAAM;IAAC,EACtC;EAEV;;AA1BcnD,cAAA,CAAAoD,YAAY,GAAG;EACzBN,IAAI,EAAE,KAAK;EACXvC,WAAW,EAAE;CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}