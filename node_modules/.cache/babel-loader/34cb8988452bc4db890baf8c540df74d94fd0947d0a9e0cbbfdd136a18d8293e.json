{"ast":null,"code":"import * as React from \"react\";\nimport { isDefined, isNotDefined, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { generateLine, isHovering } from \"./InteractiveStraightLine\";\nexport class ChannelWithArea extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        strokeStyle,\n        strokeWidth,\n        fillStyle\n      } = this.props;\n      const {\n        line1,\n        line2\n      } = helper(this.props, moreProps);\n      if (line1 !== undefined) {\n        const {\n          x1,\n          y1,\n          x2,\n          y2\n        } = line1;\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        if (line2 !== undefined) {\n          const {\n            y1: line2Y1,\n            y2: line2Y2\n          } = line2;\n          ctx.beginPath();\n          ctx.moveTo(x1, line2Y1);\n          ctx.lineTo(x2, line2Y2);\n          ctx.stroke();\n          ctx.fillStyle = fillStyle;\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.lineTo(x2, line2Y2);\n          ctx.lineTo(x1, line2Y1);\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n    };\n    this.isHover = moreProps => {\n      const {\n        tolerance,\n        onHover\n      } = this.props;\n      if (onHover !== undefined) {\n        const {\n          line1,\n          line2\n        } = helper(this.props, moreProps);\n        if (line1 !== undefined && line2 !== undefined) {\n          const {\n            mouseXY,\n            xScale,\n            chartConfig: {\n              yScale\n            }\n          } = moreProps;\n          const line1Hovering = isHovering({\n            x1Value: line1.x1,\n            y1Value: line1.y1,\n            x2Value: line1.x2,\n            y2Value: line1.y2,\n            type: \"LINE\",\n            mouseXY,\n            tolerance,\n            xScale,\n            yScale\n          });\n          const line2Hovering = isHovering({\n            x1Value: line2.x1,\n            y1Value: line2.y1,\n            x2Value: line2.x2,\n            y2Value: line2.y2,\n            type: \"LINE\",\n            mouseXY,\n            tolerance,\n            xScale,\n            yScale\n          });\n          return line1Hovering || line2Hovering;\n        }\n      }\n      return false;\n    };\n  }\n  render() {\n    const {\n      selected,\n      interactiveCursorClass\n    } = this.props;\n    const {\n      onDragStart,\n      onDrag,\n      onDragComplete,\n      onHover,\n      onUnHover\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      isHover: this.isHover,\n      canvasToDraw: getMouseCanvas,\n      canvasDraw: this.drawOnCanvas,\n      interactiveCursorClass: interactiveCursorClass,\n      selected: selected,\n      onDragStart: onDragStart,\n      onDrag: onDrag,\n      onDragComplete: onDragComplete,\n      onHover: onHover,\n      onUnHover: onUnHover,\n      drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n    });\n  }\n}\nChannelWithArea.defaultProps = {\n  type: \"LINE\",\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false\n};\nfunction getLines(props, moreProps) {\n  const {\n    startXY,\n    endXY,\n    dy,\n    type\n  } = props;\n  const {\n    xScale\n  } = moreProps;\n  if (isNotDefined(startXY) || isNotDefined(endXY)) {\n    return {};\n  }\n  const line1 = generateLine({\n    type,\n    start: startXY,\n    end: endXY,\n    xScale,\n    yScale: undefined\n  });\n  const line2 = isDefined(dy) ? Object.assign(Object.assign({}, line1), {\n    y1: line1.y1 + dy,\n    y2: line1.y2 + dy\n  }) : undefined;\n  return {\n    line1,\n    line2\n  };\n}\nfunction helper(props, moreProps) {\n  const lines = getLines(props, moreProps);\n  const {\n    xScale,\n    chartConfig: {\n      yScale\n    }\n  } = moreProps;\n  const line1 = lines.line1 !== undefined ? {\n    x1: xScale(lines.line1.x1),\n    y1: yScale(lines.line1.y1),\n    x2: xScale(lines.line1.x2),\n    y2: yScale(lines.line1.y2)\n  } : undefined;\n  const line2 = lines.line2 !== undefined ? {\n    x1: line1.x1,\n    y1: yScale(lines.line2.y1),\n    x2: line1.x2,\n    y2: yScale(lines.line2.y2)\n  } : undefined;\n  return {\n    lines,\n    line1,\n    line2\n  };\n}","map":{"version":3,"names":["React","isDefined","isNotDefined","getMouseCanvas","GenericChartComponent","generateLine","isHovering","ChannelWithArea","Component","constructor","drawOnCanvas","ctx","moreProps","strokeStyle","strokeWidth","fillStyle","props","line1","line2","helper","undefined","x1","y1","x2","y2","lineWidth","beginPath","moveTo","lineTo","stroke","line2Y1","line2Y2","closePath","fill","isHover","tolerance","onHover","mouseXY","xScale","chartConfig","yScale","line1Hovering","x1Value","y1Value","x2Value","y2Value","type","line2Hovering","render","selected","interactiveCursorClass","onDragStart","onDrag","onDragComplete","onUnHover","createElement","canvasToDraw","canvasDraw","drawOn","defaultProps","getLines","startXY","endXY","dy","start","end","Object","assign","lines"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\components\\ChannelWithArea.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { isDefined, isNotDefined, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { generateLine, isHovering } from \"./InteractiveStraightLine\";\n\nexport interface ChannelWithAreaProps {\n    readonly startXY?: number[];\n    readonly endXY?: number[];\n    readonly dy?: number;\n    readonly interactiveCursorClass?: string;\n    readonly strokeStyle: string;\n    readonly strokeWidth: number;\n    readonly fillStyle: string;\n    readonly type:\n        | \"XLINE\" // extends from -Infinity to +Infinity\n        | \"RAY\" // extends to +/-Infinity in one direction\n        | \"LINE\"; // extends between the set bounds\n    readonly onDragStart?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDrag?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDragComplete?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onUnHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly defaultClassName?: string;\n    readonly tolerance: number;\n    readonly selected: boolean;\n}\n\nexport class ChannelWithArea extends React.Component<ChannelWithAreaProps> {\n    public static defaultProps = {\n        type: \"LINE\",\n        strokeWidth: 1,\n        tolerance: 4,\n        selected: false,\n    };\n\n    public render() {\n        const { selected, interactiveCursorClass } = this.props;\n        const { onDragStart, onDrag, onDragComplete, onHover, onUnHover } = this.props;\n\n        return (\n            <GenericChartComponent\n                isHover={this.isHover}\n                canvasToDraw={getMouseCanvas}\n                canvasDraw={this.drawOnCanvas}\n                interactiveCursorClass={interactiveCursorClass}\n                selected={selected}\n                onDragStart={onDragStart}\n                onDrag={onDrag}\n                onDragComplete={onDragComplete}\n                onHover={onHover}\n                onUnHover={onUnHover}\n                drawOn={[\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { strokeStyle, strokeWidth, fillStyle } = this.props;\n        const { line1, line2 } = helper(this.props, moreProps);\n\n        if (line1 !== undefined) {\n            const { x1, y1, x2, y2 } = line1;\n\n            ctx.lineWidth = strokeWidth;\n            ctx.strokeStyle = strokeStyle;\n\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n\n            if (line2 !== undefined) {\n                const { y1: line2Y1, y2: line2Y2 } = line2;\n\n                ctx.beginPath();\n                ctx.moveTo(x1, line2Y1);\n                ctx.lineTo(x2, line2Y2);\n                ctx.stroke();\n\n                ctx.fillStyle = fillStyle;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n\n                ctx.lineTo(x2, y2);\n                ctx.lineTo(x2, line2Y2);\n                ctx.lineTo(x1, line2Y1);\n\n                ctx.closePath();\n                ctx.fill();\n            }\n        }\n    };\n\n    private readonly isHover = (moreProps: any) => {\n        const { tolerance, onHover } = this.props;\n\n        if (onHover !== undefined) {\n            const { line1, line2 } = helper(this.props, moreProps);\n\n            if (line1 !== undefined && line2 !== undefined) {\n                const {\n                    mouseXY,\n                    xScale,\n                    chartConfig: { yScale },\n                } = moreProps;\n\n                const line1Hovering = isHovering({\n                    x1Value: line1.x1,\n                    y1Value: line1.y1,\n                    x2Value: line1.x2,\n                    y2Value: line1.y2,\n                    type: \"LINE\",\n                    mouseXY,\n                    tolerance,\n                    xScale,\n                    yScale,\n                });\n\n                const line2Hovering = isHovering({\n                    x1Value: line2.x1,\n                    y1Value: line2.y1,\n                    x2Value: line2.x2,\n                    y2Value: line2.y2,\n                    type: \"LINE\",\n                    mouseXY,\n                    tolerance,\n                    xScale,\n                    yScale,\n                });\n\n                return line1Hovering || line2Hovering;\n            }\n        }\n        return false;\n    };\n}\n\nfunction getLines(props: ChannelWithAreaProps, moreProps: any) {\n    const { startXY, endXY, dy, type } = props;\n    const { xScale } = moreProps;\n\n    if (isNotDefined(startXY) || isNotDefined(endXY)) {\n        return {};\n    }\n\n    const line1 = generateLine({\n        type,\n        start: startXY,\n        end: endXY,\n        xScale,\n        yScale: undefined,\n    });\n\n    const line2 = isDefined(dy)\n        ? {\n              ...line1,\n              y1: line1.y1 + dy,\n              y2: line1.y2 + dy,\n          }\n        : undefined;\n\n    return {\n        line1,\n        line2,\n    };\n}\n\nfunction helper(props: ChannelWithAreaProps, moreProps: any) {\n    const lines = getLines(props, moreProps);\n    const {\n        xScale,\n        chartConfig: { yScale },\n    } = moreProps;\n\n    const line1 =\n        lines.line1 !== undefined\n            ? {\n                  x1: xScale(lines.line1.x1),\n                  y1: yScale(lines.line1.y1),\n                  x2: xScale(lines.line1.x2),\n                  y2: yScale(lines.line1.y2),\n              }\n            : undefined;\n\n    const line2 =\n        lines.line2 !== undefined\n            ? {\n                  x1: line1!.x1,\n                  y1: yScale(lines.line2.y1),\n                  x2: line1!.x2,\n                  y2: yScale(lines.line2.y2),\n              }\n            : undefined;\n\n    return {\n        lines,\n        line1,\n        line2,\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}