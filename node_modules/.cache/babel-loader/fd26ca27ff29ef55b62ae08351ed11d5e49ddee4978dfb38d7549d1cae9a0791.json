{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * AccumulationChart Selection src file\n */\nimport { Browser, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { indexFinder, getElement } from '../../common/utils/helper';\nimport { Index } from '../../common/model/base';\nimport { BaseSelection } from '../../common/user-interaction/selection';\nimport { selectionComplete } from '../../common/model/constants';\n/**\n * The `AccumulationSelection` module handles selection for the accumulation chart.\n *\n * @private\n */\nvar AccumulationSelection = /** @class */function (_super) {\n  __extends(AccumulationSelection, _super);\n  function AccumulationSelection(accumulation) {\n    var _this = _super.call(this, accumulation) || this;\n    _this.accumulation = accumulation;\n    _this.renderer = accumulation.renderer;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   *\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.addEventListener = function () {\n    if (this.accumulation.isDestroyed) {\n      return;\n    }\n    //let cancelEvent: string = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.accumulation.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.accumulation.on('click', this.mouseClick, this);\n  };\n  /**\n   * UnBinding events for selection module.\n   *\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.removeEventListener = function () {\n    if (this.accumulation.isDestroyed) {\n      return;\n    }\n    this.accumulation.off(Browser.touchMoveEvent, this.mouseMove);\n    this.accumulation.off('click', this.mouseClick);\n  };\n  /**\n   * To initialize the private variables.\n   *\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.initPrivateVariables = function (accumulation) {\n    this.styleId = accumulation.element.id + '_ej2_chart_selection';\n    this.unselected = accumulation.element.id + '_ej2_deselected';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n  };\n  /**\n   * Invoke selection for rendered chart.\n   *\n   * @param {AccumulationChart} accumulation - Define the chart to invoke the selection.\n   * @returns {void}\n   * @private\n   */\n  AccumulationSelection.prototype.invokeSelection = function (accumulation) {\n    this.initPrivateVariables(accumulation);\n    this.series = extend({}, accumulation.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = accumulation.selectionMode;\n    this.selectDataIndex(this.concatIndexes(accumulation.selectedDataIndexes, this.selectedDataIndexes), accumulation);\n  };\n  /**\n   * To get series selection style by series.\n   *\n   * @param {AccumulationSeriesModel} series - The series for which to get the selection style.\n   * @param {number} point - The index of the point within the series.\n   * @returns {string} - The selection style for the specified series.\n   */\n  AccumulationSelection.prototype.generateStyle = function (series, point) {\n    return series.selectionStyle || this.styleId + '_series_' + series.index + '_point_' + point;\n  };\n  // /**\n  //  * To get series selection style while hovering legend.\n  //  *\n  //  * @param {AccumulationSeriesModel} series - The series for which to get the selection style.\n  //  * @param {string} eventType - The event type indicating the legend interaction (e.g., hover).\n  //  * @returns {string} - The selection style for the specified series.\n  //  */\n  // private generateLegendClickStyle(series: AccumulationSeriesModel, eventType: string): string {\n  //     if (eventType === 'mousemove') {\n  //         this.styleId = this.accumulation.element.id + '_ej2_chart_highlight';\n  //     } else if (eventType === 'click') {\n  //         this.styleId = this.accumulation.element.id + '_ej2_chart_selection';\n  //     }\n  //     return (series.selectionStyle || this.styleId + '_series_' + (<AccumulationSeries>series).index);\n  // }\n  /**\n   * To get elements by index, series.\n   *\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {AccumulationSeriesModel} series - The series for which to get the elements.\n   * @param {Index} index - The index of the element within the series.\n   * @returns {Element[]} - The elements corresponding to the specified index and series.\n   */\n  AccumulationSelection.prototype.findElements = function (accumulation, series, index) {\n    return [this.getElementByIndex(index)];\n  };\n  /**\n   * To get series point element by index.\n   *\n   * @param {Index} index - The index of the element within the series.\n   * @returns {Element} - The elements corresponding to the specified index.\n   */\n  AccumulationSelection.prototype.getElementByIndex = function (index) {\n    var elementId = this.control.element.id + '_Series_' + index.series + '_Point_' + index.point;\n    return document.getElementById(elementId);\n  };\n  /**\n   * To find the selected element.\n   *\n   * @param {Element} targetElement - The target element to check for selection.\n   * @param {string} eventType - The type of event that triggered the selection.\n   * @returns {boolean} - Indicates whether the element is selected.\n   * @private\n   */\n  AccumulationSelection.prototype.isAlreadySelected = function (targetElement, eventType) {\n    if (eventType === 'mousemove') {\n      this.currentMode = this.accumulation.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.accumulation.element.id + '_ej2_chart_highlight';\n    } else if (eventType === 'click') {\n      this.currentMode = this.accumulation.selectionMode;\n      this.styleId = this.accumulation.element.id + '_ej2_chart_selection';\n    }\n    if (this.accumulation.highlightMode !== 'None' && this.accumulation.selectionMode === 'None') {\n      if (eventType === 'click') {\n        return false;\n      }\n    }\n    if (this.accumulation.highlightMode !== 'None' && this.previousSelectedElement && this.previousSelectedElement[0]) {\n      var parentNodeId = targetElement.parentNode.id;\n      var isValidElement = void 0;\n      if (targetElement.parentNode) {\n        isValidElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n      for (var i = 0; i < this.previousSelectedElement.length; i++) {\n        if (this.previousSelectedElement[i].hasAttribute('class')) {\n          if (this.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1 && (isValidElement || eventType === 'click')) {\n            this.previousSelectedElement[i].removeAttribute('class');\n            this.addOrRemoveIndex(this.highlightDataIndexes, indexFinder(this.previousSelectedElement[i].id));\n          } else if (!isValidElement && this.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(indexFinder(this.previousSelectedElement[i].id), this.accumulation, this.previousSelectedElement[i]);\n          }\n        }\n      }\n    }\n    return true;\n  };\n  /**\n   * To calculate selected elements on mouse click or touch.\n   *\n   * @private\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {Event} event - The event object representing the mouse click or touch event.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.mouseClick = function (accumulation, event) {\n    this.calculateSelectedElements(accumulation, event.target, event.type);\n  };\n  /**\n   * To calculate selected elements on mouse click or touch.\n   *\n   * @private\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {Element} targetEle - The target element that triggered the event.\n   * @param {string} eventType - The type of event that triggered the selection.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.calculateSelectedElements = function (accumulation, targetEle, eventType) {\n    if (isNullOrUndefined(targetEle)) {\n      return;\n    }\n    if (accumulation.highlightMode === 'None' && accumulation.selectionMode === 'None' || targetEle.id.indexOf(accumulation.element.id + '_') === -1) {\n      return;\n    }\n    if (eventType === 'mousemove') {\n      if (!isNullOrUndefined(targetEle.parentNode) && targetEle.parentNode.hasAttribute('class') && (targetEle.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetEle.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n    if (targetEle.getAttribute('id').indexOf('_connector_') > -1) {\n      return;\n    } else {\n      this.isAlreadySelected(targetEle, eventType);\n      if (this.accumulation.selectionMode === 'Point' && eventType === 'mousemove' && this.accumulation.accumulationLegendModule && this.accumulation.accumulationHighlightModule.highlightDataIndexes && this.accumulation.accumulationHighlightModule.highlightDataIndexes.length > 0 && targetEle.id.indexOf('_chart_legend_') === -1 && targetEle.id.indexOf('_Series_') === -1) {\n        for (var i = 0; i < this.accumulation.accumulationHighlightModule.previousSelectedElement.length; i++) {\n          this.removeStyles(this.accumulation.accumulationHighlightModule.previousSelectedElement, indexFinder(this.accumulation.accumulationHighlightModule.previousSelectedElement[i].id));\n          this.blurEffect(this.accumulation.element.id, this.accumulation.visibleSeries);\n        }\n      }\n      if (targetEle.id.indexOf('_Series_') > -1 || targetEle.id.indexOf('_datalabel_') > -1) {\n        this.performSelection(indexFinder(targetEle.id), accumulation, targetEle);\n      }\n    }\n  };\n  /**\n   * To perform the selection process based on index and element.\n   *\n   * @param {Index} index - The index of the data to select.\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {Element} element - The element representing the selected data.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.performSelection = function (index, accumulation, element) {\n    element = element.id.indexOf('datalabel') > -1 ? accumulation.getSeriesElement().childNodes[index.series].childNodes[index.point] : element;\n    switch (this.currentMode) {\n      case 'Point':\n        if (!isNaN(index.point)) {\n          this.selection(accumulation, index, [element]);\n          this.selectionComplete(accumulation, accumulation.series[0]);\n          this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n        }\n        break;\n    }\n  };\n  /**\n   * Method to get the selected data index.\n   *\n   * @private\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {AccumulationSeries} series - The series to retrieve the selected data from index.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.selectionComplete = function (accumulation, series) {\n    var pointIndex;\n    var selectedPointValues = [];\n    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n      pointIndex = this.selectedDataIndexes[i].point;\n      if (!isNaN(pointIndex)) {\n        selectedPointValues.push({\n          x: series.dataSource[pointIndex][series.xName],\n          y: series.points[pointIndex].y,\n          seriesIndex: this.selectedDataIndexes[i].series,\n          pointIndex: pointIndex\n        });\n      }\n    }\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    accumulation.trigger(selectionComplete, args);\n  };\n  /**\n   * To select the element by index. Adding or removing selection style class name.\n   *\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {Index} index - The index of the element to select or deselect.\n   * @param {Element[]} selectedElements - The array of selected elements.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.selection = function (accumulation, index, selectedElements) {\n    if (!accumulation.isMultiSelect && this.styleId.indexOf('highlight') === -1 && accumulation.selectionMode !== 'None') {\n      this.removeMultiSelectEelments(accumulation, this.selectedDataIndexes, index, accumulation.series);\n    }\n    var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n    if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id, index.point)) > -1) {\n      this.removeStyles(selectedElements, index);\n      if (this.styleId.indexOf('highlight') > 0 && accumulation.highlightMode !== 'None') {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index);\n      }\n      if (accumulation.enableBorderOnMouseMove) {\n        var borderElement = document.getElementById(selectedElements[0].id.split('_')[0] + 'PointHover_Border');\n        if (!isNullOrUndefined(borderElement)) {\n          this.removeSvgClass(borderElement, borderElement.getAttribute('class'));\n        }\n      }\n    } else {\n      this.previousSelectedElement = accumulation.highlightMode !== 'None' ? selectedElements : [];\n      if (className.indexOf('selection') < 0) {\n        this.applyStyles(selectedElements, index);\n      }\n      if (accumulation.enableBorderOnMouseMove) {\n        var borderElement = document.getElementById(selectedElements[0].id.split('_')[0] + 'PointHover_Border');\n        if (!isNullOrUndefined(borderElement)) {\n          this.removeSvgClass(borderElement, borderElement.getAttribute('class'));\n          this.addSvgClass(borderElement, selectedElements[0].getAttribute('class'));\n        }\n      }\n      if (this.styleId.indexOf('highlight') > 0 && accumulation.highlightMode !== 'None') {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, true);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, true);\n      }\n    }\n  };\n  /**\n   * To redraw the selection process on accumulation chart refresh.\n   *\n   * @private\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.redrawSelection = function (accumulation) {\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(accumulation, this.highlightDataIndexes);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(accumulation, this.selectedDataIndexes);\n    }\n    this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n    this.selectDataIndex(selectedDataIndexes, accumulation);\n  };\n  /**\n   * To remove the selected elements style classes by indexes.\n   *\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @param {Index[]} indexes - The array of indexes representing elements to remove selection styles.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.removeSelectedElements = function (accumulation, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.removeStyles([this.getElementByIndex(index)], index);\n    }\n    var points = accumulation.visibleSeries[0].points;\n    for (var i = 0; i < points.length; i++) {\n      var index = new Index(0, points[i].index);\n      this.removeStyles([this.getElementByIndex(index)], index);\n    }\n  };\n  /**\n   * To perform the selection for legend elements.\n   *\n   * @private\n   */\n  AccumulationSelection.prototype.legendSelection = function (accumulation, series, pointIndex, targetEle, eventType) {\n    if (eventType === 'mousemove') {\n      if (targetEle.id.indexOf('text') > 1) {\n        targetEle = getElement(targetEle.id.replace('text', 'shape'));\n      }\n      if (targetEle.hasAttribute('class') && (targetEle.getAttribute('class').indexOf('highlight') > -1 || targetEle.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.accumulation.highlightMode;\n    }\n    var isPreSelected = this.isAlreadySelected(targetEle, eventType);\n    if (isPreSelected) {\n      //let element: Element = <Element>accumulation.getSeriesElement().childNodes[series as number].childNodes[pointIndex as number];\n      //let seriesStyle: string = this.generateLegendClickStyle(accumulation.visibleSeries[series as number], eventType);\n      var seriesElements = accumulation.getSeriesElement().childNodes[series].childNodes[pointIndex];\n      this.selection(accumulation, new Index(series, pointIndex), [seriesElements]);\n      this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n    }\n  };\n  /**\n   * To select the element by selected data indexes.\n   *\n   * @param {Index[]} indexes - The array of indexes representing elements to select.\n   * @param {AccumulationChart} accumulation - The accumulation chart control.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.selectDataIndex = function (indexes, accumulation) {\n    var element;\n    for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {\n      var index = indexes_2[_i];\n      element = this.getElementByIndex(index);\n      if (element) {\n        this.performSelection(index, accumulation, element);\n      }\n    }\n  };\n  /**\n   * To remove the selection styles for multi selection process.\n   *\n   * @param {AccumulationChart} accumulation - The Accumulation Chart control.\n   * @param {Index[]} index - The array of indexes representing elements to remove selection styles for multi selection process.\n   * @param {Index} currentIndex - The current index to remove from selection.\n   * @param {AccumulationSeriesModel[]} seriesCollection - The array of visible series in the accumulation chart.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.removeMultiSelectEelments = function (accumulation, index, currentIndex, seriesCollection) {\n    var series;\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n      if (!this.checkEquals(index[i], currentIndex)) {\n        this.removeStyles(this.findElements(accumulation, series, index[i]), index[i]);\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * To apply the opacity effect for accumulation chart series elements.\n   *\n   * @param  {string} pieId - The id of the pie element.\n   * @param  {AccumulationSeries[]} visibleSeries - The array of visible series in the accumulation chart.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.blurEffect = function (pieId, visibleSeries) {\n    var visibility = this.checkVisibility(this.highlightDataIndexes) || this.checkVisibility(this.selectedDataIndexes); // legend click scenario\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n      if (series.visible) {\n        this.checkSelectionElements(document.getElementById(pieId + '_SeriesCollection'), this.generateStyle(series), visibility);\n      }\n    }\n  };\n  /**\n   * To check selection elements by style class name.\n   *\n   * @param  {Element} element - The element to check selection elements by style class name.\n   * @param  {string} className - The class name to check.\n   * @param  {boolean} visibility - Indicates whether the element should be visible.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.checkSelectionElements = function (element, className, visibility) {\n    var children = element.childNodes[0].childNodes;\n    var legendShape;\n    var elementClass;\n    var parentClass;\n    //let selectElement: Element = element;\n    for (var i = 0; i < children.length; i++) {\n      elementClass = children[i].getAttribute('class') || '';\n      parentClass = children[i].parentNode.getAttribute('class') || '';\n      if (this.accumulation.selectionMode !== 'None' || this.accumulation.highlightMode !== 'None') {\n        className = elementClass.indexOf('selection') > 0 || elementClass.indexOf('highlight') > 0 ? elementClass : className;\n        className = parentClass.indexOf('selection') > 0 || parentClass.indexOf('highlight') > 0 ? parentClass : className;\n      }\n      if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        this.removeSvgClass(children[i], this.unselected);\n      }\n      if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        // selectElement = children[i as number] as HTMLElement;\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n      if (this.control.accumulationLegendModule && this.control.legendSettings.visible) {\n        legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + i);\n        if (legendShape) {\n          if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n            this.addSvgClass(legendShape, this.unselected);\n          } else {\n            this.removeSvgClass(legendShape, this.unselected);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * To apply selection style for elements.\n   *\n   * @param  {Element[]} elements - The array of elements to apply the selection style.\n   * @param  {Index} index - The index to apply the selection style.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.applyStyles = function (elements, index) {\n    var accumulationTooltip = this.control.accumulationTooltipModule;\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      var legendShape = void 0;\n      if (element) {\n        if (this.control.accumulationLegendModule && this.control.legendSettings.visible) {\n          legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n          this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id, index.point));\n        }\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        var opacity = accumulationTooltip && accumulationTooltip.previousPoints.length > 0 && accumulationTooltip.previousPoints[0].point.index !== index.point ? accumulationTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n        element.setAttribute('opacity', opacity.toString());\n        this.addSvgClass(element, this.getSelectionClass(element.id, index.point));\n      }\n    }\n  };\n  /**\n   * To get selection style class name by id.\n   *\n   * @param  {string} id - The id of the element to retrieve the selection style class name.\n   * @param  {number} point - The point for the selection.\n   * @returns {string} - The selection style class name.\n   */\n  AccumulationSelection.prototype.getSelectionClass = function (id, point) {\n    return this.generateStyle(this.control.series[indexFinder(id).series], point);\n  };\n  /**\n   * To remove selection style for elements.\n   *\n   * @param  {Element[]} elements - The array of elements from which to remove the selection style.\n   * @param  {Index} index - The index to remove from the selection.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.removeStyles = function (elements, index) {\n    var accumulationTooltip = this.control.accumulationTooltipModule;\n    var legendShape;\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      if (element) {\n        if (this.control.accumulationLegendModule && this.control.legendSettings.visible) {\n          legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n          this.removeSvgClass(legendShape, this.getSelectionClass(legendShape.id, index.point));\n        }\n        var opacity = accumulationTooltip && accumulationTooltip.previousPoints.length > 0 && accumulationTooltip.previousPoints[0].point.index === index.point ? accumulationTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n        element.setAttribute('opacity', opacity.toString());\n        this.removeSvgClass(element, this.getSelectionClass(element.id, index.point));\n      }\n    }\n  };\n  /**\n   * To apply or remove selected elements index.\n   *\n   * @param  {Index[]} indexes - The array of indexes representing elements to apply or remove selection.\n   * @param  {Index} index - The index to add or remove from the selection.\n   * @param  {boolean} add - Indicates whether to add or remove the index.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.addOrRemoveIndex = function (indexes, index, add) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.checkEquals(indexes[i], index)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (add) {\n      indexes.push(index);\n    }\n  };\n  /**\n   * To check two index, point and series are equal.\n   *\n   * @param  {Index} first - The first index.\n   * @param  {Index} second - The second index.\n   * @returns {boolean} - Indicates whether the two indexes are equal.\n   */\n  AccumulationSelection.prototype.checkEquals = function (first, second) {\n    return first.point === second.point && first.series === second.series;\n  };\n  /**\n   *The mouse move event.\n   *\n   * @private\n   * @param  {PointerEvent | TouchEvent} event - The mouse move event or touch event.\n   * @returns {void}\n   */\n  AccumulationSelection.prototype.mouseMove = function (event) {\n    var accumulation = this.accumulation;\n    var targetElement = event.target;\n    if (accumulation.highlightMode !== 'None') {\n      if (!isNullOrUndefined(targetElement)) {\n        if (event.target.id.indexOf('text') > 1) {\n          targetElement = getElement(event.target.id.replace('text', 'shape'));\n        }\n        if (targetElement.hasAttribute('class') && targetElement.getAttribute('class').indexOf('highlight') > -1) {\n          return;\n        }\n        this.calculateSelectedElements(accumulation, event.target, event.type);\n        return;\n      }\n    }\n    if (accumulation.selectionMode === 'None') {\n      return;\n    }\n  };\n  // /**\n  //  * To check selected points are visibility.\n  //  *\n  //  * @param  {Indexes[]} selectedDataIndexes - The array of indexes representing selected points.\n  //  * @returns {boolean} - Indicates whether the selected points are visible.\n  //  */\n  // private checkPointVisibility(selectedDataIndexes: Indexes[]): boolean {\n  //     let visible: boolean = false;\n  //     for (const data of selectedDataIndexes) {\n  //         if (pointByIndex(data.point, <AccPoints[]>this.control.visibleSeries[0].points).visible) {\n  //             visible = true;\n  //             break;\n  //         }\n  //     }\n  //     return visible;\n  // }\n  /**\n   * Get module name.\n   *\n   * @private\n   * @returns {string} - Returns the module name.\n   */\n  AccumulationSelection.prototype.getModuleName = function () {\n    return 'AccumulationSelection';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  AccumulationSelection.prototype.destroy = function () {\n    // Destroy method performed here\n    this.removeEventListener();\n  };\n  return AccumulationSelection;\n}(BaseSelection);\nexport { AccumulationSelection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","extend","isNullOrUndefined","indexFinder","getElement","Index","BaseSelection","selectionComplete","AccumulationSelection","_super","accumulation","_this","call","renderer","addEventListener","isDestroyed","on","touchMoveEvent","mouseMove","mouseClick","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","selectedDataIndexes","rectPoints","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectionMode","selectDataIndex","concatIndexes","generateStyle","point","selectionStyle","index","findElements","getElementByIndex","elementId","control","document","getElementById","isAlreadySelected","targetElement","eventType","highlightMode","highlightDataIndexes","previousSelectedElement","parentNodeId","parentNode","isValidElement","indexOf","i","length","hasAttribute","getAttribute","removeAttribute","addOrRemoveIndex","performSelection","event","calculateSelectedElements","target","type","targetEle","accumulationLegendModule","accumulationHighlightModule","removeStyles","blurEffect","getSeriesElement","childNodes","isNaN","selection","pointIndex","selectedPointValues","push","x","dataSource","xName","y","points","seriesIndex","args","name","selectedDataValues","cancel","trigger","selectedElements","isMultiSelect","removeMultiSelectEelments","className","getSelectionClass","enableBorderOnMouseMove","borderElement","split","removeSvgClass","applyStyles","addSvgClass","redrawSelection","removeSelectedElements","indexes","_i","indexes_1","legendSelection","replace","isPreSelected","seriesElements","indexes_2","currentIndex","seriesCollection","checkEquals","splice","pieId","visibility","checkVisibility","visibleSeries_1","visible","checkSelectionElements","children","legendShape","elementClass","parentClass","legendSettings","elements","accumulationTooltip","accumulationTooltipModule","elements_1","opacity","previousPoints","svgTooltip","setAttribute","toString","elements_2","add","first","second","getModuleName","destroy"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * AccumulationChart Selection src file\n */\nimport { Browser, extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { indexFinder, getElement } from '../../common/utils/helper';\nimport { Index } from '../../common/model/base';\nimport { BaseSelection } from '../../common/user-interaction/selection';\nimport { selectionComplete } from '../../common/model/constants';\n/**\n * The `AccumulationSelection` module handles selection for the accumulation chart.\n *\n * @private\n */\nvar AccumulationSelection = /** @class */ (function (_super) {\n    __extends(AccumulationSelection, _super);\n    function AccumulationSelection(accumulation) {\n        var _this = _super.call(this, accumulation) || this;\n        _this.accumulation = accumulation;\n        _this.renderer = accumulation.renderer;\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     *\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.addEventListener = function () {\n        if (this.accumulation.isDestroyed) {\n            return;\n        }\n        //let cancelEvent: string = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.accumulation.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.accumulation.on('click', this.mouseClick, this);\n    };\n    /**\n     * UnBinding events for selection module.\n     *\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeEventListener = function () {\n        if (this.accumulation.isDestroyed) {\n            return;\n        }\n        this.accumulation.off(Browser.touchMoveEvent, this.mouseMove);\n        this.accumulation.off('click', this.mouseClick);\n    };\n    /**\n     * To initialize the private variables.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.initPrivateVariables = function (accumulation) {\n        this.styleId = accumulation.element.id + '_ej2_chart_selection';\n        this.unselected = accumulation.element.id + '_ej2_deselected';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n    };\n    /**\n     * Invoke selection for rendered chart.\n     *\n     * @param {AccumulationChart} accumulation - Define the chart to invoke the selection.\n     * @returns {void}\n     * @private\n     */\n    AccumulationSelection.prototype.invokeSelection = function (accumulation) {\n        this.initPrivateVariables(accumulation);\n        this.series = extend({}, accumulation.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = accumulation.selectionMode;\n        this.selectDataIndex(this.concatIndexes(accumulation.selectedDataIndexes, this.selectedDataIndexes), accumulation);\n    };\n    /**\n     * To get series selection style by series.\n     *\n     * @param {AccumulationSeriesModel} series - The series for which to get the selection style.\n     * @param {number} point - The index of the point within the series.\n     * @returns {string} - The selection style for the specified series.\n     */\n    AccumulationSelection.prototype.generateStyle = function (series, point) {\n        return (series.selectionStyle || this.styleId + '_series_' + series.index + '_point_' + point);\n    };\n    // /**\n    //  * To get series selection style while hovering legend.\n    //  *\n    //  * @param {AccumulationSeriesModel} series - The series for which to get the selection style.\n    //  * @param {string} eventType - The event type indicating the legend interaction (e.g., hover).\n    //  * @returns {string} - The selection style for the specified series.\n    //  */\n    // private generateLegendClickStyle(series: AccumulationSeriesModel, eventType: string): string {\n    //     if (eventType === 'mousemove') {\n    //         this.styleId = this.accumulation.element.id + '_ej2_chart_highlight';\n    //     } else if (eventType === 'click') {\n    //         this.styleId = this.accumulation.element.id + '_ej2_chart_selection';\n    //     }\n    //     return (series.selectionStyle || this.styleId + '_series_' + (<AccumulationSeries>series).index);\n    // }\n    /**\n     * To get elements by index, series.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {AccumulationSeriesModel} series - The series for which to get the elements.\n     * @param {Index} index - The index of the element within the series.\n     * @returns {Element[]} - The elements corresponding to the specified index and series.\n     */\n    AccumulationSelection.prototype.findElements = function (accumulation, series, index) {\n        return [this.getElementByIndex(index)];\n    };\n    /**\n     * To get series point element by index.\n     *\n     * @param {Index} index - The index of the element within the series.\n     * @returns {Element} - The elements corresponding to the specified index.\n     */\n    AccumulationSelection.prototype.getElementByIndex = function (index) {\n        var elementId = this.control.element.id + '_Series_' + index.series + '_Point_' + index.point;\n        return document.getElementById(elementId);\n    };\n    /**\n     * To find the selected element.\n     *\n     * @param {Element} targetElement - The target element to check for selection.\n     * @param {string} eventType - The type of event that triggered the selection.\n     * @returns {boolean} - Indicates whether the element is selected.\n     * @private\n     */\n    AccumulationSelection.prototype.isAlreadySelected = function (targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            this.currentMode = this.accumulation.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.accumulation.element.id + '_ej2_chart_highlight';\n        }\n        else if (eventType === 'click') {\n            this.currentMode = this.accumulation.selectionMode;\n            this.styleId = this.accumulation.element.id + '_ej2_chart_selection';\n        }\n        if (this.accumulation.highlightMode !== 'None' && this.accumulation.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if ((this.accumulation.highlightMode !== 'None' && this.previousSelectedElement && this.previousSelectedElement[0])) {\n            var parentNodeId = targetElement.parentNode.id;\n            var isValidElement = void 0;\n            if (targetElement.parentNode) {\n                isValidElement = (parentNodeId.indexOf('SeriesGroup') > 0 ||\n                    parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedElement.length; i++) {\n                if (this.previousSelectedElement[i].hasAttribute('class')) {\n                    if (this.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1 && (isValidElement || eventType === 'click')) {\n                        this.previousSelectedElement[i].removeAttribute('class');\n                        this.addOrRemoveIndex(this.highlightDataIndexes, indexFinder(this.previousSelectedElement[i].id));\n                    }\n                    else if (!isValidElement && this.previousSelectedElement[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(indexFinder(this.previousSelectedElement[i].id), this.accumulation, this.previousSelectedElement[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    /**\n     * To calculate selected elements on mouse click or touch.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Event} event - The event object representing the mouse click or touch event.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.mouseClick = function (accumulation, event) {\n        this.calculateSelectedElements(accumulation, event.target, event.type);\n    };\n    /**\n     * To calculate selected elements on mouse click or touch.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Element} targetEle - The target element that triggered the event.\n     * @param {string} eventType - The type of event that triggered the selection.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.calculateSelectedElements = function (accumulation, targetEle, eventType) {\n        if (isNullOrUndefined(targetEle)) {\n            return;\n        }\n        if ((accumulation.highlightMode === 'None' && accumulation.selectionMode === 'None') ||\n            targetEle.id.indexOf(accumulation.element.id + '_') === -1) {\n            return;\n        }\n        if (eventType === 'mousemove') {\n            if (!isNullOrUndefined(targetEle.parentNode) && targetEle.parentNode.hasAttribute('class') &&\n                (targetEle.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetEle.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        if (targetEle.getAttribute('id').indexOf('_connector_') > -1) {\n            return;\n        }\n        else {\n            this.isAlreadySelected(targetEle, eventType);\n            if (this.accumulation.selectionMode === 'Point' && eventType === 'mousemove' && this.accumulation.accumulationLegendModule\n                && this.accumulation.accumulationHighlightModule.highlightDataIndexes\n                && this.accumulation.accumulationHighlightModule.highlightDataIndexes.length > 0 &&\n                targetEle.id.indexOf('_chart_legend_') === -1 && targetEle.id.indexOf('_Series_') === -1) {\n                for (var i = 0; i < this.accumulation.accumulationHighlightModule.previousSelectedElement.length; i++) {\n                    this.removeStyles(this.accumulation.accumulationHighlightModule.previousSelectedElement, indexFinder(this.accumulation.accumulationHighlightModule.previousSelectedElement[i].id));\n                    this.blurEffect(this.accumulation.element.id, this.accumulation.visibleSeries);\n                }\n            }\n            if (targetEle.id.indexOf('_Series_') > -1 || targetEle.id.indexOf('_datalabel_') > -1) {\n                this.performSelection(indexFinder(targetEle.id), accumulation, targetEle);\n            }\n        }\n    };\n    /**\n     * To perform the selection process based on index and element.\n     *\n     * @param {Index} index - The index of the data to select.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Element} element - The element representing the selected data.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.performSelection = function (index, accumulation, element) {\n        element = element.id.indexOf('datalabel') > -1 ?\n            accumulation.getSeriesElement().childNodes[index.series].childNodes[index.point]\n            : element;\n        switch (this.currentMode) {\n            case 'Point':\n                if (!isNaN(index.point)) {\n                    this.selection(accumulation, index, [element]);\n                    this.selectionComplete(accumulation, accumulation.series[0]);\n                    this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n                }\n                break;\n        }\n    };\n    /**\n     * Method to get the selected data index.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {AccumulationSeries} series - The series to retrieve the selected data from index.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.selectionComplete = function (accumulation, series) {\n        var pointIndex;\n        var selectedPointValues = [];\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = this.selectedDataIndexes[i].point;\n            if (!isNaN(pointIndex)) {\n                selectedPointValues.push({\n                    x: series.dataSource[pointIndex][series.xName], y: series.points[pointIndex].y,\n                    seriesIndex: this.selectedDataIndexes[i].series, pointIndex: pointIndex\n                });\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        accumulation.trigger(selectionComplete, args);\n    };\n    /**\n     * To select the element by index. Adding or removing selection style class name.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Index} index - The index of the element to select or deselect.\n     * @param {Element[]} selectedElements - The array of selected elements.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.selection = function (accumulation, index, selectedElements) {\n        if (!accumulation.isMultiSelect && this.styleId.indexOf('highlight') === -1 &&\n            accumulation.selectionMode !== 'None') {\n            this.removeMultiSelectEelments(accumulation, this.selectedDataIndexes, index, accumulation.series);\n        }\n        var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n        if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id, index.point)) > -1) {\n            this.removeStyles(selectedElements, index);\n            if (this.styleId.indexOf('highlight') > 0 && accumulation.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index);\n            }\n            if (accumulation.enableBorderOnMouseMove) {\n                var borderElement = document.getElementById(selectedElements[0].id.split('_')[0] + 'PointHover_Border');\n                if (!isNullOrUndefined(borderElement)) {\n                    this.removeSvgClass(borderElement, borderElement.getAttribute('class'));\n                }\n            }\n        }\n        else {\n            this.previousSelectedElement = accumulation.highlightMode !== 'None' ? selectedElements : [];\n            if (className.indexOf('selection') < 0) {\n                this.applyStyles(selectedElements, index);\n            }\n            if (accumulation.enableBorderOnMouseMove) {\n                var borderElement = document.getElementById(selectedElements[0].id.split('_')[0] + 'PointHover_Border');\n                if (!isNullOrUndefined(borderElement)) {\n                    this.removeSvgClass(borderElement, borderElement.getAttribute('class'));\n                    this.addSvgClass(borderElement, selectedElements[0].getAttribute('class'));\n                }\n            }\n            if (this.styleId.indexOf('highlight') > 0 && accumulation.highlightMode !== 'None') {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, true);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, true);\n            }\n        }\n    };\n    /**\n     * To redraw the selection process on accumulation chart refresh.\n     *\n     * @private\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.redrawSelection = function (accumulation) {\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(accumulation, this.highlightDataIndexes);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(accumulation, this.selectedDataIndexes);\n        }\n        this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n        this.selectDataIndex(selectedDataIndexes, accumulation);\n    };\n    /**\n     * To remove the selected elements style classes by indexes.\n     *\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @param {Index[]} indexes - The array of indexes representing elements to remove selection styles.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeSelectedElements = function (accumulation, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.removeStyles([this.getElementByIndex(index)], index);\n        }\n        var points = accumulation.visibleSeries[0].points;\n        for (var i = 0; i < points.length; i++) {\n            var index = new Index(0, points[i].index);\n            this.removeStyles([this.getElementByIndex(index)], index);\n        }\n    };\n    /**\n     * To perform the selection for legend elements.\n     *\n     * @private\n     */\n    AccumulationSelection.prototype.legendSelection = function (accumulation, series, pointIndex, targetEle, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetEle.id.indexOf('text') > 1) {\n                targetEle = getElement(targetEle.id.replace('text', 'shape'));\n            }\n            if (targetEle.hasAttribute('class') && (targetEle.getAttribute('class').indexOf('highlight') > -1 ||\n                targetEle.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.accumulation.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(targetEle, eventType);\n        if (isPreSelected) {\n            //let element: Element = <Element>accumulation.getSeriesElement().childNodes[series as number].childNodes[pointIndex as number];\n            //let seriesStyle: string = this.generateLegendClickStyle(accumulation.visibleSeries[series as number], eventType);\n            var seriesElements = accumulation.getSeriesElement().\n                childNodes[series].childNodes[pointIndex];\n            this.selection(accumulation, new Index(series, pointIndex), [seriesElements]);\n            this.blurEffect(accumulation.element.id, accumulation.visibleSeries);\n        }\n    };\n    /**\n     * To select the element by selected data indexes.\n     *\n     * @param {Index[]} indexes - The array of indexes representing elements to select.\n     * @param {AccumulationChart} accumulation - The accumulation chart control.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.selectDataIndex = function (indexes, accumulation) {\n        var element;\n        for (var _i = 0, indexes_2 = indexes; _i < indexes_2.length; _i++) {\n            var index = indexes_2[_i];\n            element = this.getElementByIndex(index);\n            if (element) {\n                this.performSelection(index, accumulation, element);\n            }\n        }\n    };\n    /**\n     * To remove the selection styles for multi selection process.\n     *\n     * @param {AccumulationChart} accumulation - The Accumulation Chart control.\n     * @param {Index[]} index - The array of indexes representing elements to remove selection styles for multi selection process.\n     * @param {Index} currentIndex - The current index to remove from selection.\n     * @param {AccumulationSeriesModel[]} seriesCollection - The array of visible series in the accumulation chart.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeMultiSelectEelments = function (accumulation, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if (!this.checkEquals(index[i], currentIndex)) {\n                this.removeStyles(this.findElements(accumulation, series, index[i]), index[i]);\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * To apply the opacity effect for accumulation chart series elements.\n     *\n     * @param  {string} pieId - The id of the pie element.\n     * @param  {AccumulationSeries[]} visibleSeries - The array of visible series in the accumulation chart.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.blurEffect = function (pieId, visibleSeries) {\n        var visibility = (this.checkVisibility(this.highlightDataIndexes) ||\n            this.checkVisibility(this.selectedDataIndexes)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            if (series.visible) {\n                this.checkSelectionElements(document.getElementById(pieId + '_SeriesCollection'), this.generateStyle(series), visibility);\n            }\n        }\n    };\n    /**\n     * To check selection elements by style class name.\n     *\n     * @param  {Element} element - The element to check selection elements by style class name.\n     * @param  {string} className - The class name to check.\n     * @param  {boolean} visibility - Indicates whether the element should be visible.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.checkSelectionElements = function (element, className, visibility) {\n        var children = element.childNodes[0].childNodes;\n        var legendShape;\n        var elementClass;\n        var parentClass;\n        //let selectElement: Element = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClass = children[i].getAttribute('class') || '';\n            parentClass = children[i].parentNode.getAttribute('class') || '';\n            if (this.accumulation.selectionMode !== 'None' || this.accumulation.highlightMode !== 'None') {\n                className = elementClass.indexOf('selection') > 0 ||\n                    elementClass.indexOf('highlight') > 0 ? elementClass : className;\n                className = (parentClass.indexOf('selection') > 0 ||\n                    parentClass.indexOf('highlight') > 0) ? parentClass : className;\n            }\n            if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                this.removeSvgClass(children[i], this.unselected);\n            }\n            if (elementClass.indexOf(className) === -1 &&\n                parentClass.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                // selectElement = children[i as number] as HTMLElement;\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (this.control.accumulationLegendModule &&\n                this.control.legendSettings.visible) {\n                legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + i);\n                if (legendShape) {\n                    if (elementClass.indexOf(className) === -1 && parentClass.indexOf(className) === -1 && visibility) {\n                        this.addSvgClass(legendShape, this.unselected);\n                    }\n                    else {\n                        this.removeSvgClass(legendShape, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * To apply selection style for elements.\n     *\n     * @param  {Element[]} elements - The array of elements to apply the selection style.\n     * @param  {Index} index - The index to apply the selection style.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.applyStyles = function (elements, index) {\n        var accumulationTooltip = this.control.accumulationTooltipModule;\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            var legendShape = void 0;\n            if (element) {\n                if (this.control.accumulationLegendModule &&\n                    this.control.legendSettings.visible) {\n                    legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    this.addSvgClass(legendShape, this.getSelectionClass(legendShape.id, index.point));\n                }\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                var opacity = accumulationTooltip && (accumulationTooltip.previousPoints.length > 0 &&\n                    accumulationTooltip.previousPoints[0].point.index !== index.point) ?\n                    accumulationTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n                element.setAttribute('opacity', opacity.toString());\n                this.addSvgClass(element, this.getSelectionClass(element.id, index.point));\n            }\n        }\n    };\n    /**\n     * To get selection style class name by id.\n     *\n     * @param  {string} id - The id of the element to retrieve the selection style class name.\n     * @param  {number} point - The point for the selection.\n     * @returns {string} - The selection style class name.\n     */\n    AccumulationSelection.prototype.getSelectionClass = function (id, point) {\n        return this.generateStyle(this.control.series[indexFinder(id).series], point);\n    };\n    /**\n     * To remove selection style for elements.\n     *\n     * @param  {Element[]} elements - The array of elements from which to remove the selection style.\n     * @param  {Index} index - The index to remove from the selection.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.removeStyles = function (elements, index) {\n        var accumulationTooltip = this.control.accumulationTooltipModule;\n        var legendShape;\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                if (this.control.accumulationLegendModule &&\n                    this.control.legendSettings.visible) {\n                    legendShape = document.getElementById(this.control.element.id + '_chart_legend_shape_' + index.point);\n                    this.removeSvgClass(legendShape, this.getSelectionClass(legendShape.id, index.point));\n                }\n                var opacity = accumulationTooltip && accumulationTooltip.previousPoints.length > 0\n                    && (accumulationTooltip.previousPoints[0].point.index === index.point) ?\n                    accumulationTooltip.svgTooltip.opacity : this.series[index.series].opacity;\n                element.setAttribute('opacity', opacity.toString());\n                this.removeSvgClass(element, this.getSelectionClass(element.id, index.point));\n            }\n        }\n    };\n    /**\n     * To apply or remove selected elements index.\n     *\n     * @param  {Index[]} indexes - The array of indexes representing elements to apply or remove selection.\n     * @param  {Index} index - The index to add or remove from the selection.\n     * @param  {boolean} add - Indicates whether to add or remove the index.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.addOrRemoveIndex = function (indexes, index, add) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.checkEquals(indexes[i], index)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (add) {\n            indexes.push(index);\n        }\n    };\n    /**\n     * To check two index, point and series are equal.\n     *\n     * @param  {Index} first - The first index.\n     * @param  {Index} second - The second index.\n     * @returns {boolean} - Indicates whether the two indexes are equal.\n     */\n    AccumulationSelection.prototype.checkEquals = function (first, second) {\n        return ((first.point === second.point) && (first.series === second.series));\n    };\n    /**\n     *The mouse move event.\n     *\n     * @private\n     * @param  {PointerEvent | TouchEvent} event - The mouse move event or touch event.\n     * @returns {void}\n     */\n    AccumulationSelection.prototype.mouseMove = function (event) {\n        var accumulation = this.accumulation;\n        var targetElement = event.target;\n        if (accumulation.highlightMode !== 'None') {\n            if (!isNullOrUndefined(targetElement)) {\n                if (event.target.id.indexOf('text') > 1) {\n                    targetElement = getElement(event.target.id.replace('text', 'shape'));\n                }\n                if ((targetElement).hasAttribute('class') && (targetElement).getAttribute('class').indexOf('highlight') > -1) {\n                    return;\n                }\n                this.calculateSelectedElements(accumulation, event.target, event.type);\n                return;\n            }\n        }\n        if (accumulation.selectionMode === 'None') {\n            return;\n        }\n    };\n    // /**\n    //  * To check selected points are visibility.\n    //  *\n    //  * @param  {Indexes[]} selectedDataIndexes - The array of indexes representing selected points.\n    //  * @returns {boolean} - Indicates whether the selected points are visible.\n    //  */\n    // private checkPointVisibility(selectedDataIndexes: Indexes[]): boolean {\n    //     let visible: boolean = false;\n    //     for (const data of selectedDataIndexes) {\n    //         if (pointByIndex(data.point, <AccPoints[]>this.control.visibleSeries[0].points).visible) {\n    //             visible = true;\n    //             break;\n    //         }\n    //     }\n    //     return visible;\n    // }\n    /**\n     * Get module name.\n     *\n     * @private\n     * @returns {string} - Returns the module name.\n     */\n    AccumulationSelection.prototype.getModuleName = function () {\n        return 'AccumulationSelection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    AccumulationSelection.prototype.destroy = function () {\n        // Destroy method performed here\n        this.removeEventListener();\n    };\n    return AccumulationSelection;\n}(BaseSelection));\nexport { AccumulationSelection };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}