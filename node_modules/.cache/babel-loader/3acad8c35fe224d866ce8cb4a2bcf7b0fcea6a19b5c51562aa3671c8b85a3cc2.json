{"ast":null,"code":"import { functor, head, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport * as React from \"react\";\nimport { drawOnCanvasHelper, identityStack } from \"./StackedBarSeries\";\n/**\n * A `BarSeries` component.\n */\nexport class BarSeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      if (this.props.swapScales) {\n        const {\n          xAccessor\n        } = moreProps;\n        drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, identityStack);\n      } else {\n        const bars = this.getBars(moreProps);\n        const {\n          strokeStyle\n        } = this.props;\n        const nest = group(bars, d => d.fillStyle);\n        nest.forEach((values, key) => {\n          if (strokeStyle !== undefined) {\n            if (head(values).width > 1) {\n              ctx.strokeStyle = strokeStyle;\n            }\n          }\n          ctx.fillStyle = key;\n          values.forEach(d => {\n            if (d.width <= 1) {\n              ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n            } else {\n              ctx.fillRect(d.x + 0.5, d.y + 0.5, d.width, d.height);\n              if (strokeStyle !== undefined) {\n                ctx.strokeRect(d.x, d.y, d.width, d.height);\n              }\n            }\n          });\n        });\n      }\n    };\n    this.getBars = moreProps => {\n      const {\n        baseAt,\n        fillStyle,\n        width,\n        yAccessor\n      } = this.props;\n      const {\n        xScale,\n        xAccessor,\n        plotData,\n        chartConfig: {\n          yScale\n        }\n      } = moreProps;\n      const getFill = functor(fillStyle);\n      const getBase = functor(baseAt);\n      const getWidth = functor(width);\n      const barWidth = getWidth(this.props, {\n        xScale,\n        xAccessor,\n        plotData\n      });\n      const offset = 0.5 * barWidth;\n      return plotData.map(d => {\n        const yValue = yAccessor(d);\n        if (yValue === undefined) {\n          return undefined;\n        }\n        const xValue = xAccessor(d);\n        const x = xScale(xValue) - offset;\n        let y = yScale(yValue);\n        let h = getBase(xScale, yScale, d) - yScale(yValue);\n        if (h < 0) {\n          y = y + h;\n          h = -h;\n        }\n        return {\n          x,\n          y: Math.round(y),\n          height: Math.round(h),\n          width: offset * 2,\n          fillStyle: getFill(d)\n        };\n      }).filter(d => d !== undefined);\n    };\n  }\n  render() {\n    const {\n      clip\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      clip: clip,\n      canvasToDraw: getAxisCanvas,\n      canvasDraw: this.drawOnCanvas,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nBarSeries.defaultProps = {\n  baseAt: (xScale, yScale /* , d*/) => head(yScale.range()),\n  clip: true,\n  fillStyle: \"rgba(70, 130, 180, 0.5)\",\n  swapScales: false,\n  width: plotDataLengthBarWidth,\n  widthRatio: 0.8\n};","map":{"version":3,"names":["functor","head","getAxisCanvas","GenericChartComponent","plotDataLengthBarWidth","group","React","drawOnCanvasHelper","identityStack","BarSeries","Component","constructor","drawOnCanvas","ctx","moreProps","props","swapScales","xAccessor","bars","getBars","strokeStyle","nest","d","fillStyle","forEach","values","key","undefined","width","fillRect","x","y","height","strokeRect","baseAt","yAccessor","xScale","plotData","chartConfig","yScale","getFill","getBase","getWidth","barWidth","offset","map","yValue","xValue","h","Math","round","filter","render","clip","createElement","canvasToDraw","canvasDraw","drawOn","defaultProps","range","widthRatio"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\BarSeries.tsx"],"sourcesContent":["import {\n    functor,\n    head,\n    getAxisCanvas,\n    GenericChartComponent,\n    plotDataLengthBarWidth,\n} from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport { ScaleContinuousNumeric, ScaleTime } from \"d3-scale\";\nimport * as React from \"react\";\nimport { drawOnCanvasHelper, identityStack } from \"./StackedBarSeries\";\n\ninterface IBar {\n    readonly x: number;\n    readonly y: number;\n    readonly height: number;\n    readonly width: number;\n    readonly fillStyle: string;\n}\n\nexport interface BarSeriesProps {\n    readonly baseAt?:\n        | number\n        | ((\n              xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>,\n              yScale: ScaleContinuousNumeric<number, number>,\n              d: [number, number],\n              moreProps: any,\n          ) => number);\n    readonly clip?: boolean;\n    readonly fillStyle?: string | ((data: any) => string);\n    readonly strokeStyle?: string;\n    readonly swapScales?: boolean;\n    readonly width?: number | ((props: { widthRatio: number }, moreProps: any) => number);\n    readonly widthRatio?: number;\n    readonly yAccessor: (data: any) => number | undefined;\n}\n\n/**\n * A `BarSeries` component.\n */\nexport class BarSeries extends React.Component<BarSeriesProps> {\n    public static defaultProps = {\n        baseAt: (\n            xScale: ScaleContinuousNumeric<number, number>,\n            yScale: ScaleContinuousNumeric<number, number> /* , d*/,\n        ) => head(yScale.range()),\n        clip: true,\n        fillStyle: \"rgba(70, 130, 180, 0.5)\",\n        swapScales: false,\n        width: plotDataLengthBarWidth,\n        widthRatio: 0.8,\n    };\n\n    public render() {\n        const { clip } = this.props;\n\n        return (\n            <GenericChartComponent\n                clip={clip}\n                canvasToDraw={getAxisCanvas}\n                canvasDraw={this.drawOnCanvas}\n                drawOn={[\"pan\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        if (this.props.swapScales) {\n            const { xAccessor } = moreProps;\n\n            drawOnCanvasHelper(ctx, this.props, moreProps, xAccessor, identityStack);\n        } else {\n            const bars = this.getBars(moreProps);\n\n            const { strokeStyle } = this.props;\n\n            const nest = group(bars, (d: any) => d.fillStyle);\n\n            nest.forEach((values, key) => {\n                if (strokeStyle !== undefined) {\n                    if (head(values).width > 1) {\n                        ctx.strokeStyle = strokeStyle;\n                    }\n                }\n                ctx.fillStyle = key;\n\n                values.forEach((d) => {\n                    if (d.width <= 1) {\n                        ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n                    } else {\n                        ctx.fillRect(d.x + 0.5, d.y + 0.5, d.width, d.height);\n                        if (strokeStyle !== undefined) {\n                            ctx.strokeRect(d.x, d.y, d.width, d.height);\n                        }\n                    }\n                });\n            });\n        }\n    };\n\n    private readonly getBars = (moreProps: {\n        chartConfig: any;\n        xAccessor: (data: any) => number | Date;\n        xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n        plotData: any[];\n    }) => {\n        const { baseAt, fillStyle, width, yAccessor } = this.props;\n\n        const {\n            xScale,\n            xAccessor,\n            plotData,\n            chartConfig: { yScale },\n        } = moreProps;\n\n        const getFill = functor(fillStyle);\n        const getBase = functor(baseAt);\n        const getWidth = functor(width);\n\n        const barWidth = getWidth(this.props, {\n            xScale,\n            xAccessor,\n            plotData,\n        });\n\n        const offset = 0.5 * barWidth;\n\n        return plotData\n            .map((d) => {\n                const yValue = yAccessor(d);\n                if (yValue === undefined) {\n                    return undefined;\n                }\n\n                const xValue = xAccessor(d);\n                const x = xScale(xValue) - offset;\n\n                let y = yScale(yValue);\n\n                let h = getBase(xScale, yScale, d) - yScale(yValue);\n                if (h < 0) {\n                    y = y + h;\n                    h = -h;\n                }\n\n                return {\n                    x,\n                    y: Math.round(y),\n                    height: Math.round(h),\n                    width: offset * 2,\n                    fillStyle: getFill(d),\n                };\n            })\n            .filter((d) => d !== undefined) as IBar[];\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}