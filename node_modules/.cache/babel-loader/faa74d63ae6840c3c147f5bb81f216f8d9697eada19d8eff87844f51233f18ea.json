{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { pointer, pointers, select } from \"d3-selection\";\nimport * as React from \"react\";\nimport { d3Window, getTouchProps, MOUSEENTER, MOUSELEAVE, MOUSEMOVE, mousePosition, MOUSEUP, TOUCHEND, TOUCHMOVE, touchPosition } from \"./utils\";\nimport { getCurrentCharts } from \"./utils/ChartDataUtil\";\nexport class EventCapture extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dx = 0;\n    this.dy = 0;\n    this.mouseInside = false;\n    this.mouseInteraction = true;\n    this.ref = React.createRef();\n    this.handleEnter = e => {\n      const {\n        onMouseEnter\n      } = this.props;\n      if (onMouseEnter === undefined) {\n        return;\n      }\n      this.mouseInside = true;\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        const win = d3Window(this.ref.current);\n        select(win).on(MOUSEMOVE, this.handleMouseMove);\n      }\n      onMouseEnter(e);\n    };\n    this.handleLeave = e => {\n      const {\n        onMouseLeave\n      } = this.props;\n      if (onMouseLeave === undefined) {\n        return;\n      }\n      this.mouseInside = false;\n      if (!this.state.panInProgress && !this.state.dragInProgress) {\n        const win = d3Window(this.ref.current);\n        select(win).on(MOUSEMOVE, null);\n      }\n      onMouseLeave(e);\n    };\n    this.handleWheel = e => {\n      const {\n        pan,\n        onPan,\n        zoom,\n        onZoom\n      } = this.props;\n      if (!pan && !zoom) {\n        return;\n      }\n      const {\n        panInProgress\n      } = this.state;\n      const yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0;\n      const mouseXY = mousePosition(e);\n      e.preventDefault();\n      if (zoom && this.focus && yZoom && !panInProgress) {\n        const zoomDir = e.deltaY > 0 ? 1 : -1;\n        if (onZoom !== undefined) {\n          onZoom(zoomDir, mouseXY, e);\n        }\n      } else if (this.focus) {\n        if (this.shouldPan() && this.state.panStart !== undefined) {\n          // pan already in progress\n          const {\n            panStartXScale,\n            chartsToPan\n          } = this.state.panStart;\n          this.lastNewPos = mouseXY;\n          this.panHappened = true;\n          if (this.dx === undefined) {\n            this.dx = 0;\n          }\n          if (this.dy === undefined) {\n            this.dy = 0;\n          }\n          this.dx -= e.deltaX;\n          this.dy += e.deltaY;\n          const dxdy = {\n            dx: this.dx,\n            dy: this.dy\n          };\n          if (onPan !== undefined) {\n            onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n          }\n        } else {\n          const {\n            xScale,\n            chartConfig\n          } = this.props;\n          const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n          this.dx = 0;\n          this.dy = 0;\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n        }\n        this.queuePanEnd(e);\n      }\n    };\n    this.handleMouseMove = e => {\n      const {\n        onMouseMove,\n        mouseMove\n      } = this.props;\n      if (onMouseMove === undefined) {\n        return;\n      }\n      if (this.mouseInteraction && mouseMove && !this.state.panInProgress) {\n        const newPos = pointer(e, this.ref.current);\n        onMouseMove(newPos, \"mouse\", e);\n      }\n    };\n    this.handleClick = e => {\n      const mouseXY = mousePosition(e);\n      const {\n        onClick,\n        onDoubleClick\n      } = this.props;\n      if (!this.panHappened && !this.dragHappened) {\n        if (this.clicked && onDoubleClick !== undefined) {\n          onDoubleClick(mouseXY, e);\n          this.clicked = false;\n        } else if (onClick !== undefined) {\n          onClick(mouseXY, e);\n          this.clicked = true;\n          setTimeout(() => {\n            if (this.clicked) {\n              this.clicked = false;\n            }\n          }, 400);\n        }\n      }\n    };\n    this.handleRightClick = e => {\n      e.stopPropagation();\n      e.preventDefault();\n      const {\n        onContextMenu,\n        onPanEnd\n      } = this.props;\n      const mouseXY = mousePosition(e, this.ref.current.getBoundingClientRect());\n      if (this.state.panStart !== undefined) {\n        const {\n          panStartXScale,\n          panOrigin: [dx, dy],\n          chartsToPan\n        } = this.state.panStart;\n        if (this.panHappened && onPanEnd !== undefined) {\n          onPanEnd(mouseXY, panStartXScale, {\n            dx,\n            dy\n          }, chartsToPan, e);\n        }\n        const win = d3Window(this.ref.current);\n        select(win).on(MOUSEMOVE, null).on(MOUSEUP, null);\n        this.setState({\n          panInProgress: false,\n          panStart: undefined\n        });\n      }\n      if (onContextMenu !== undefined) {\n        onContextMenu(mouseXY, e);\n      }\n    };\n    this.handleDrag = e => {\n      const {\n        onDrag\n      } = this.props;\n      if (onDrag === undefined) {\n        return;\n      }\n      this.dragHappened = true;\n      const {\n        dragStartPosition\n      } = this.state;\n      if (dragStartPosition === undefined) {\n        return;\n      }\n      const mouseXY = pointer(e, this.ref.current);\n      onDrag({\n        startPos: dragStartPosition,\n        mouseXY\n      }, e);\n    };\n    this.handleDragEnd = e => {\n      const mouseXY = pointer(e, this.ref.current);\n      const win = d3Window(this.ref.current);\n      select(win)\n      // @ts-ignore\n      .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n      if (this.dragHappened) {\n        const {\n          onDragComplete\n        } = this.props;\n        if (onDragComplete !== undefined) {\n          onDragComplete({\n            mouseXY\n          }, e);\n        }\n      }\n      this.setState({\n        dragInProgress: false\n      });\n      this.mouseInteraction = true;\n    };\n    this.canPan = () => {\n      const {\n        getAllPanConditions\n      } = this.props;\n      const {\n        pan: initialPanEnabled\n      } = this.props;\n      const {\n        panEnabled,\n        draggable: somethingSelected\n      } = getAllPanConditions().reduce((returnObj, a) => {\n        return {\n          draggable: returnObj.draggable || a.draggable,\n          panEnabled: returnObj.panEnabled && a.panEnabled\n        };\n      }, {\n        draggable: false,\n        panEnabled: initialPanEnabled\n      });\n      return {\n        panEnabled,\n        somethingSelected\n      };\n    };\n    this.handleMouseDown = e => {\n      if (e.button !== 0) {\n        return;\n      }\n      const {\n        xScale,\n        chartConfig,\n        onMouseDown\n      } = this.props;\n      this.panHappened = false;\n      this.dragHappened = false;\n      this.focus = true;\n      if (!this.state.panInProgress && this.mouseInteraction) {\n        const mouseXY = mousePosition(e);\n        const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n        const {\n          panEnabled,\n          somethingSelected\n        } = this.canPan();\n        const pan = panEnabled && !somethingSelected;\n        if (pan) {\n          this.setState({\n            panInProgress: pan,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: mouseXY,\n              chartsToPan: currentCharts\n            }\n          });\n          const win = d3Window(this.ref.current);\n          select(win).on(MOUSEMOVE, this.handlePan).on(MOUSEUP, this.handlePanEnd);\n        } else if (somethingSelected) {\n          this.setState({\n            panInProgress: false,\n            dragInProgress: true,\n            panStart: undefined,\n            dragStartPosition: mouseXY\n          });\n          const {\n            onDragStart\n          } = this.props;\n          if (onDragStart !== undefined) {\n            onDragStart({\n              startPos: mouseXY\n            }, e);\n          }\n          const win = d3Window(this.ref.current);\n          select(win).on(MOUSEMOVE, this.handleDrag).on(MOUSEUP, this.handleDragEnd);\n        }\n        if (onMouseDown !== undefined) {\n          onMouseDown(mouseXY, currentCharts, e);\n        }\n      }\n      e.preventDefault();\n    };\n    this.shouldPan = () => {\n      const {\n        pan: panEnabled,\n        onPan\n      } = this.props;\n      return panEnabled && onPan && this.state.panStart !== undefined;\n    };\n    this.handlePan = e => {\n      if (this.shouldPan() && this.state.panStart !== undefined) {\n        this.panHappened = true;\n        const {\n          panStartXScale,\n          panOrigin,\n          chartsToPan\n        } = this.state.panStart;\n        let dx;\n        let dy;\n        let mouseXY;\n        if (this.mouseInteraction) {\n          mouseXY = pointer(e, this.ref.current);\n          this.lastNewPos = mouseXY;\n          dx = mouseXY[0] - panOrigin[0];\n          dy = mouseXY[1] - panOrigin[1];\n        } else {\n          mouseXY = pointers(e, this.ref.current)[0];\n          this.lastNewPos = mouseXY;\n          dx = panOrigin[0] - mouseXY[0];\n          dy = panOrigin[1] - mouseXY[1];\n        }\n        this.dx = dx;\n        this.dy = dy;\n        const {\n          onPan\n        } = this.props;\n        if (onPan !== undefined) {\n          onPan(mouseXY, panStartXScale, {\n            dx,\n            dy\n          }, chartsToPan, e);\n        }\n      }\n    };\n    this.handlePanEnd = e => {\n      const {\n        pan: panEnabled,\n        onPanEnd\n      } = this.props;\n      if (this.state.panStart !== undefined) {\n        const {\n          panStartXScale,\n          chartsToPan\n        } = this.state.panStart;\n        const win = d3Window(this.ref.current);\n        select(win)\n        // @ts-ignore\n        .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, null).on(TOUCHEND, null);\n        if (this.panHappened && panEnabled && onPanEnd) {\n          const {\n            dx = 0,\n            dy = 0\n          } = this;\n          delete this.dx;\n          delete this.dy;\n          if (this.lastNewPos !== undefined) {\n            onPanEnd(this.lastNewPos, panStartXScale, {\n              dx,\n              dy\n            }, chartsToPan, e);\n          }\n        }\n        this.setState({\n          panInProgress: false,\n          panStart: undefined\n        });\n      }\n    };\n    this.handleTouchMove = e => {\n      const {\n        onMouseMove\n      } = this.props;\n      if (onMouseMove === undefined) {\n        return;\n      }\n      const touch = getTouchProps(e.touches[0]);\n      const touchXY = touchPosition(touch, e);\n      onMouseMove(touchXY, \"touch\", e);\n    };\n    this.handleTouchStart = e => {\n      this.mouseInteraction = false;\n      const {\n        pan: panEnabled,\n        chartConfig,\n        onMouseMove,\n        xScale,\n        onPanEnd\n      } = this.props;\n      if (e.touches.length === 1) {\n        this.panHappened = false;\n        const touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n        if (onMouseMove !== undefined) {\n          onMouseMove(touchXY, \"touch\", e);\n        }\n        if (panEnabled) {\n          const currentCharts = getCurrentCharts(chartConfig, touchXY);\n          this.setState({\n            panInProgress: true,\n            panStart: {\n              panStartXScale: xScale,\n              panOrigin: touchXY,\n              chartsToPan: currentCharts\n            }\n          });\n          const win = d3Window(this.ref.current);\n          select(win).on(TOUCHMOVE, this.handlePan, false).on(TOUCHEND, this.handlePanEnd, false);\n        }\n      } else if (e.touches.length === 2) {\n        // pinch zoom begin\n        // do nothing pinch zoom is handled in handleTouchMove\n        const {\n          panInProgress,\n          panStart\n        } = this.state;\n        if (panInProgress && panEnabled && onPanEnd && panStart !== undefined) {\n          const {\n            panStartXScale,\n            panOrigin: [dx, dy],\n            chartsToPan\n          } = panStart;\n          const win = d3Window(this.ref.current);\n          select(win)\n          // @ts-ignore\n          .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null).on(TOUCHMOVE, this.handlePinchZoom, false).on(TOUCHEND, this.handlePinchZoomEnd, false);\n          const touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n          const touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n          if (this.panHappened && panEnabled && onPanEnd && this.lastNewPos !== undefined) {\n            onPanEnd(this.lastNewPos, panStartXScale, {\n              dx,\n              dy\n            }, chartsToPan, e);\n          }\n          this.setState({\n            panInProgress: false,\n            pinchZoomStart: {\n              xScale,\n              touch1Pos,\n              touch2Pos,\n              range: xScale.range(),\n              chartsToPan\n            }\n          });\n        }\n      }\n    };\n    this.handlePinchZoom = e => {\n      const {\n        pinchZoomStart\n      } = this.state;\n      if (pinchZoomStart === undefined) {\n        return;\n      }\n      const {\n        xScale,\n        zoom: zoomEnabled,\n        onPinchZoom\n      } = this.props;\n      if (!zoomEnabled || onPinchZoom === undefined) {\n        return;\n      }\n      const [touch1Pos, touch2Pos] = pointers(this.ref.current);\n      const {\n          chartsToPan\n        } = pinchZoomStart,\n        initialPinch = __rest(pinchZoomStart, [\"chartsToPan\"]);\n      onPinchZoom(initialPinch, {\n        touch1Pos,\n        touch2Pos,\n        xScale\n      }, e);\n    };\n    this.handlePinchZoomEnd = e => {\n      const win = d3Window(this.ref.current);\n      select(win).on(TOUCHMOVE, null).on(TOUCHEND, null);\n      const {\n        pinchZoomStart\n      } = this.state;\n      if (pinchZoomStart === undefined) {\n        return;\n      }\n      const {\n          chartsToPan\n        } = pinchZoomStart,\n        initialPinch = __rest(pinchZoomStart, [\"chartsToPan\"]);\n      const {\n        zoom: zoomEnabled,\n        onPinchZoomEnd\n      } = this.props;\n      if (zoomEnabled && onPinchZoomEnd) {\n        onPinchZoomEnd(initialPinch, e);\n      }\n      this.setState({\n        pinchZoomStart: undefined\n      });\n    };\n    this.setCursorClass = cursorOverrideClass => {\n      if (cursorOverrideClass !== this.state.cursorOverrideClass) {\n        this.setState({\n          cursorOverrideClass: cursorOverrideClass === null ? undefined : cursorOverrideClass\n        });\n      }\n    };\n    this.focus = props.focus;\n    this.state = {\n      panInProgress: false\n    };\n  }\n  componentDidMount() {\n    const {\n      disableInteraction\n    } = this.props;\n    const {\n      current\n    } = this.ref;\n    if (current === null) {\n      return;\n    }\n    if (!disableInteraction) {\n      // @ts-ignore\n      select(current).on(MOUSEENTER, this.handleEnter).on(MOUSELEAVE, this.handleLeave);\n      // @ts-ignore\n      current.addEventListener(\"wheel\", this.handleWheel, {\n        passive: false\n      });\n    }\n  }\n  componentDidUpdate() {\n    this.componentDidMount();\n  }\n  componentWillUnmount() {\n    const {\n      disableInteraction\n    } = this.props;\n    const {\n      current\n    } = this.ref;\n    if (current === null) {\n      return;\n    }\n    if (!disableInteraction) {\n      select(current).on(MOUSEENTER, null).on(MOUSELEAVE, null);\n      const win = d3Window(current);\n      select(win).on(MOUSEMOVE, null);\n      // @ts-ignore\n      current.removeEventListener(\"wheel\", this.handleWheel, {\n        passive: false\n      });\n    }\n  }\n  queuePanEnd(e) {\n    if (this.panEndTimeout !== undefined) {\n      window.clearTimeout(this.panEndTimeout);\n    }\n    this.panEndTimeout = window.setTimeout(() => {\n      this.handlePanEnd(e);\n    }, 100);\n  }\n  cancelDrag() {\n    const win = d3Window(this.ref.current);\n    select(win)\n    // @ts-ignore\n    .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null).on(MOUSEUP, null);\n    this.setState({\n      dragInProgress: false\n    });\n    this.mouseInteraction = true;\n  }\n  render() {\n    const {\n      height,\n      width,\n      disableInteraction,\n      useCrossHairStyleCursor\n    } = this.props;\n    const className = disableInteraction ? undefined : this.state.cursorOverrideClass !== undefined ? this.state.cursorOverrideClass : !useCrossHairStyleCursor ? undefined : this.state.panInProgress ? \"react-financial-charts-grabbing-cursor\" : \"react-financial-charts-crosshair-cursor\";\n    const interactionProps = disableInteraction ? undefined : {\n      onMouseDown: this.handleMouseDown,\n      onClick: this.handleClick,\n      onContextMenu: this.handleRightClick,\n      onTouchStart: this.handleTouchStart,\n      onTouchMove: this.handleTouchMove\n    };\n    return React.createElement(\"rect\", Object.assign({\n      ref: this.ref,\n      className: className,\n      width: width,\n      height: height,\n      style: {\n        opacity: 0\n      }\n    }, interactionProps));\n  }\n}\nEventCapture.defaultProps = {\n  mouseMove: false,\n  zoom: false,\n  pan: false,\n  panSpeedMultiplier: 1,\n  focus: false,\n  disableInteraction: false\n};","map":{"version":3,"names":["pointer","pointers","select","React","d3Window","getTouchProps","MOUSEENTER","MOUSELEAVE","MOUSEMOVE","mousePosition","MOUSEUP","TOUCHEND","TOUCHMOVE","touchPosition","getCurrentCharts","EventCapture","Component","constructor","props","dx","dy","mouseInside","mouseInteraction","ref","createRef","handleEnter","e","onMouseEnter","undefined","state","panInProgress","dragInProgress","win","current","on","handleMouseMove","handleLeave","onMouseLeave","handleWheel","pan","onPan","zoom","onZoom","yZoom","Math","abs","deltaY","deltaX","mouseXY","preventDefault","focus","zoomDir","shouldPan","panStart","panStartXScale","chartsToPan","lastNewPos","panHappened","dxdy","xScale","chartConfig","currentCharts","setState","panOrigin","queuePanEnd","onMouseMove","mouseMove","newPos","handleClick","onClick","onDoubleClick","dragHappened","clicked","setTimeout","handleRightClick","stopPropagation","onContextMenu","onPanEnd","getBoundingClientRect","handleDrag","onDrag","dragStartPosition","startPos","handleDragEnd","onDragComplete","canPan","getAllPanConditions","initialPanEnabled","panEnabled","draggable","somethingSelected","reduce","returnObj","a","handleMouseDown","button","onMouseDown","handlePan","handlePanEnd","onDragStart","handleTouchMove","touch","touches","touchXY","handleTouchStart","length","handlePinchZoom","handlePinchZoomEnd","touch1Pos","touch2Pos","pinchZoomStart","range","zoomEnabled","onPinchZoom","initialPinch","__rest","onPinchZoomEnd","setCursorClass","cursorOverrideClass","componentDidMount","disableInteraction","addEventListener","passive","componentDidUpdate","componentWillUnmount","removeEventListener","panEndTimeout","window","clearTimeout","cancelDrag","render","height","width","useCrossHairStyleCursor","className","interactionProps","onTouchStart","onTouchMove","createElement","Object","assign","style","opacity","defaultProps","panSpeedMultiplier"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\core\\src\\EventCapture.tsx"],"sourcesContent":["import { ScaleContinuousNumeric, ScaleTime } from \"d3-scale\";\nimport { pointer, pointers, select } from \"d3-selection\";\nimport * as React from \"react\";\n\nimport {\n    d3Window,\n    getTouchProps,\n    MOUSEENTER,\n    MOUSELEAVE,\n    MOUSEMOVE,\n    mousePosition,\n    MOUSEUP,\n    TOUCHEND,\n    TOUCHMOVE,\n    touchPosition,\n} from \"./utils\";\nimport { ChartConfig, getCurrentCharts } from \"./utils/ChartDataUtil\";\n\ninterface EventCaptureProps {\n    readonly mouseMove: boolean;\n    readonly zoom: boolean;\n    readonly pan: boolean;\n    readonly panSpeedMultiplier: number;\n    readonly focus: boolean;\n    readonly useCrossHairStyleCursor?: boolean;\n    readonly width: number;\n    readonly height: number;\n    readonly chartConfig: ChartConfig[];\n    readonly xAccessor: any; // func\n    readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n    readonly disableInteraction: boolean;\n    readonly getAllPanConditions: () => { panEnabled: boolean; draggable: boolean }[];\n    readonly onClick?: (mouseXY: number[], event: React.MouseEvent) => void;\n    readonly onContextMenu?: (mouseXY: number[], event: React.MouseEvent) => void;\n    readonly onDoubleClick?: (mouseXY: number[], event: React.MouseEvent) => void;\n    readonly onDragStart?: (details: { startPos: number[] }, event: React.MouseEvent) => void;\n    readonly onDrag?: (\n        details: { startPos: [number, number]; mouseXY: [number, number] },\n        event: React.MouseEvent,\n    ) => void;\n    readonly onDragComplete?: (details: { mouseXY: number[] }, event: React.MouseEvent) => void;\n    readonly onMouseDown?: (mouseXY: [number, number], currentCharts: string[], event: React.MouseEvent) => void;\n    readonly onMouseMove?: (\n        touchXY: [number, number],\n        eventType: string,\n        event: React.MouseEvent | React.TouchEvent,\n    ) => void;\n    readonly onMouseEnter?: (event: React.MouseEvent) => void;\n    readonly onMouseLeave?: (event: React.MouseEvent) => void;\n    readonly onPinchZoom?: (\n        initialPinch: {\n            readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n            readonly touch1Pos: [number, number];\n            readonly touch2Pos: [number, number];\n            readonly range: number[];\n        },\n        currentPinch: {\n            readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n            readonly touch1Pos: [number, number];\n            readonly touch2Pos: [number, number];\n        },\n        e: React.TouchEvent,\n    ) => void;\n    readonly onPinchZoomEnd?: (\n        initialPinch: {\n            readonly xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n            readonly touch1Pos: [number, number];\n            readonly touch2Pos: [number, number];\n            readonly range: number[];\n        },\n        e: React.TouchEvent,\n    ) => void;\n    readonly onPan?: (\n        mouseXY: [number, number],\n        panStartXScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>,\n        panOrigin: { dx: number; dy: number },\n        chartsToPan: string[],\n        e: React.MouseEvent,\n    ) => void;\n    readonly onPanEnd?: (\n        mouseXY: [number, number],\n        panStartXScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>,\n        panOrigin: { dx: number; dy: number },\n        chartsToPan: string[],\n        e: React.MouseEvent | React.TouchEvent,\n    ) => void;\n    readonly onZoom?: (zoomDir: 1 | -1, mouseXY: number[], event: React.WheelEvent) => void;\n}\n\ninterface EventCaptureState {\n    cursorOverrideClass?: string;\n    dragInProgress?: boolean;\n    dragStartPosition?: [number, number];\n    panInProgress: boolean;\n    panStart?: {\n        panStartXScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n        panOrigin: number[];\n        chartsToPan: string[];\n    };\n    pinchZoomStart?: {\n        xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n        touch1Pos: [number, number];\n        touch2Pos: [number, number];\n        range: number[];\n        chartsToPan: string[];\n    };\n}\n\nexport class EventCapture extends React.Component<EventCaptureProps, EventCaptureState> {\n    public static defaultProps = {\n        mouseMove: false,\n        zoom: false,\n        pan: false,\n        panSpeedMultiplier: 1,\n        focus: false,\n        disableInteraction: false,\n    };\n\n    private clicked?: boolean;\n    private dx?: number = 0;\n    private dy?: number = 0;\n    private dragHappened?: boolean;\n    private focus?: boolean;\n    private lastNewPos?: [number, number];\n    private mouseInside = false;\n    private mouseInteraction = true;\n    private panEndTimeout?: number;\n    private panHappened?: boolean;\n    private readonly ref = React.createRef<SVGRectElement>();\n\n    public constructor(props: EventCaptureProps) {\n        super(props);\n\n        this.focus = props.focus;\n        this.state = {\n            panInProgress: false,\n        };\n    }\n\n    public componentDidMount() {\n        const { disableInteraction } = this.props;\n\n        const { current } = this.ref;\n        if (current === null) {\n            return;\n        }\n\n        if (!disableInteraction) {\n            // @ts-ignore\n            select(current).on(MOUSEENTER, this.handleEnter).on(MOUSELEAVE, this.handleLeave);\n\n            // @ts-ignore\n            current.addEventListener(\"wheel\", this.handleWheel, { passive: false });\n        }\n    }\n\n    public componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    public componentWillUnmount() {\n        const { disableInteraction } = this.props;\n\n        const { current } = this.ref;\n        if (current === null) {\n            return;\n        }\n\n        if (!disableInteraction) {\n            select(current).on(MOUSEENTER, null).on(MOUSELEAVE, null);\n            const win = d3Window(current);\n            select(win).on(MOUSEMOVE, null);\n\n            // @ts-ignore\n            current.removeEventListener(\"wheel\", this.handleWheel, { passive: false });\n        }\n    }\n\n    public readonly handleEnter = (e: any) => {\n        const { onMouseEnter } = this.props;\n        if (onMouseEnter === undefined) {\n            return;\n        }\n\n        this.mouseInside = true;\n        if (!this.state.panInProgress && !this.state.dragInProgress) {\n            const win = d3Window(this.ref.current);\n            select(win).on(MOUSEMOVE, this.handleMouseMove);\n        }\n        onMouseEnter(e);\n    };\n\n    public handleLeave = (e: React.MouseEvent) => {\n        const { onMouseLeave } = this.props;\n        if (onMouseLeave === undefined) {\n            return;\n        }\n\n        this.mouseInside = false;\n        if (!this.state.panInProgress && !this.state.dragInProgress) {\n            const win = d3Window(this.ref.current);\n            select(win).on(MOUSEMOVE, null);\n        }\n        onMouseLeave(e);\n    };\n\n    public handleWheel = (e: React.WheelEvent) => {\n        const { pan, onPan, zoom, onZoom } = this.props;\n\n        if (!pan && !zoom) {\n            return;\n        }\n\n        const { panInProgress } = this.state;\n\n        const yZoom = Math.abs(e.deltaY) > Math.abs(e.deltaX) && Math.abs(e.deltaY) > 0;\n        const mouseXY = mousePosition(e);\n        e.preventDefault();\n\n        if (zoom && this.focus && yZoom && !panInProgress) {\n            const zoomDir = e.deltaY > 0 ? 1 : -1;\n\n            if (onZoom !== undefined) {\n                onZoom(zoomDir, mouseXY, e);\n            }\n        } else if (this.focus) {\n            if (this.shouldPan() && this.state.panStart !== undefined) {\n                // pan already in progress\n                const { panStartXScale, chartsToPan } = this.state.panStart;\n                this.lastNewPos = mouseXY;\n                this.panHappened = true;\n\n                if (this.dx === undefined) {\n                    this.dx = 0;\n                }\n                if (this.dy === undefined) {\n                    this.dy = 0;\n                }\n\n                this.dx -= e.deltaX;\n                this.dy += e.deltaY;\n                const dxdy = { dx: this.dx, dy: this.dy };\n\n                if (onPan !== undefined) {\n                    onPan(mouseXY, panStartXScale, dxdy, chartsToPan, e);\n                }\n            } else {\n                const { xScale, chartConfig } = this.props;\n                const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n\n                this.dx = 0;\n                this.dy = 0;\n                this.setState({\n                    panInProgress: true,\n                    panStart: {\n                        panStartXScale: xScale,\n                        panOrigin: mouseXY,\n                        chartsToPan: currentCharts,\n                    },\n                });\n            }\n            this.queuePanEnd(e);\n        }\n    };\n\n    public queuePanEnd(e: any) {\n        if (this.panEndTimeout !== undefined) {\n            window.clearTimeout(this.panEndTimeout);\n        }\n        this.panEndTimeout = window.setTimeout(() => {\n            this.handlePanEnd(e);\n        }, 100);\n    }\n\n    public handleMouseMove = (e: any) => {\n        const { onMouseMove, mouseMove } = this.props;\n        if (onMouseMove === undefined) {\n            return;\n        }\n\n        if (this.mouseInteraction && mouseMove && !this.state.panInProgress) {\n            const newPos = pointer(e, this.ref.current);\n\n            onMouseMove(newPos, \"mouse\", e);\n        }\n    };\n\n    public handleClick = (e: React.MouseEvent) => {\n        const mouseXY = mousePosition(e);\n        const { onClick, onDoubleClick } = this.props;\n\n        if (!this.panHappened && !this.dragHappened) {\n            if (this.clicked && onDoubleClick !== undefined) {\n                onDoubleClick(mouseXY, e);\n                this.clicked = false;\n            } else if (onClick !== undefined) {\n                onClick(mouseXY, e);\n                this.clicked = true;\n                setTimeout(() => {\n                    if (this.clicked) {\n                        this.clicked = false;\n                    }\n                }, 400);\n            }\n        }\n    };\n\n    public handleRightClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const { onContextMenu, onPanEnd } = this.props;\n\n        const mouseXY = mousePosition(e, this.ref.current!.getBoundingClientRect());\n\n        if (this.state.panStart !== undefined) {\n            const {\n                panStartXScale,\n                panOrigin: [dx, dy],\n                chartsToPan,\n            } = this.state.panStart;\n\n            if (this.panHappened && onPanEnd !== undefined) {\n                onPanEnd(mouseXY, panStartXScale, { dx, dy }, chartsToPan, e);\n            }\n            const win = d3Window(this.ref.current);\n            select(win).on(MOUSEMOVE, null).on(MOUSEUP, null);\n\n            this.setState({\n                panInProgress: false,\n                panStart: undefined,\n            });\n        }\n\n        if (onContextMenu !== undefined) {\n            onContextMenu(mouseXY, e);\n        }\n    };\n\n    public handleDrag = (e: any) => {\n        const { onDrag } = this.props;\n        if (onDrag === undefined) {\n            return;\n        }\n\n        this.dragHappened = true;\n\n        const { dragStartPosition } = this.state;\n        if (dragStartPosition === undefined) {\n            return;\n        }\n\n        const mouseXY = pointer(e, this.ref.current);\n\n        onDrag(\n            {\n                startPos: dragStartPosition,\n                mouseXY,\n            },\n            e,\n        );\n    };\n\n    public cancelDrag() {\n        const win = d3Window(this.ref.current);\n        select(win)\n            // @ts-ignore\n            .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n            .on(MOUSEUP, null);\n\n        this.setState({\n            dragInProgress: false,\n        });\n        this.mouseInteraction = true;\n    }\n\n    public handleDragEnd = (e: any) => {\n        const mouseXY = pointer(e, this.ref.current);\n\n        const win = d3Window(this.ref.current);\n        select(win)\n            // @ts-ignore\n            .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n            .on(MOUSEUP, null);\n\n        if (this.dragHappened) {\n            const { onDragComplete } = this.props;\n            if (onDragComplete !== undefined) {\n                onDragComplete({ mouseXY }, e);\n            }\n        }\n\n        this.setState({\n            dragInProgress: false,\n        });\n        this.mouseInteraction = true;\n    };\n\n    public canPan = () => {\n        const { getAllPanConditions } = this.props;\n        const { pan: initialPanEnabled } = this.props;\n\n        const { panEnabled, draggable: somethingSelected } = getAllPanConditions().reduce(\n            (returnObj, a) => {\n                return {\n                    draggable: returnObj.draggable || a.draggable,\n                    panEnabled: returnObj.panEnabled && a.panEnabled,\n                };\n            },\n            {\n                draggable: false,\n                panEnabled: initialPanEnabled,\n            },\n        );\n\n        return {\n            panEnabled,\n            somethingSelected,\n        };\n    };\n\n    public handleMouseDown = (e: React.MouseEvent) => {\n        if (e.button !== 0) {\n            return;\n        }\n        const { xScale, chartConfig, onMouseDown } = this.props;\n\n        this.panHappened = false;\n        this.dragHappened = false;\n        this.focus = true;\n\n        if (!this.state.panInProgress && this.mouseInteraction) {\n            const mouseXY = mousePosition(e);\n            const currentCharts = getCurrentCharts(chartConfig, mouseXY);\n            const { panEnabled, somethingSelected } = this.canPan();\n            const pan = panEnabled && !somethingSelected;\n\n            if (pan) {\n                this.setState({\n                    panInProgress: pan,\n                    panStart: {\n                        panStartXScale: xScale,\n                        panOrigin: mouseXY,\n                        chartsToPan: currentCharts,\n                    },\n                });\n\n                const win = d3Window(this.ref.current);\n                select(win).on(MOUSEMOVE, this.handlePan).on(MOUSEUP, this.handlePanEnd);\n            } else if (somethingSelected) {\n                this.setState({\n                    panInProgress: false,\n                    dragInProgress: true,\n                    panStart: undefined,\n                    dragStartPosition: mouseXY,\n                });\n\n                const { onDragStart } = this.props;\n\n                if (onDragStart !== undefined) {\n                    onDragStart({ startPos: mouseXY }, e);\n                }\n\n                const win = d3Window(this.ref.current);\n                select(win).on(MOUSEMOVE, this.handleDrag).on(MOUSEUP, this.handleDragEnd);\n            }\n\n            if (onMouseDown !== undefined) {\n                onMouseDown(mouseXY, currentCharts, e);\n            }\n        }\n        e.preventDefault();\n    };\n\n    public shouldPan = () => {\n        const { pan: panEnabled, onPan } = this.props;\n        return panEnabled && onPan && this.state.panStart !== undefined;\n    };\n\n    public handlePan = (e: any) => {\n        if (this.shouldPan() && this.state.panStart !== undefined) {\n            this.panHappened = true;\n\n            const { panStartXScale, panOrigin, chartsToPan } = this.state.panStart;\n\n            let dx;\n            let dy;\n            let mouseXY;\n            if (this.mouseInteraction) {\n                mouseXY = pointer(e, this.ref.current);\n                this.lastNewPos = mouseXY;\n                dx = mouseXY[0] - panOrigin[0];\n                dy = mouseXY[1] - panOrigin[1];\n            } else {\n                mouseXY = pointers(e, this.ref.current)[0];\n                this.lastNewPos = mouseXY;\n                dx = panOrigin[0] - mouseXY[0];\n                dy = panOrigin[1] - mouseXY[1];\n            }\n\n            this.dx = dx;\n            this.dy = dy;\n\n            const { onPan } = this.props;\n            if (onPan !== undefined) {\n                onPan(mouseXY, panStartXScale, { dx, dy }, chartsToPan, e);\n            }\n        }\n    };\n\n    public handlePanEnd = (e: any) => {\n        const { pan: panEnabled, onPanEnd } = this.props;\n\n        if (this.state.panStart !== undefined) {\n            const { panStartXScale, chartsToPan } = this.state.panStart;\n\n            const win = d3Window(this.ref.current);\n            select(win)\n                // @ts-ignore\n                .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n                .on(MOUSEUP, null)\n                .on(TOUCHMOVE, null)\n                .on(TOUCHEND, null);\n\n            if (this.panHappened && panEnabled && onPanEnd) {\n                const { dx = 0, dy = 0 } = this;\n\n                delete this.dx;\n                delete this.dy;\n                if (this.lastNewPos !== undefined) {\n                    onPanEnd(this.lastNewPos, panStartXScale, { dx, dy }, chartsToPan, e);\n                }\n            }\n\n            this.setState({\n                panInProgress: false,\n                panStart: undefined,\n            });\n        }\n    };\n\n    public handleTouchMove = (e: React.TouchEvent) => {\n        const { onMouseMove } = this.props;\n        if (onMouseMove === undefined) {\n            return;\n        }\n\n        const touch = getTouchProps(e.touches[0]);\n        const touchXY = touchPosition(touch, e);\n        onMouseMove(touchXY, \"touch\", e);\n    };\n\n    public handleTouchStart = (e: React.TouchEvent) => {\n        this.mouseInteraction = false;\n\n        const { pan: panEnabled, chartConfig, onMouseMove, xScale, onPanEnd } = this.props;\n\n        if (e.touches.length === 1) {\n            this.panHappened = false;\n            const touchXY = touchPosition(getTouchProps(e.touches[0]), e);\n            if (onMouseMove !== undefined) {\n                onMouseMove(touchXY, \"touch\", e);\n            }\n\n            if (panEnabled) {\n                const currentCharts = getCurrentCharts(chartConfig, touchXY);\n\n                this.setState({\n                    panInProgress: true,\n                    panStart: {\n                        panStartXScale: xScale,\n                        panOrigin: touchXY,\n                        chartsToPan: currentCharts,\n                    },\n                });\n\n                const win = d3Window(this.ref.current);\n                select(win).on(TOUCHMOVE, this.handlePan, false).on(TOUCHEND, this.handlePanEnd, false);\n            }\n        } else if (e.touches.length === 2) {\n            // pinch zoom begin\n            // do nothing pinch zoom is handled in handleTouchMove\n            const { panInProgress, panStart } = this.state;\n\n            if (panInProgress && panEnabled && onPanEnd && panStart !== undefined) {\n                const {\n                    panStartXScale,\n                    panOrigin: [dx, dy],\n                    chartsToPan,\n                } = panStart;\n\n                const win = d3Window(this.ref.current);\n                select(win)\n                    // @ts-ignore\n                    .on(MOUSEMOVE, this.mouseInside ? this.handleMouseMove : null)\n                    .on(MOUSEUP, null)\n                    .on(TOUCHMOVE, this.handlePinchZoom, false)\n                    .on(TOUCHEND, this.handlePinchZoomEnd, false);\n\n                const touch1Pos = touchPosition(getTouchProps(e.touches[0]), e);\n                const touch2Pos = touchPosition(getTouchProps(e.touches[1]), e);\n\n                if (this.panHappened && panEnabled && onPanEnd && this.lastNewPos !== undefined) {\n                    onPanEnd(this.lastNewPos, panStartXScale, { dx, dy }, chartsToPan, e);\n                }\n\n                this.setState({\n                    panInProgress: false,\n                    pinchZoomStart: {\n                        xScale,\n                        touch1Pos,\n                        touch2Pos,\n                        range: xScale.range(),\n                        chartsToPan,\n                    },\n                });\n            }\n        }\n    };\n\n    public handlePinchZoom = (e: any) => {\n        const { pinchZoomStart } = this.state;\n        if (pinchZoomStart === undefined) {\n            return;\n        }\n\n        const { xScale, zoom: zoomEnabled, onPinchZoom } = this.props;\n        if (!zoomEnabled || onPinchZoom === undefined) {\n            return;\n        }\n\n        const [touch1Pos, touch2Pos] = pointers(this.ref.current!);\n\n        const { chartsToPan, ...initialPinch } = pinchZoomStart;\n\n        onPinchZoom(\n            initialPinch,\n            {\n                touch1Pos,\n                touch2Pos,\n                xScale,\n            },\n            e,\n        );\n    };\n\n    public handlePinchZoomEnd = (e: any) => {\n        const win = d3Window(this.ref.current);\n        select(win).on(TOUCHMOVE, null).on(TOUCHEND, null);\n\n        const { pinchZoomStart } = this.state;\n        if (pinchZoomStart === undefined) {\n            return;\n        }\n\n        const { chartsToPan, ...initialPinch } = pinchZoomStart;\n\n        const { zoom: zoomEnabled, onPinchZoomEnd } = this.props;\n        if (zoomEnabled && onPinchZoomEnd) {\n            onPinchZoomEnd(initialPinch, e);\n        }\n\n        this.setState({\n            pinchZoomStart: undefined,\n        });\n    };\n\n    public setCursorClass = (cursorOverrideClass: string | undefined | null) => {\n        if (cursorOverrideClass !== this.state.cursorOverrideClass) {\n            this.setState({\n                cursorOverrideClass: cursorOverrideClass === null ? undefined : cursorOverrideClass,\n            });\n        }\n    };\n\n    public render() {\n        const { height, width, disableInteraction, useCrossHairStyleCursor } = this.props;\n\n        const className = disableInteraction\n            ? undefined\n            : this.state.cursorOverrideClass !== undefined\n            ? this.state.cursorOverrideClass\n            : !useCrossHairStyleCursor\n            ? undefined\n            : this.state.panInProgress\n            ? \"react-financial-charts-grabbing-cursor\"\n            : \"react-financial-charts-crosshair-cursor\";\n\n        const interactionProps = disableInteraction\n            ? undefined\n            : {\n                  onMouseDown: this.handleMouseDown,\n                  onClick: this.handleClick,\n                  onContextMenu: this.handleRightClick,\n                  onTouchStart: this.handleTouchStart,\n                  onTouchMove: this.handleTouchMove,\n              };\n\n        return (\n            <rect\n                ref={this.ref}\n                className={className}\n                width={width}\n                height={height}\n                style={{ opacity: 0 }}\n                {...interactionProps}\n            />\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}