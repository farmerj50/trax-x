{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\CandlestickChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport throttle from \"lodash/throttle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandlestickChart = ({\n  ticker,\n  entryPoint,\n  exitPoint,\n  additionalData\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const priceLineRef = useRef({});\n  const candlestickSeriesRef = useRef(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    // Initialize the chart\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth || 1200,\n      height: 400,\n      layout: {\n        backgroundColor: \"#ffffff\",\n        textColor: \"#000000\"\n      },\n      grid: {\n        vertLines: {\n          color: \"#eeeeee\"\n        },\n        horzLines: {\n          color: \"#eeeeee\"\n        }\n      },\n      priceScale: {\n        borderColor: \"#cccccc\"\n      },\n      timeScale: {\n        borderColor: \"#cccccc\"\n      }\n    });\n    candlestickSeriesRef.current = chart.addCandlestickSeries();\n    chartRef.current = chart;\n    const fetchInitialData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\n        const data = await response.json();\n        if (data.dates && data.open && data.high && data.low && data.close) {\n          const formattedData = data.dates.map((date, index) => ({\n            time: date,\n            open: data.open[index],\n            high: data.high[index],\n            low: data.low[index],\n            close: data.close[index]\n          }));\n          candlestickSeriesRef.current.setData(formattedData);\n          addOrUpdatePriceLine(\"entryPriceLine\", entryPoint, \"green\", `Entry: ${entryPoint.toFixed(2)}`);\n          addOrUpdatePriceLine(\"exitPriceLine\", exitPoint, \"red\", `Exit: ${exitPoint.toFixed(2)}`);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    const addOrUpdatePriceLine = (key, price, color, title) => {\n      if (priceLineRef.current[key]) {\n        priceLineRef.current[key].applyOptions({\n          price,\n          color,\n          title\n        });\n      } else {\n        priceLineRef.current[key] = candlestickSeriesRef.current.createPriceLine({\n          price,\n          color,\n          lineWidth: 2,\n          title\n        });\n      }\n    };\n    fetchInitialData();\n\n    // ResizeObserver to dynamically adjust chart size\n    const resizeObserver = new ResizeObserver(throttle(() => {\n      if (chartRef.current && chartContainerRef.current) {\n        const newWidth = Math.min(chartContainerRef.current.clientWidth, 1200); // Limit max width to 1200px\n        const newHeight = 400; // Fixed height\n        chartRef.current.applyOptions({\n          width: newWidth,\n          height: newHeight\n        });\n      }\n    }, 200) // Throttle to prevent excessive updates\n    );\n    resizeObserver.observe(chartContainerRef.current);\n    return () => {\n      resizeObserver.disconnect();\n      if (chartRef.current) chartRef.current.remove();\n      chartRef.current = null;\n      candlestickSeriesRef.current = null;\n      priceLineRef.current = {};\n    };\n  }, [ticker, entryPoint, exitPoint]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    ref: chartContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(CandlestickChart, \"oWmhxwCa3cUatkDo5A97k4xtgeU=\");\n_c = CandlestickChart;\nexport default CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","throttle","jsxDEV","_jsxDEV","CandlestickChart","ticker","entryPoint","exitPoint","additionalData","_s","chartContainerRef","priceLineRef","candlestickSeriesRef","chartRef","chart","current","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","borderColor","timeScale","addCandlestickSeries","fetchInitialData","response","fetch","data","json","dates","open","high","low","close","formattedData","map","date","index","time","setData","addOrUpdatePriceLine","toFixed","error","console","key","price","title","applyOptions","createPriceLine","lineWidth","resizeObserver","ResizeObserver","newWidth","Math","min","newHeight","observe","disconnect","remove","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/CandlestickChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { createChart } from \"lightweight-charts\";\r\nimport throttle from \"lodash/throttle\";\r\n\r\nconst CandlestickChart = ({ ticker, entryPoint, exitPoint, additionalData }) => {\r\n  const chartContainerRef = useRef(null);\r\n  const priceLineRef = useRef({});\r\n  const candlestickSeriesRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize the chart\r\n    const chart = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.clientWidth || 1200,\r\n      height: 400,\r\n      layout: { backgroundColor: \"#ffffff\", textColor: \"#000000\" },\r\n      grid: { vertLines: { color: \"#eeeeee\" }, horzLines: { color: \"#eeeeee\" } },\r\n      priceScale: { borderColor: \"#cccccc\" },\r\n      timeScale: { borderColor: \"#cccccc\" },\r\n    });\r\n\r\n    candlestickSeriesRef.current = chart.addCandlestickSeries();\r\n    chartRef.current = chart;\r\n\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data.dates && data.open && data.high && data.low && data.close) {\r\n          const formattedData = data.dates.map((date, index) => ({\r\n            time: date,\r\n            open: data.open[index],\r\n            high: data.high[index],\r\n            low: data.low[index],\r\n            close: data.close[index],\r\n          }));\r\n          candlestickSeriesRef.current.setData(formattedData);\r\n          addOrUpdatePriceLine(\"entryPriceLine\", entryPoint, \"green\", `Entry: ${entryPoint.toFixed(2)}`);\r\n          addOrUpdatePriceLine(\"exitPriceLine\", exitPoint, \"red\", `Exit: ${exitPoint.toFixed(2)}`);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    const addOrUpdatePriceLine = (key, price, color, title) => {\r\n      if (priceLineRef.current[key]) {\r\n        priceLineRef.current[key].applyOptions({ price, color, title });\r\n      } else {\r\n        priceLineRef.current[key] = candlestickSeriesRef.current.createPriceLine({\r\n          price,\r\n          color,\r\n          lineWidth: 2,\r\n          title,\r\n        });\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n\r\n    // ResizeObserver to dynamically adjust chart size\r\n    const resizeObserver = new ResizeObserver(\r\n      throttle(() => {\r\n        if (chartRef.current && chartContainerRef.current) {\r\n          const newWidth = Math.min(chartContainerRef.current.clientWidth, 1200); // Limit max width to 1200px\r\n          const newHeight = 400; // Fixed height\r\n          chartRef.current.applyOptions({ width: newWidth, height: newHeight });\r\n        }\r\n      }, 200) // Throttle to prevent excessive updates\r\n    );\r\n\r\n    resizeObserver.observe(chartContainerRef.current);\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n      if (chartRef.current) chartRef.current.remove();\r\n      chartRef.current = null;\r\n      candlestickSeriesRef.current = null;\r\n      priceLineRef.current = {};\r\n    };\r\n  }, [ticker, entryPoint, exitPoint]);\r\n\r\n  return (\r\n    <div className=\"chart-container\" ref={chartContainerRef}>\r\n      {/* Chart is rendered here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}