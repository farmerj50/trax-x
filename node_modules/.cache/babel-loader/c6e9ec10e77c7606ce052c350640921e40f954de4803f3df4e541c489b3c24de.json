{"ast":null,"code":"import { elderRay } from \"../calculator\";\nimport { merge, rebind } from \"../utils\";\nimport baseIndicator from \"./baseIndicator\";\nconst ALGORITHM_TYPE = \"ElderRay\";\nexport default function () {\n  const base = baseIndicator().type(ALGORITHM_TYPE).accessor(d => d.elderRay);\n  const underlyingAlgorithm = elderRay();\n  const mergedAlgorithm = merge().algorithm(underlyingAlgorithm).merge((datum, i) => {\n    datum.elderRay = i;\n  });\n  const indicator = (data, options = {\n    merge: true\n  }) => {\n    if (options.merge) {\n      if (!base.accessor()) {\n        throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n      }\n      return mergedAlgorithm(data);\n    }\n    return underlyingAlgorithm(data);\n  };\n  rebind(indicator, base, \"id\", \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n  rebind(indicator, underlyingAlgorithm, \"options\");\n  rebind(indicator, mergedAlgorithm, \"merge\", \"skipUndefined\");\n  return indicator;\n}","map":{"version":3,"names":["elderRay","merge","rebind","baseIndicator","ALGORITHM_TYPE","base","type","accessor","d","underlyingAlgorithm","mergedAlgorithm","algorithm","datum","i","indicator","data","options","Error"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\indicator\\elderRay.ts"],"sourcesContent":["import { elderRay } from \"../calculator\";\nimport { merge, rebind } from \"../utils\";\nimport { ElderRayOptions } from \"../calculator/elderRay\";\nimport baseIndicator from \"./baseIndicator\";\n\nconst ALGORITHM_TYPE = \"ElderRay\";\n\ninterface ElderRayIndicator {\n    (data: any[], options?: { merge: boolean }): any;\n    id(): number;\n    id(x: number): ElderRayIndicator;\n    accessor(): any;\n    accessor(x: any): ElderRayIndicator;\n    stroke(): string | any;\n    stroke(x: string | any): ElderRayIndicator;\n    fill(): string | any;\n    fill(x: string | any): ElderRayIndicator;\n    echo(): any;\n    echo(x: any): ElderRayIndicator;\n    type(): string;\n    type(x: string): ElderRayIndicator;\n    merge(): any;\n    merge(newMerge: any): ElderRayIndicator;\n    options(): ElderRayOptions;\n    options(newOptions: ElderRayOptions): ElderRayIndicator;\n}\n\nexport default function () {\n    const base = baseIndicator()\n        .type(ALGORITHM_TYPE)\n        .accessor((d: any) => d.elderRay);\n\n    const underlyingAlgorithm = elderRay();\n\n    const mergedAlgorithm = merge()\n        .algorithm(underlyingAlgorithm)\n        .merge((datum: any, i: number) => {\n            datum.elderRay = i;\n        });\n\n    const indicator = (data: any[], options = { merge: true }) => {\n        if (options.merge) {\n            if (!base.accessor()) {\n                throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n            }\n            return mergedAlgorithm(data);\n        }\n        return underlyingAlgorithm(data);\n    };\n\n    rebind(indicator, base, \"id\", \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n    rebind(indicator, underlyingAlgorithm, \"options\");\n    rebind(indicator, mergedAlgorithm, \"merge\", \"skipUndefined\");\n\n    return indicator as ElderRayIndicator;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,KAAK,EAAEC,MAAM,QAAQ,UAAU;AAExC,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,cAAc,GAAG,UAAU;AAsBjC,eAAc;EACV,MAAMC,IAAI,GAAGF,aAAa,EAAE,CACvBG,IAAI,CAACF,cAAc,CAAC,CACpBG,QAAQ,CAAEC,CAAM,IAAKA,CAAC,CAACR,QAAQ,CAAC;EAErC,MAAMS,mBAAmB,GAAGT,QAAQ,EAAE;EAEtC,MAAMU,eAAe,GAAGT,KAAK,EAAE,CAC1BU,SAAS,CAACF,mBAAmB,CAAC,CAC9BR,KAAK,CAAC,CAACW,KAAU,EAAEC,CAAS,KAAI;IAC7BD,KAAK,CAACZ,QAAQ,GAAGa,CAAC;EACtB,CAAC,CAAC;EAEN,MAAMC,SAAS,GAAGA,CAACC,IAAW,EAAEC,OAAO,GAAG;IAAEf,KAAK,EAAE;EAAI,CAAE,KAAI;IACzD,IAAIe,OAAO,CAACf,KAAK,EAAE;MACf,IAAI,CAACI,IAAI,CAACE,QAAQ,EAAE,EAAE;QAClB,MAAM,IAAIU,KAAK,CAAC,sBAAsBb,cAAc,qBAAqB,CAAC;;MAE9E,OAAOM,eAAe,CAACK,IAAI,CAAC;;IAEhC,OAAON,mBAAmB,CAACM,IAAI,CAAC;EACpC,CAAC;EAEDb,MAAM,CAACY,SAAS,EAAET,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EAC3EH,MAAM,CAACY,SAAS,EAAEL,mBAAmB,EAAE,SAAS,CAAC;EACjDP,MAAM,CAACY,SAAS,EAAEJ,eAAe,EAAE,OAAO,EAAE,eAAe,CAAC;EAE5D,OAAOI,SAA8B;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}