{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { getPoint, withInRange, TransformToVisible, animateAddPoints } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * The `SplineAreaSeries` module is used to render the spline area series.\n */\nvar SplineAreaSeries = /** @class */function (_super) {\n  __extends(SplineAreaSeries, _super);\n  function SplineAreaSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the splineArea series.\n   *\n   * @param {Series} series - The series to be rendered.\n   * @param {Axis} xAxis - The x-axis of the chart.\n   * @param {Axis} yAxis - The y-axis of the chart.\n   * @param {boolean} isInverted - Specifies whether the chart is inverted.\n   * @param {boolean} pointAnimate - Specifies whether the point has to be animated.\n   * @param {boolean} pointUpdate - Specifies whether the point has to be updated.\n   * @returns {void}\n   * @private\n   */\n  SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n    var firstPoint = null;\n    var direction = '';\n    var startPoint = null;\n    var startPoint1 = null;\n    var pt2;\n    var bpt1;\n    var bpt2;\n    var controlPt1;\n    var controlPt2;\n    var realPoints = [];\n    var points = [];\n    var point;\n    var pointIndex = 0;\n    realPoints = this.filterEmptyPoints(series);\n    var emptyPointDirection = '';\n    for (var i = 0; i < realPoints.length; i++) {\n      point = realPoints[i];\n      if (point.x === null || point.x === '') {\n        continue;\n      } else {\n        point.index = pointIndex;\n        pointIndex++;\n        points.push(point);\n      }\n    }\n    var pointsLength = points.length;\n    var previous;\n    var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n    var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue : Math.max(series.yAxis.visibleRange.min, 0);\n    for (var i = 0; i < pointsLength; i++) {\n      point = points[i];\n      point.symbolLocations = [];\n      point.regions = [];\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n      if (point.visible && withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n        if (firstPoint) {\n          controlPt1 = series.drawPoints[previous].controlPoint1;\n          controlPt2 = series.drawPoints[previous].controlPoint2;\n          pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n          bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n          direction = direction.concat('C ' + bpt1.x + ' ' + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n        } else {\n          // Start point for the current path\n          startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n          direction += 'M ' + startPoint.x + ' ' + startPoint.y + ' ';\n          // First Point to draw the area path\n          startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n          direction += 'L ' + startPoint1.x + ' ' + startPoint1.y + ' ';\n        }\n        this.storePointLocation(point, series, isInverted, getCoordinate);\n        firstPoint = point;\n      } else {\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n      if ((i + 1 < pointsLength && !points[i + 1].visible || i === pointsLength - 1) && pt2 && startPoint) {\n        startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n        direction = direction.concat('L ' + startPoint.x + ' ' + startPoint.y + ' ');\n      }\n    }\n    this[pointAnimate ? 'addPath' : 'appendLinePath'](new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, 0, 'transparent', series.opacity, series.dashArray, direction), series, '');\n    /**\n     * To draw border for the path directions of area\n     */\n    if (series.border.width !== 0) {\n      emptyPointDirection = this.removeEmptyPointsBorder(this.getBorderDirection(direction));\n      this[pointAnimate ? 'addPath' : 'appendLinePath'](new PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', series.border.width, series.border.color ? series.border.color : series.interior, 1, series.border.dashArray, emptyPointDirection), series, '');\n    }\n    if (!pointUpdate) {\n      this.renderMarker(series);\n    }\n  };\n  /**\n   * To animate point for spline area series.\n   *\n   * @param {Series} series - Specifies the series.\n   * @param {number} point - Specifies the point.\n   * @returns {void}\n   * @private\n   */\n  SplineAreaSeries.prototype.updateDirection = function (series, point) {\n    this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n    for (var i = 0; i < point.length; i++) {\n      if (series.marker && series.marker.visible) {\n        series.chart.markerRender.renderMarker(series, series.points[point[i]], series.points[point[i]].symbolLocations[0], null, true);\n      }\n      if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n        series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n        series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n      }\n    }\n  };\n  /**\n   * Adds a area path to equate the start and end paths.\n   *\n   * @param {PathOption} options - The options for the path.\n   * @param {Series} series - The series to which the path belongs.\n   * @param {string} clipRect - The clip rectangle for the path.\n   * @param {ChartLocation[]} [firstSymbol] - The location of the first symbol.\n   * @returns {void}\n   * @private\n   */\n  SplineAreaSeries.prototype.addPath = function (options, series, clipRect) {\n    var points = this.appendPathElement(options, series, clipRect);\n    if (points.previousDirection !== '' && options.d !== '') {\n      if (points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g).length === 2) {\n        points.previousDirection = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g)[0] + 'L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' C ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2];\n      }\n      if (options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g).length === 2) {\n        options.d = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g)[0] + 'L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' C ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2];\n      }\n      var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var endPathCommands = options.d.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n      var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n      var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n      if (startPathCommands.length < endPathCommands.length) {\n        for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            var lastPointBeforeCurve = void 0;\n            if (startPathCommands[startPathCommands.length - 1].split(' ').length === 4 && options.id.indexOf('border') !== -1) {\n              lastPointBeforeCurve = startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(1).join(' ');\n            } else {\n              lastPointBeforeCurve = startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(5).join(' ');\n            }\n            var curveCommand = 'C ' + lastPointBeforeCurve + lastPointBeforeCurve + lastPointBeforeCurve;\n            if (options.id.indexOf('border') !== -1) {\n              startPathCommands.push(curveCommand);\n            } else {\n              startPathCommands.splice(startPathCommands.length - 1, 0, curveCommand);\n            }\n          }\n        }\n        animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n      } else if (startPathCommands.length > endPathCommands.length) {\n        for (var i = minLength; i < maxLength; i++) {\n          if (endPathCommands.length !== startPathCommands.length) {\n            var firstPointBeforeCurve = void 0;\n            if (series.removedPointIndex === series.points.length) {\n              if (startPathCommands[startPathCommands.length - 1].split(' ').length === 4 && options.id.indexOf('border') !== -1) {\n                firstPointBeforeCurve = endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(1).join(' ');\n              } else {\n                firstPointBeforeCurve = endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(5).join(' ');\n              }\n              var curveCommand = 'C ' + firstPointBeforeCurve + firstPointBeforeCurve + firstPointBeforeCurve;\n              if (options.id.indexOf('border') !== -1) {\n                endPathCommands.push(curveCommand);\n              } else {\n                endPathCommands.splice(endPathCommands.length - 1, 0, curveCommand);\n              }\n            } else {\n              if (startPathCommands[startPathCommands.length - 1].split(' ').length === 4) {\n                firstPointBeforeCurve = 'C ' + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(1).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(1).join(' ');\n              } else {\n                firstPointBeforeCurve = 'C ' + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ');\n              }\n              endPathCommands.splice(options.id.indexOf('border') !== -1 ? 1 : 2, 0, firstPointBeforeCurve);\n            }\n          }\n        }\n        animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n      } else {\n        animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n      }\n    }\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   */\n  SplineAreaSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series.\n     */\n    return 'SplineAreaSeries';\n  };\n  /**\n   * To destroy the spline.\n   *\n   * @returns {void}\n   * @private\n   */\n  SplineAreaSeries.prototype.destroy = function () {\n    /**\n     * Destroy method calling here.\n     */\n  };\n  return SplineAreaSeries;\n}(SplineBase);\nexport { SplineAreaSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","getPoint","withInRange","TransformToVisible","animateAddPoints","PathOption","SplineBase","SplineAreaSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","pointAnimate","pointUpdate","firstPoint","direction","startPoint","startPoint1","pt2","bpt1","bpt2","controlPt1","controlPt2","realPoints","points","point","pointIndex","filterEmptyPoints","emptyPointDirection","i","length","x","index","push","pointsLength","previous","getCoordinate","chart","chartAreaType","origin","yValue","Math","max","visibleRange","min","symbolLocations","regions","getPreviousIndex","visible","getNextIndex","drawPoints","controlPoint1","controlPoint2","xValue","y","concat","storePointLocation","element","id","interior","opacity","dashArray","border","width","removeEmptyPointsBorder","getBorderDirection","color","renderMarker","updateDirection","requireInvertedAxis","marker","markerRender","dataLabel","dataLabelModule","commonId","renderDataLabel","addPath","options","clipRect","appendPathElement","previousDirection","match","split","startPathCommands","endPathCommands","maxLength","minLength","lastPointBeforeCurve","indexOf","slice","join","curveCommand","splice","redraw","duration","firstPointBeforeCurve","removedPointIndex","getModuleName","destroy"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/chart/series/spline-area-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { getPoint, withInRange, TransformToVisible, animateAddPoints } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * The `SplineAreaSeries` module is used to render the spline area series.\n */\nvar SplineAreaSeries = /** @class */ (function (_super) {\n    __extends(SplineAreaSeries, _super);\n    function SplineAreaSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the splineArea series.\n     *\n     * @param {Series} series - The series to be rendered.\n     * @param {Axis} xAxis - The x-axis of the chart.\n     * @param {Axis} yAxis - The y-axis of the chart.\n     * @param {boolean} isInverted - Specifies whether the chart is inverted.\n     * @param {boolean} pointAnimate - Specifies whether the point has to be animated.\n     * @param {boolean} pointUpdate - Specifies whether the point has to be updated.\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.render = function (series, xAxis, yAxis, isInverted, pointAnimate, pointUpdate) {\n        var firstPoint = null;\n        var direction = '';\n        var startPoint = null;\n        var startPoint1 = null;\n        var pt2;\n        var bpt1;\n        var bpt2;\n        var controlPt1;\n        var controlPt2;\n        var realPoints = [];\n        var points = [];\n        var point;\n        var pointIndex = 0;\n        realPoints = this.filterEmptyPoints(series);\n        var emptyPointDirection = '';\n        for (var i = 0; i < realPoints.length; i++) {\n            point = realPoints[i];\n            if (point.x === null || point.x === '') {\n                continue;\n            }\n            else {\n                point.index = pointIndex;\n                pointIndex++;\n                points.push(point);\n            }\n        }\n        var pointsLength = points.length;\n        var previous;\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n        var origin = series.chart.chartAreaType === 'PolarRadar' ? series.points[0].yValue :\n            Math.max(series.yAxis.visibleRange.min, 0);\n        for (var i = 0; i < pointsLength; i++) {\n            point = points[i];\n            point.symbolLocations = [];\n            point.regions = [];\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            if (point.visible &&\n                withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n                if (firstPoint) {\n                    controlPt1 = series.drawPoints[previous].controlPoint1;\n                    controlPt2 = series.drawPoints[previous].controlPoint2;\n                    pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    bpt1 = getCoordinate(controlPt1.x, controlPt1.y, xAxis, yAxis, isInverted, series);\n                    bpt2 = getCoordinate(controlPt2.x, controlPt2.y, xAxis, yAxis, isInverted, series);\n                    direction = direction.concat('C ' + bpt1.x + ' '\n                        + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n                }\n                else {\n                    // Start point for the current path\n                    startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                    direction += ('M ' + startPoint.x + ' ' + startPoint.y + ' ');\n                    // First Point to draw the area path\n                    startPoint1 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n                    direction += ('L ' + startPoint1.x + ' ' + startPoint1.y + ' ');\n                }\n                this.storePointLocation(point, series, isInverted, getCoordinate);\n                firstPoint = point;\n            }\n            else {\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n            if (((i + 1 < pointsLength && !points[i + 1].visible) || i === pointsLength - 1)\n                && pt2 && startPoint) {\n                startPoint = getCoordinate(point.xValue, origin, xAxis, yAxis, isInverted, series);\n                direction = direction.concat('L ' + (startPoint.x) + ' ' + (startPoint.y) + ' ');\n            }\n        }\n        this[pointAnimate ? 'addPath' : 'appendLinePath'](new PathOption(series.chart.element.id + '_Series_' + series.index, series.interior, 0, 'transparent', series.opacity, series.dashArray, direction), series, '');\n        /**\n         * To draw border for the path directions of area\n         */\n        if (series.border.width !== 0) {\n            emptyPointDirection = this.removeEmptyPointsBorder(this.getBorderDirection(direction));\n            this[pointAnimate ? 'addPath' : 'appendLinePath'](new PathOption(series.chart.element.id + '_Series_border_' + series.index, 'transparent', series.border.width, series.border.color ? series.border.color : series.interior, 1, series.border.dashArray, emptyPointDirection), series, '');\n        }\n        if (!pointUpdate) {\n            this.renderMarker(series);\n        }\n    };\n    /**\n     * To animate point for spline area series.\n     *\n     * @param {Series} series - Specifies the series.\n     * @param {number} point - Specifies the point.\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.updateDirection = function (series, point) {\n        this.render(series, series.xAxis, series.yAxis, series.chart.requireInvertedAxis, false, true);\n        for (var i = 0; i < point.length; i++) {\n            if (series.marker && series.marker.visible) {\n                series.chart.markerRender.renderMarker(series, series.points[point[i]], series.points[point[i]].symbolLocations[0], null, true);\n            }\n            if (series.marker.dataLabel.visible && series.chart.dataLabelModule) {\n                series.chart.dataLabelModule.commonId = series.chart.element.id + '_Series_' + series.index + '_Point_';\n                series.chart.dataLabelModule.renderDataLabel(series, series.points[point[i]], null, series.marker.dataLabel);\n            }\n        }\n    };\n    /**\n     * Adds a area path to equate the start and end paths.\n     *\n     * @param {PathOption} options - The options for the path.\n     * @param {Series} series - The series to which the path belongs.\n     * @param {string} clipRect - The clip rectangle for the path.\n     * @param {ChartLocation[]} [firstSymbol] - The location of the first symbol.\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.addPath = function (options, series, clipRect) {\n        var points = this.appendPathElement(options, series, clipRect);\n        if (points.previousDirection !== '' && options.d !== '') {\n            if (points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g).length === 2) {\n                points.previousDirection = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g)[0] + 'L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' C ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2];\n            }\n            if ((options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g).length === 2) {\n                options.d = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g)[0] + 'L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' C ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2] + ' ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2]\n                    + ' L ' + points.previousDirection.split(' ')[1] + ' ' + points.previousDirection.split(' ')[2];\n            }\n            var startPathCommands = points.previousDirection.match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var endPathCommands = (options.d).match(/[MLHVCSQTAZ][^MLHVCSQTAZ]*/g);\n            var maxLength = Math.max(startPathCommands.length, endPathCommands.length);\n            var minLength = Math.min(startPathCommands.length, endPathCommands.length);\n            if (startPathCommands.length < endPathCommands.length) {\n                for (var i = startPathCommands.length; i < endPathCommands.length; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        var lastPointBeforeCurve = void 0;\n                        if ((startPathCommands[startPathCommands.length - 1]).split(' ').length === 4 && options.id.indexOf('border') !== -1) {\n                            lastPointBeforeCurve = startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(1).join(' ');\n                        }\n                        else {\n                            lastPointBeforeCurve = startPathCommands[startPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(5).join(' ');\n                        }\n                        var curveCommand = 'C ' + lastPointBeforeCurve + lastPointBeforeCurve + lastPointBeforeCurve;\n                        if (options.id.indexOf('border') !== -1) {\n                            startPathCommands.push(curveCommand);\n                        }\n                        else {\n                            startPathCommands.splice(startPathCommands.length - 1, 0, curveCommand);\n                        }\n                    }\n                }\n                animateAddPoints(points.element, options.d, series.chart.redraw, startPathCommands.join(' '), this.chart.duration);\n            }\n            else if (startPathCommands.length > endPathCommands.length) {\n                for (var i = minLength; i < maxLength; i++) {\n                    if (endPathCommands.length !== startPathCommands.length) {\n                        var firstPointBeforeCurve = void 0;\n                        if (series.removedPointIndex === series.points.length) {\n                            if ((startPathCommands[startPathCommands.length - 1]).split(' ').length === 4 && options.id.indexOf('border') !== -1) {\n                                firstPointBeforeCurve = endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(1).join(' ');\n                            }\n                            else {\n                                firstPointBeforeCurve = endPathCommands[endPathCommands.length - (options.id.indexOf('border') !== -1 ? 1 : 2)].split(' ').slice(5).join(' ');\n                            }\n                            var curveCommand = 'C ' + firstPointBeforeCurve + firstPointBeforeCurve + firstPointBeforeCurve;\n                            if (options.id.indexOf('border') !== -1) {\n                                endPathCommands.push(curveCommand);\n                            }\n                            else {\n                                endPathCommands.splice(endPathCommands.length - 1, 0, curveCommand);\n                            }\n                        }\n                        else {\n                            if ((startPathCommands[startPathCommands.length - 1]).split(' ').length === 4) {\n                                firstPointBeforeCurve = 'C ' + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(1).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(1).join(' ');\n                            }\n                            else {\n                                firstPointBeforeCurve = 'C ' + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ') + endPathCommands[options.id.indexOf('border') !== -1 ? 0 : 1].split(' ').slice(-3).join(' ');\n                            }\n                            endPathCommands.splice((options.id.indexOf('border') !== -1 ? 1 : 2), 0, firstPointBeforeCurve);\n                        }\n                    }\n                }\n                animateAddPoints(points.element, endPathCommands.join(''), series.chart.redraw, points.previousDirection, this.chart.duration, options.d);\n            }\n            else {\n                animateAddPoints(points.element, options.d, series.chart.redraw, points.previousDirection, this.chart.duration);\n            }\n        }\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    SplineAreaSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series.\n         */\n        return 'SplineAreaSeries';\n    };\n    /**\n     * To destroy the spline.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineAreaSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here.\n         */\n    };\n    return SplineAreaSeries;\n}(SplineBase));\nexport { SplineAreaSeries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}