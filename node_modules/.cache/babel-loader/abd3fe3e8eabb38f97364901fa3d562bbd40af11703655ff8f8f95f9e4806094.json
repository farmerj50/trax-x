{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\CandlestickChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandlestickChart = ({\n  ticker\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const candlestickSeriesRef = useRef(null);\n  useEffect(() => {\n    // Initialize the chart\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth || 1200,\n      height: 400,\n      layout: {\n        backgroundColor: \"#ffffff\",\n        textColor: \"#000000\"\n      },\n      grid: {\n        vertLines: {\n          color: \"#eeeeee\"\n        },\n        horzLines: {\n          color: \"#eeeeee\"\n        }\n      },\n      priceScale: {\n        borderColor: \"#cccccc\"\n      },\n      timeScale: {\n        borderColor: \"#cccccc\"\n      }\n    });\n    candlestickSeriesRef.current = chart.addCandlestickSeries();\n    chartRef.current = chart;\n    const fetchChartData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\n        const data = await response.json();\n        if (data.dates) {\n          const formattedData = data.dates.map((date, index) => ({\n            time: date,\n            open: data.open[index],\n            high: data.high[index],\n            low: data.low[index],\n            close: data.close[index]\n          }));\n          candlestickSeriesRef.current.setData(formattedData);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchChartData();\n\n    // ResizeObserver for dynamic resizing\n    const resizeObserver = new ResizeObserver(() => {\n      if (chartRef.current && chartContainerRef.current) {\n        const newWidth = Math.min(chartContainerRef.current.clientWidth, 1200); // Limit max width to 1200px\n        const newHeight = 400; // Fixed height\n\n        // Update chart dimensions\n        chartRef.current.applyOptions({\n          width: newWidth,\n          height: newHeight\n        });\n\n        // Update canvas dimensions manually\n        const canvasElements = chartContainerRef.current.querySelectorAll(\"canvas\");\n        canvasElements.forEach(canvas => {\n          canvas.style.width = `${newWidth}px`;\n          canvas.style.height = `${newHeight}px`;\n        });\n      }\n    });\n    resizeObserver.observe(chartContainerRef.current);\n    return () => {\n      resizeObserver.disconnect();\n      if (chartRef.current) chartRef.current.remove();\n    };\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    ref: chartContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(CandlestickChart, \"wszWNPaPFygBveW5LnAyw5U/s10=\");\n_c = CandlestickChart;\nexport default CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","CandlestickChart","ticker","_s","chartContainerRef","chartRef","candlestickSeriesRef","chart","current","width","clientWidth","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","priceScale","borderColor","timeScale","addCandlestickSeries","fetchChartData","response","fetch","data","json","dates","formattedData","map","date","index","time","open","high","low","close","setData","error","console","resizeObserver","ResizeObserver","newWidth","Math","min","newHeight","applyOptions","canvasElements","querySelectorAll","forEach","canvas","style","observe","disconnect","remove","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/CandlestickChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { createChart } from \"lightweight-charts\";\r\n\r\nconst CandlestickChart = ({ ticker }) => {\r\n  const chartContainerRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n  const candlestickSeriesRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize the chart\r\n    const chart = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.clientWidth || 1200,\r\n      height: 400,\r\n      layout: { backgroundColor: \"#ffffff\", textColor: \"#000000\" },\r\n      grid: { vertLines: { color: \"#eeeeee\" }, horzLines: { color: \"#eeeeee\" } },\r\n      priceScale: { borderColor: \"#cccccc\" },\r\n      timeScale: { borderColor: \"#cccccc\" },\r\n    });\r\n\r\n    candlestickSeriesRef.current = chart.addCandlestickSeries();\r\n    chartRef.current = chart;\r\n\r\n    const fetchChartData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/candlestick?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data.dates) {\r\n          const formattedData = data.dates.map((date, index) => ({\r\n            time: date,\r\n            open: data.open[index],\r\n            high: data.high[index],\r\n            low: data.low[index],\r\n            close: data.close[index],\r\n          }));\r\n          candlestickSeriesRef.current.setData(formattedData);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchChartData();\r\n\r\n    // ResizeObserver for dynamic resizing\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      if (chartRef.current && chartContainerRef.current) {\r\n        const newWidth = Math.min(chartContainerRef.current.clientWidth, 1200); // Limit max width to 1200px\r\n        const newHeight = 400; // Fixed height\r\n\r\n        // Update chart dimensions\r\n        chartRef.current.applyOptions({ width: newWidth, height: newHeight });\r\n\r\n        // Update canvas dimensions manually\r\n        const canvasElements = chartContainerRef.current.querySelectorAll(\"canvas\");\r\n        canvasElements.forEach((canvas) => {\r\n          canvas.style.width = `${newWidth}px`;\r\n          canvas.style.height = `${newHeight}px`;\r\n        });\r\n      }\r\n    });\r\n\r\n    resizeObserver.observe(chartContainerRef.current);\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n      if (chartRef.current) chartRef.current.remove();\r\n    };\r\n  }, [ticker]);\r\n\r\n  return (\r\n    <div className=\"chart-container\" ref={chartContainerRef}>\r\n      {/* Chart will be rendered here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandlestickChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}