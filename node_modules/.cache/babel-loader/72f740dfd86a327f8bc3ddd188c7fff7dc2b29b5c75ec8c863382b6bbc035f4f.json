{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\CandlestickChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CandlestickChart = ({\n  ticker\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    // Function to adjust chart dimensions\n    const adjustChartDimensions = () => {\n      if (chartRef.current && chartContainerRef.current) {\n        const containerWidth = Math.min(chartContainerRef.current.clientWidth, 1200); // Max width 1200px\n        const containerHeight = 400; // Fixed height\n\n        // Apply dimensions to the chart\n        chartRef.current.applyOptions({\n          width: containerWidth,\n          height: containerHeight\n        });\n\n        // Adjust canvas elements manually if necessary\n        const canvasElements = chartContainerRef.current.querySelectorAll(\"canvas\");\n        canvasElements.forEach(canvas => {\n          canvas.style.width = `${containerWidth}px`;\n          canvas.style.height = `${containerHeight}px`;\n        });\n      }\n    };\n\n    // Initialize the chart\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth || 1200,\n      height: 400,\n      layout: {\n        backgroundColor: \"#ffffff\",\n        textColor: \"#000000\"\n      },\n      grid: {\n        vertLines: {\n          color: \"#eeeeee\"\n        },\n        horzLines: {\n          color: \"#eeeeee\"\n        }\n      }\n    });\n    chartRef.current = chart;\n\n    // Fetch sample data (replace with your data fetching logic)\n    const fetchChartData = async () => {\n      const sampleData = [{\n        time: \"2023-12-01\",\n        open: 1.2,\n        high: 1.5,\n        low: 1.1,\n        close: 1.4\n      }, {\n        time: \"2023-12-02\",\n        open: 1.4,\n        high: 1.6,\n        low: 1.3,\n        close: 1.5\n      }, {\n        time: \"2023-12-03\",\n        open: 1.5,\n        high: 1.7,\n        low: 1.4,\n        close: 1.6\n      }];\n      chart.addCandlestickSeries().setData(sampleData);\n    };\n    fetchChartData();\n\n    // Observe resize events\n    const resizeObserver = new ResizeObserver(() => {\n      adjustChartDimensions(); // Adjust chart size dynamically\n    });\n    resizeObserver.observe(chartContainerRef.current);\n\n    // Cleanup on unmount\n    return () => {\n      resizeObserver.disconnect();\n      if (chartRef.current) chartRef.current.remove();\n    };\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartContainerRef,\n    style: {\n      width: \"100%\",\n      maxWidth: \"1200px\",\n      height: \"400px\",\n      margin: \"0 auto\",\n      border: \"2px solid #ccc\",\n      borderRadius: \"5px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(CandlestickChart, \"2rN9armGVJ1f+QeW0pB7tlSVqXQ=\");\n_c = CandlestickChart;\nexport default CandlestickChart;\nvar _c;\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"names":["React","useEffect","useRef","createChart","jsxDEV","_jsxDEV","CandlestickChart","ticker","_s","chartContainerRef","chartRef","adjustChartDimensions","current","containerWidth","Math","min","clientWidth","containerHeight","applyOptions","width","height","canvasElements","querySelectorAll","forEach","canvas","style","chart","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","fetchChartData","sampleData","time","open","high","low","close","addCandlestickSeries","setData","resizeObserver","ResizeObserver","observe","disconnect","remove","ref","maxWidth","margin","border","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/CandlestickChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { createChart } from \"lightweight-charts\";\r\n\r\nconst CandlestickChart = ({ ticker }) => {\r\n  const chartContainerRef = useRef(null);\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Function to adjust chart dimensions\r\n    const adjustChartDimensions = () => {\r\n      if (chartRef.current && chartContainerRef.current) {\r\n        const containerWidth = Math.min(chartContainerRef.current.clientWidth, 1200); // Max width 1200px\r\n        const containerHeight = 400; // Fixed height\r\n\r\n        // Apply dimensions to the chart\r\n        chartRef.current.applyOptions({\r\n          width: containerWidth,\r\n          height: containerHeight,\r\n        });\r\n\r\n        // Adjust canvas elements manually if necessary\r\n        const canvasElements = chartContainerRef.current.querySelectorAll(\"canvas\");\r\n        canvasElements.forEach((canvas) => {\r\n          canvas.style.width = `${containerWidth}px`;\r\n          canvas.style.height = `${containerHeight}px`;\r\n        });\r\n      }\r\n    };\r\n\r\n    // Initialize the chart\r\n    const chart = createChart(chartContainerRef.current, {\r\n      width: chartContainerRef.current.clientWidth || 1200,\r\n      height: 400,\r\n      layout: { backgroundColor: \"#ffffff\", textColor: \"#000000\" },\r\n      grid: { vertLines: { color: \"#eeeeee\" }, horzLines: { color: \"#eeeeee\" } },\r\n    });\r\n\r\n    chartRef.current = chart;\r\n\r\n    // Fetch sample data (replace with your data fetching logic)\r\n    const fetchChartData = async () => {\r\n      const sampleData = [\r\n        { time: \"2023-12-01\", open: 1.2, high: 1.5, low: 1.1, close: 1.4 },\r\n        { time: \"2023-12-02\", open: 1.4, high: 1.6, low: 1.3, close: 1.5 },\r\n        { time: \"2023-12-03\", open: 1.5, high: 1.7, low: 1.4, close: 1.6 },\r\n      ];\r\n      chart.addCandlestickSeries().setData(sampleData);\r\n    };\r\n\r\n    fetchChartData();\r\n\r\n    // Observe resize events\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      adjustChartDimensions(); // Adjust chart size dynamically\r\n    });\r\n\r\n    resizeObserver.observe(chartContainerRef.current);\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n      if (chartRef.current) chartRef.current.remove();\r\n    };\r\n  }, [ticker]);\r\n\r\n  return <div ref={chartContainerRef} style={{ width: \"100%\", maxWidth: \"1200px\", height: \"400px\", margin: \"0 auto\", border: \"2px solid #ccc\", borderRadius: \"5px\" }} />;\r\n};\r\n\r\nexport default CandlestickChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}