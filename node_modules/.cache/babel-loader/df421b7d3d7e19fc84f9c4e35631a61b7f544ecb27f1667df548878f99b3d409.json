{"ast":null,"code":"import { functor, GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\nexport class SingleMAToolTip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.onClick = event => {\n      const {\n        onClick,\n        forChart,\n        options\n      } = this.props;\n      if (onClick !== undefined) {\n        onClick(event, Object.assign({\n          chartId: forChart\n        }, options));\n      }\n    };\n  }\n  render() {\n    const {\n      color,\n      displayName,\n      fontSize,\n      fontFamily,\n      fontWeight,\n      textFill,\n      labelFill,\n      labelFontWeight,\n      value\n    } = this.props;\n    const translate = \"translate(\" + this.props.origin[0] + \", \" + this.props.origin[1] + \")\";\n    return React.createElement(\"g\", {\n      transform: translate\n    }, React.createElement(\"line\", {\n      x1: 0,\n      y1: 2,\n      x2: 0,\n      y2: 28,\n      stroke: color,\n      strokeWidth: 4\n    }), React.createElement(ToolTipText, {\n      x: 5,\n      y: 11,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight\n    }, React.createElement(ToolTipTSpanLabel, {\n      fill: labelFill,\n      fontWeight: labelFontWeight\n    }, displayName), React.createElement(\"tspan\", {\n      x: 5,\n      dy: 15,\n      fill: textFill\n    }, value)), React.createElement(\"rect\", {\n      x: 0,\n      y: 0,\n      width: 55,\n      height: 30,\n      onClick: this.onClick,\n      fill: \"none\",\n      stroke: \"none\"\n    }));\n  }\n}\n// tslint:disable-next-line: max-classes-per-file\nexport class MovingAverageTooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.renderSVG = moreProps => {\n      var _a;\n      const {\n        chartId,\n        chartConfig,\n        chartConfig: {\n          height = 0\n        } = {},\n        fullData\n      } = moreProps;\n      const {\n        className,\n        displayInit = MovingAverageTooltip.defaultProps.displayInit,\n        onClick,\n        width = 65,\n        fontFamily,\n        fontSize,\n        fontWeight,\n        textFill,\n        labelFill,\n        origin: originProp,\n        displayFormat,\n        displayValuesFor = MovingAverageTooltip.defaultProps.displayValuesFor,\n        options\n      } = this.props;\n      const currentItem = (_a = displayValuesFor(this.props, moreProps)) !== null && _a !== void 0 ? _a : last(fullData);\n      const config = chartConfig;\n      const origin = functor(originProp);\n      const [x, y] = origin(width, height);\n      const [ox, oy] = config.origin;\n      return React.createElement(\"g\", {\n        transform: `translate(${ox + x}, ${oy + y})`,\n        className: className\n      }, options.map((each, idx) => {\n        const yValue = currentItem && each.yAccessor(currentItem);\n        const tooltipLabel = `${each.type} (${each.windowSize})`;\n        const yDisplayValue = yValue ? displayFormat(yValue) : displayInit;\n        return React.createElement(SingleMAToolTip, {\n          key: idx,\n          origin: [width * idx, 0],\n          color: each.stroke,\n          displayName: tooltipLabel,\n          value: yDisplayValue,\n          options: each,\n          forChart: chartId,\n          onClick: onClick,\n          fontFamily: fontFamily,\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          textFill: textFill,\n          labelFill: labelFill\n        });\n      }));\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      svgDraw: this.renderSVG,\n      drawOn: [\"mousemove\"]\n    });\n  }\n}\nMovingAverageTooltip.defaultProps = {\n  className: \"react-financial-charts-tooltip react-financial-charts-moving-average-tooltip\",\n  displayFormat: format(\".2f\"),\n  displayInit: \"n/a\",\n  displayValuesFor: (_, props) => props.currentItem,\n  origin: [0, 10],\n  width: 65\n};","map":{"version":3,"names":["functor","GenericChartComponent","last","format","React","ToolTipText","ToolTipTSpanLabel","SingleMAToolTip","Component","constructor","onClick","event","forChart","options","props","undefined","Object","assign","chartId","render","color","displayName","fontSize","fontFamily","fontWeight","textFill","labelFill","labelFontWeight","value","translate","origin","createElement","transform","x1","y1","x2","y2","stroke","strokeWidth","x","y","fill","dy","width","height","MovingAverageTooltip","renderSVG","moreProps","chartConfig","fullData","className","displayInit","defaultProps","originProp","displayFormat","displayValuesFor","currentItem","_a","config","ox","oy","map","each","idx","yValue","yAccessor","tooltipLabel","type","windowSize","yDisplayValue","key","clip","svgDraw","drawOn","_"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\MovingAverageTooltip.tsx"],"sourcesContent":["import { functor, GenericChartComponent, last, MoreProps } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\n\nexport interface SingleMAToolTipProps {\n    readonly color: string;\n    readonly displayName: string;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly forChart: number | string;\n    readonly labelFill?: string;\n    readonly labelFontWeight?: number;\n    readonly onClick?: (event: React.MouseEvent<SVGRectElement, MouseEvent>, details: any) => void;\n    readonly options: any;\n    readonly origin: [number, number];\n    readonly textFill?: string;\n    readonly value: string;\n}\n\nexport class SingleMAToolTip extends React.Component<SingleMAToolTipProps> {\n    public render() {\n        const { color, displayName, fontSize, fontFamily, fontWeight, textFill, labelFill, labelFontWeight, value } =\n            this.props;\n\n        const translate = \"translate(\" + this.props.origin[0] + \", \" + this.props.origin[1] + \")\";\n\n        return (\n            <g transform={translate}>\n                <line x1={0} y1={2} x2={0} y2={28} stroke={color} strokeWidth={4} />\n                <ToolTipText x={5} y={11} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight}>\n                        {displayName}\n                    </ToolTipTSpanLabel>\n                    <tspan x={5} dy={15} fill={textFill}>\n                        {value}\n                    </tspan>\n                </ToolTipText>\n                <rect x={0} y={0} width={55} height={30} onClick={this.onClick} fill=\"none\" stroke=\"none\" />\n            </g>\n        );\n    }\n\n    private readonly onClick = (event: React.MouseEvent<SVGRectElement, MouseEvent>) => {\n        const { onClick, forChart, options } = this.props;\n        if (onClick !== undefined) {\n            onClick(event, { chartId: forChart, ...options });\n        }\n    };\n}\n\ninterface MovingAverageTooltipProps {\n    readonly className?: string;\n    readonly displayFormat: (value: number) => string;\n    readonly origin: number[];\n    readonly displayInit?: string;\n    readonly displayValuesFor?: (props: MovingAverageTooltipProps, moreProps: any) => any;\n    readonly onClick?: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\n    readonly textFill?: string;\n    readonly labelFill?: string;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly width?: number;\n    readonly options: {\n        yAccessor: (data: any) => number;\n        type: string;\n        stroke: string;\n        windowSize: number;\n    }[];\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class MovingAverageTooltip extends React.Component<MovingAverageTooltipProps> {\n    public static defaultProps = {\n        className: \"react-financial-charts-tooltip react-financial-charts-moving-average-tooltip\",\n        displayFormat: format(\".2f\"),\n        displayInit: \"n/a\",\n        displayValuesFor: (_: any, props: any) => props.currentItem,\n        origin: [0, 10],\n        width: 65,\n    };\n\n    public render() {\n        return <GenericChartComponent clip={false} svgDraw={this.renderSVG} drawOn={[\"mousemove\"]} />;\n    }\n\n    private readonly renderSVG = (moreProps: MoreProps) => {\n        const { chartId, chartConfig, chartConfig: { height = 0 } = {}, fullData } = moreProps;\n\n        const {\n            className,\n            displayInit = MovingAverageTooltip.defaultProps.displayInit,\n            onClick,\n            width = 65,\n            fontFamily,\n            fontSize,\n            fontWeight,\n            textFill,\n            labelFill,\n            origin: originProp,\n            displayFormat,\n            displayValuesFor = MovingAverageTooltip.defaultProps.displayValuesFor,\n            options,\n        } = this.props;\n\n        const currentItem = displayValuesFor(this.props, moreProps) ?? last(fullData);\n\n        const config = chartConfig!;\n\n        const origin = functor(originProp);\n        const [x, y] = origin(width, height);\n        const [ox, oy] = config.origin;\n\n        return (\n            <g transform={`translate(${ox + x}, ${oy + y})`} className={className}>\n                {options.map((each, idx) => {\n                    const yValue = currentItem && each.yAccessor(currentItem);\n\n                    const tooltipLabel = `${each.type} (${each.windowSize})`;\n                    const yDisplayValue = yValue ? displayFormat(yValue) : displayInit;\n                    return (\n                        <SingleMAToolTip\n                            key={idx}\n                            origin={[width * idx, 0]}\n                            color={each.stroke}\n                            displayName={tooltipLabel}\n                            value={yDisplayValue}\n                            options={each}\n                            forChart={chartId}\n                            onClick={onClick}\n                            fontFamily={fontFamily}\n                            fontSize={fontSize}\n                            fontWeight={fontWeight}\n                            textFill={textFill}\n                            labelFill={labelFill}\n                        />\n                    );\n                })}\n            </g>\n        );\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}