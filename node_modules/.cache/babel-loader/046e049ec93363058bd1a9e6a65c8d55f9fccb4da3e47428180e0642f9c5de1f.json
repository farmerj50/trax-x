{"ast":null,"code":"import { heikinAshi } from \"../calculator\";\nimport baseIndicator from \"./baseIndicator\";\nimport { merge, rebind } from \"../utils\";\nconst ALGORITHM_TYPE = \"HeikinAshi\";\nexport default function () {\n  const base = baseIndicator().type(ALGORITHM_TYPE).accessor(d => d.ha);\n  const underlyingAlgorithm = heikinAshi();\n  const mergedAlgorithm = merge().algorithm(underlyingAlgorithm).merge((datum, i) => {\n    return Object.assign(Object.assign({}, datum), i);\n  });\n  const indicator = (data, options = {\n    merge: true\n  }) => {\n    if (options.merge) {\n      if (!base.accessor()) {\n        throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n      }\n      return mergedAlgorithm(data);\n    }\n    return underlyingAlgorithm(data);\n  };\n  rebind(indicator, base, \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n  rebind(indicator, mergedAlgorithm, \"merge\");\n  return indicator;\n}","map":{"version":3,"names":["heikinAshi","baseIndicator","merge","rebind","ALGORITHM_TYPE","base","type","accessor","d","ha","underlyingAlgorithm","mergedAlgorithm","algorithm","datum","i","Object","assign","indicator","data","options","Error"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\indicator\\heikinAshi.ts"],"sourcesContent":["import { heikinAshi } from \"../calculator\";\nimport baseIndicator from \"./baseIndicator\";\nimport { merge, rebind } from \"../utils\";\n\nconst ALGORITHM_TYPE = \"HeikinAshi\";\n\nexport default function () {\n    const base = baseIndicator()\n        .type(ALGORITHM_TYPE)\n        .accessor((d: any) => d.ha);\n\n    const underlyingAlgorithm = heikinAshi();\n\n    const mergedAlgorithm = merge()\n        .algorithm(underlyingAlgorithm)\n        .merge((datum: any, i: any) => {\n            return { ...datum, ...i };\n        });\n\n    const indicator = (data: any[], options = { merge: true }) => {\n        if (options.merge) {\n            if (!base.accessor()) {\n                throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n            }\n\n            return mergedAlgorithm(data);\n        }\n        return underlyingAlgorithm(data);\n    };\n\n    rebind(indicator, base, \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n    rebind(indicator, mergedAlgorithm, \"merge\");\n\n    return indicator;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,KAAK,EAAEC,MAAM,QAAQ,UAAU;AAExC,MAAMC,cAAc,GAAG,YAAY;AAEnC,eAAc;EACV,MAAMC,IAAI,GAAGJ,aAAa,EAAE,CACvBK,IAAI,CAACF,cAAc,CAAC,CACpBG,QAAQ,CAAEC,CAAM,IAAKA,CAAC,CAACC,EAAE,CAAC;EAE/B,MAAMC,mBAAmB,GAAGV,UAAU,EAAE;EAExC,MAAMW,eAAe,GAAGT,KAAK,EAAE,CAC1BU,SAAS,CAACF,mBAAmB,CAAC,CAC9BR,KAAK,CAAC,CAACW,KAAU,EAAEC,CAAM,KAAI;IAC1B,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYH,KAAK,GAAKC,CAAC;EAC3B,CAAC,CAAC;EAEN,MAAMG,SAAS,GAAGA,CAACC,IAAW,EAAEC,OAAO,GAAG;IAAEjB,KAAK,EAAE;EAAI,CAAE,KAAI;IACzD,IAAIiB,OAAO,CAACjB,KAAK,EAAE;MACf,IAAI,CAACG,IAAI,CAACE,QAAQ,EAAE,EAAE;QAClB,MAAM,IAAIa,KAAK,CAAC,sBAAsBhB,cAAc,qBAAqB,CAAC;;MAG9E,OAAOO,eAAe,CAACO,IAAI,CAAC;;IAEhC,OAAOR,mBAAmB,CAACQ,IAAI,CAAC;EACpC,CAAC;EAEDf,MAAM,CAACc,SAAS,EAAEZ,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EACrEF,MAAM,CAACc,SAAS,EAAEN,eAAe,EAAE,OAAO,CAAC;EAE3C,OAAOM,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}