{"ast":null,"code":"import { functor, isDefined, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\nexport class RSITooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.renderSVG = moreProps => {\n      const {\n        onClick,\n        displayInit,\n        fontFamily,\n        fontSize,\n        fontWeight,\n        yAccessor,\n        displayFormat,\n        className,\n        options,\n        labelFill,\n        labelFontWeight,\n        textFill,\n        displayValuesFor\n      } = this.props;\n      const {\n        chartConfig: {\n          width,\n          height\n        }\n      } = moreProps;\n      const currentItem = displayValuesFor(this.props, moreProps);\n      const rsi = isDefined(currentItem) && yAccessor(currentItem);\n      const value = rsi && displayFormat(rsi) || displayInit;\n      const {\n        origin: originProp\n      } = this.props;\n      const origin = functor(originProp);\n      const [x, y] = origin(width, height);\n      const tooltipLabel = `RSI (${options.windowSize}): `;\n      return React.createElement(\"g\", {\n        className: className,\n        transform: `translate(${x}, ${y})`,\n        onClick: onClick\n      }, React.createElement(ToolTipText, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }, React.createElement(ToolTipTSpanLabel, {\n        fill: labelFill,\n        fontWeight: labelFontWeight\n      }, tooltipLabel), React.createElement(\"tspan\", {\n        fill: textFill\n      }, value)));\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      svgDraw: this.renderSVG,\n      drawOn: [\"mousemove\"]\n    });\n  }\n}\nRSITooltip.defaultProps = {\n  displayFormat: format(\".2f\"),\n  displayInit: \"n/a\",\n  displayValuesFor: (_, props) => props.currentItem,\n  origin: [0, 0],\n  className: \"react-financial-charts-tooltip\"\n};","map":{"version":3,"names":["functor","isDefined","GenericChartComponent","format","React","ToolTipText","ToolTipTSpanLabel","RSITooltip","Component","constructor","renderSVG","moreProps","onClick","displayInit","fontFamily","fontSize","fontWeight","yAccessor","displayFormat","className","options","labelFill","labelFontWeight","textFill","displayValuesFor","props","chartConfig","width","height","currentItem","rsi","value","origin","originProp","x","y","tooltipLabel","windowSize","createElement","transform","fill","render","clip","svgDraw","drawOn","defaultProps","_"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\RSITooltip.tsx"],"sourcesContent":["import { functor, isDefined, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\n\nexport interface RSITooltipProps {\n    readonly className?: string;\n    readonly displayFormat: (value: number) => string;\n    readonly displayInit?: string;\n    readonly displayValuesFor: (props: RSITooltipProps, moreProps: any) => any;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly labelFill?: string;\n    readonly labelFontWeight?: number;\n    readonly onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>) => void;\n    readonly origin: number[] | ((width: number, height: number) => number[]);\n    readonly options: {\n        windowSize: number;\n    };\n    readonly textFill?: string;\n    readonly yAccessor: (data: any) => number | undefined;\n}\n\nexport class RSITooltip extends React.Component<RSITooltipProps> {\n    public static defaultProps = {\n        displayFormat: format(\".2f\"),\n        displayInit: \"n/a\",\n        displayValuesFor: (_: RSITooltipProps, props: any) => props.currentItem,\n        origin: [0, 0],\n        className: \"react-financial-charts-tooltip\",\n    };\n\n    public render() {\n        return <GenericChartComponent clip={false} svgDraw={this.renderSVG} drawOn={[\"mousemove\"]} />;\n    }\n\n    private readonly renderSVG = (moreProps: any) => {\n        const {\n            onClick,\n            displayInit,\n            fontFamily,\n            fontSize,\n            fontWeight,\n            yAccessor,\n            displayFormat,\n            className,\n            options,\n            labelFill,\n            labelFontWeight,\n            textFill,\n            displayValuesFor,\n        } = this.props;\n\n        const {\n            chartConfig: { width, height },\n        } = moreProps;\n\n        const currentItem = displayValuesFor(this.props, moreProps);\n        const rsi = isDefined(currentItem) && yAccessor(currentItem);\n        const value = (rsi && displayFormat(rsi)) || displayInit;\n\n        const { origin: originProp } = this.props;\n        const origin = functor(originProp);\n        const [x, y] = origin(width, height);\n\n        const tooltipLabel = `RSI (${options.windowSize}): `;\n        return (\n            <g className={className} transform={`translate(${x}, ${y})`} onClick={onClick}>\n                <ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                    <ToolTipTSpanLabel fill={labelFill} fontWeight={labelFontWeight}>\n                        {tooltipLabel}\n                    </ToolTipTSpanLabel>\n                    <tspan fill={textFill}>{value}</tspan>\n                </ToolTipText>\n            </g>\n        );\n    };\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,SAAS,EAAEC,qBAAqB,QAAQ,8BAA8B;AACxF,SAASC,MAAM,QAAQ,WAAW;AAClC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,iBAAiB,QAAQ,qBAAqB;AAqBvD,OAAM,MAAOC,UAAW,SAAQH,KAAK,CAACI,SAA0B;EAAhEC,YAAA;;IAaqB,KAAAC,SAAS,GAAIC,SAAc,IAAI;MAC5C,MAAM;QACFC,OAAO;QACPC,WAAW;QACXC,UAAU;QACVC,QAAQ;QACRC,UAAU;QACVC,SAAS;QACTC,aAAa;QACbC,SAAS;QACTC,OAAO;QACPC,SAAS;QACTC,eAAe;QACfC,QAAQ;QACRC;MAAgB,CACnB,GAAG,IAAI,CAACC,KAAK;MAEd,MAAM;QACFC,WAAW,EAAE;UAAEC,KAAK;UAAEC;QAAM;MAAE,CACjC,GAAGjB,SAAS;MAEb,MAAMkB,WAAW,GAAGL,gBAAgB,CAAC,IAAI,CAACC,KAAK,EAAEd,SAAS,CAAC;MAC3D,MAAMmB,GAAG,GAAG7B,SAAS,CAAC4B,WAAW,CAAC,IAAIZ,SAAS,CAACY,WAAW,CAAC;MAC5D,MAAME,KAAK,GAAID,GAAG,IAAIZ,aAAa,CAACY,GAAG,CAAC,IAAKjB,WAAW;MAExD,MAAM;QAAEmB,MAAM,EAAEC;MAAU,CAAE,GAAG,IAAI,CAACR,KAAK;MACzC,MAAMO,MAAM,GAAGhC,OAAO,CAACiC,UAAU,CAAC;MAClC,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,MAAM,CAACL,KAAK,EAAEC,MAAM,CAAC;MAEpC,MAAMQ,YAAY,GAAG,QAAQhB,OAAO,CAACiB,UAAU,KAAK;MACpD,OACIjC,KAAA,CAAAkC,aAAA;QAAGnB,SAAS,EAAEA,SAAS;QAAEoB,SAAS,EAAE,aAAaL,CAAC,KAAKC,CAAC,GAAG;QAAEvB,OAAO,EAAEA;MAAO,GACzER,KAAA,CAAAkC,aAAA,CAACjC,WAAW;QAAC6B,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAErB,UAAU,EAAEA,UAAU;QAAEC,QAAQ,EAAEA,QAAQ;QAAEC,UAAU,EAAEA;MAAU,GACvFZ,KAAA,CAAAkC,aAAA,CAAChC,iBAAiB;QAACkC,IAAI,EAAEnB,SAAS;QAAEL,UAAU,EAAEM;MAAe,GAC1Dc,YAAY,CACG,EACpBhC,KAAA,CAAAkC,aAAA;QAAOE,IAAI,EAAEjB;MAAQ,GAAGQ,KAAK,CAAS,CAC5B,CACd;IAEZ,CAAC;EACL;EA7CWU,MAAMA,CAAA;IACT,OAAOrC,KAAA,CAAAkC,aAAA,CAACpC,qBAAqB;MAACwC,IAAI,EAAE,KAAK;MAAEC,OAAO,EAAE,IAAI,CAACjC,SAAS;MAAEkC,MAAM,EAAE,CAAC,WAAW;IAAC,EAAI;EACjG;;AAVcrC,UAAA,CAAAsC,YAAY,GAAG;EACzB3B,aAAa,EAAEf,MAAM,CAAC,KAAK,CAAC;EAC5BU,WAAW,EAAE,KAAK;EAClBW,gBAAgB,EAAEA,CAACsB,CAAkB,EAAErB,KAAU,KAAKA,KAAK,CAACI,WAAW;EACvEG,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACdb,SAAS,EAAE;CACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}