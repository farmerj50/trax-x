{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\SentimentChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, DateTime, Tooltip } from \"@syncfusion/ej2-react-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SentimentChart = ({\n  ticker\n}) => {\n  _s();\n  const [sentimentData, setSentimentData] = useState([]);\n  useEffect(() => {\n    const fetchSentimentData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/sentiment-plot?ticker=${ticker}`);\n        const data = await response.json();\n        if (data && data.dates) {\n          const formattedData = data.dates.map((date, index) => ({\n            x: new Date(date),\n            positive: data.positive[index],\n            negative: data.negative[index],\n            neutral: data.neutral[index]\n          }));\n          setSentimentData(formattedData);\n        } else {\n          setSentimentData([]); // Fallback if no data\n        }\n      } catch (error) {\n        console.error(\"Error fetching sentiment data:\", error);\n        setSentimentData([]);\n      }\n    };\n    fetchSentimentData();\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-chart-container\",\n    children: sentimentData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No sentiment data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChartComponent, {\n      primaryXAxis: {\n        valueType: \"DateTime\",\n        labelFormat: \"MMM dd\",\n        intervalType: \"Days\"\n      },\n      primaryYAxis: {\n        labelFormat: \"{value}\",\n        title: \"Sentiment Count\"\n      },\n      tooltip: {\n        enable: true\n      },\n      dataSource: sentimentData,\n      height: \"300px\",\n      width: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(Inject, {\n        services: [LineSeries, DateTime, Tooltip]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SeriesCollectionDirective, {\n        children: [/*#__PURE__*/_jsxDEV(SeriesDirective, {\n          xName: \"x\",\n          yName: \"positive\",\n          type: \"Line\",\n          name: \"Positive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeriesDirective, {\n          xName: \"x\",\n          yName: \"negative\",\n          type: \"Line\",\n          name: \"Negative\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeriesDirective, {\n          xName: \"x\",\n          yName: \"neutral\",\n          type: \"Line\",\n          name: \"Neutral\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(SentimentChart, \"6S6XNd8y+dKq+CflC7O0ROsavlQ=\");\n_c = SentimentChart;\nexport default SentimentChart;\nvar _c;\n$RefreshReg$(_c, \"SentimentChart\");","map":{"version":3,"names":["React","useState","useEffect","ChartComponent","SeriesCollectionDirective","SeriesDirective","Inject","LineSeries","DateTime","Tooltip","jsxDEV","_jsxDEV","SentimentChart","ticker","_s","sentimentData","setSentimentData","fetchSentimentData","response","fetch","data","json","dates","formattedData","map","date","index","x","Date","positive","negative","neutral","error","console","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","primaryXAxis","valueType","labelFormat","intervalType","primaryYAxis","title","tooltip","enable","dataSource","height","width","services","xName","yName","type","name","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/SentimentChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ChartComponent,\r\n  SeriesCollectionDirective,\r\n  SeriesDirective,\r\n  Inject,\r\n  LineSeries,\r\n  DateTime,\r\n  Tooltip,\r\n} from \"@syncfusion/ej2-react-charts\";\r\n\r\nconst SentimentChart = ({ ticker }) => {\r\n  const [sentimentData, setSentimentData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchSentimentData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/sentiment-plot?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data && data.dates) {\r\n          const formattedData = data.dates.map((date, index) => ({\r\n            x: new Date(date),\r\n            positive: data.positive[index],\r\n            negative: data.negative[index],\r\n            neutral: data.neutral[index],\r\n          }));\r\n          setSentimentData(formattedData);\r\n        } else {\r\n          setSentimentData([]); // Fallback if no data\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sentiment data:\", error);\r\n        setSentimentData([]);\r\n      }\r\n    };\r\n\r\n    fetchSentimentData();\r\n  }, [ticker]);\r\n\r\n  return (\r\n    <div className=\"sentiment-chart-container\">\r\n      {sentimentData.length === 0 ? (\r\n        <p>No sentiment data available.</p>\r\n      ) : (\r\n        <ChartComponent\r\n          primaryXAxis={{ valueType: \"DateTime\", labelFormat: \"MMM dd\", intervalType: \"Days\" }}\r\n          primaryYAxis={{ labelFormat: \"{value}\", title: \"Sentiment Count\" }}\r\n          tooltip={{ enable: true }}\r\n          dataSource={sentimentData}\r\n          height=\"300px\"\r\n          width=\"100%\"\r\n        >\r\n          <Inject services={[LineSeries, DateTime, Tooltip]} />\r\n          <SeriesCollectionDirective>\r\n            <SeriesDirective xName=\"x\" yName=\"positive\" type=\"Line\" name=\"Positive\" />\r\n            <SeriesDirective xName=\"x\" yName=\"negative\" type=\"Line\" name=\"Negative\" />\r\n            <SeriesDirective xName=\"x\" yName=\"neutral\" type=\"Line\" name=\"Neutral\" />\r\n          </SeriesCollectionDirective>\r\n        </ChartComponent>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}