{"ast":null,"code":"import * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\nexport class SingleTooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.handleClick = event => {\n      const {\n        onClick,\n        forChart,\n        options\n      } = this.props;\n      if (onClick !== undefined) {\n        onClick(event, Object.assign({\n          chartId: forChart\n        }, options));\n      }\n    };\n  }\n  /*\n   * Renders the value next to the label.\n   */\n  renderValueNextToLabel() {\n    const {\n      origin,\n      yLabel,\n      yValue,\n      labelFill,\n      valueFill,\n      withShape,\n      fontSize,\n      fontFamily,\n      fontWeight\n    } = this.props;\n    return React.createElement(\"g\", {\n      transform: `translate(${origin[0]}, ${origin[1]})`,\n      onClick: this.handleClick\n    }, withShape ? React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"-6\",\n      width: \"6\",\n      height: \"6\",\n      fill: valueFill\n    }) : null, React.createElement(ToolTipText, {\n      x: withShape ? 8 : 0,\n      y: 0,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight\n    }, React.createElement(ToolTipTSpanLabel, {\n      fill: labelFill\n    }, yLabel, \": \"), React.createElement(\"tspan\", {\n      fill: valueFill\n    }, yValue)));\n  }\n  /*\n   * Renders the value beneath the label.\n   */\n  renderValueBeneathLabel() {\n    const {\n      origin,\n      yLabel,\n      yValue,\n      labelFill,\n      valueFill,\n      withShape,\n      fontSize,\n      fontFamily,\n      fontWeight\n    } = this.props;\n    return React.createElement(\"g\", {\n      transform: `translate(${origin[0]}, ${origin[1]})`,\n      onClick: this.handleClick\n    }, withShape ? React.createElement(\"line\", {\n      x1: 0,\n      y1: 2,\n      x2: 0,\n      y2: 28,\n      stroke: valueFill,\n      strokeWidth: \"4px\"\n    }) : null, React.createElement(ToolTipText, {\n      x: 5,\n      y: 11,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight\n    }, React.createElement(ToolTipTSpanLabel, {\n      fill: labelFill\n    }, yLabel), React.createElement(\"tspan\", {\n      x: \"5\",\n      dy: \"15\",\n      fill: valueFill\n    }, yValue)));\n  }\n  /*\n   * Renders the value next to the label.\n   * The parent component must have a \"text\"-element.\n   */\n  renderInline() {\n    const {\n      yLabel,\n      yValue,\n      labelFill,\n      valueFill,\n      fontSize,\n      fontFamily,\n      fontWeight\n    } = this.props;\n    return React.createElement(\"tspan\", {\n      onClick: this.handleClick,\n      fontFamily: fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight\n    }, React.createElement(ToolTipTSpanLabel, {\n      fill: labelFill\n    }, yLabel, \":\\u00A0\"), React.createElement(\"tspan\", {\n      fill: valueFill\n    }, yValue, \"\\u00A0\\u00A0\"));\n  }\n  render() {\n    const {\n      layout\n    } = this.props;\n    let comp = null;\n    switch (layout) {\n      case \"horizontal\":\n        comp = this.renderValueNextToLabel();\n        break;\n      case \"horizontalRows\":\n        comp = this.renderValueBeneathLabel();\n        break;\n      case \"horizontalInline\":\n        comp = this.renderInline();\n        break;\n      case \"vertical\":\n        comp = this.renderValueNextToLabel();\n        break;\n      case \"verticalRows\":\n        comp = this.renderValueBeneathLabel();\n        break;\n      default:\n        comp = this.renderValueNextToLabel();\n    }\n    return comp;\n  }\n}\nSingleTooltip.defaultProps = {\n  labelFill: \"#4682B4\",\n  valueFill: \"#000000\",\n  withShape: false\n};","map":{"version":3,"names":["React","ToolTipText","ToolTipTSpanLabel","SingleTooltip","Component","constructor","handleClick","event","onClick","forChart","options","props","undefined","Object","assign","chartId","renderValueNextToLabel","origin","yLabel","yValue","labelFill","valueFill","withShape","fontSize","fontFamily","fontWeight","createElement","transform","x","y","width","height","fill","renderValueBeneathLabel","x1","y1","x2","y2","stroke","strokeWidth","dy","renderInline","render","layout","comp","defaultProps"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\SingleTooltip.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { ToolTipText } from \"./ToolTipText\";\nimport { ToolTipTSpanLabel } from \"./ToolTipTSpanLabel\";\n\nexport type layouts = \"horizontal\" | \"horizontalRows\" | \"horizontalInline\" | \"vertical\" | \"verticalRows\";\n\nexport interface SingleTooltipProps {\n    readonly origin: [number, number];\n    readonly yLabel: string;\n    readonly yValue: string;\n    readonly onClick?: (event: React.MouseEvent, details: any) => void;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly labelFill: string;\n    readonly valueFill: string;\n    readonly forChart: number | string;\n    readonly options: any;\n    readonly layout: layouts;\n    readonly withShape: boolean;\n}\n\nexport class SingleTooltip extends React.Component<SingleTooltipProps> {\n    public static defaultProps = {\n        labelFill: \"#4682B4\",\n        valueFill: \"#000000\",\n        withShape: false,\n    };\n\n    /*\n     * Renders the value next to the label.\n     */\n    public renderValueNextToLabel() {\n        const { origin, yLabel, yValue, labelFill, valueFill, withShape, fontSize, fontFamily, fontWeight } =\n            this.props;\n\n        return (\n            <g transform={`translate(${origin[0]}, ${origin[1]})`} onClick={this.handleClick}>\n                {withShape ? <rect x=\"0\" y=\"-6\" width=\"6\" height=\"6\" fill={valueFill} /> : null}\n                <ToolTipText\n                    x={withShape ? 8 : 0}\n                    y={0}\n                    fontFamily={fontFamily}\n                    fontSize={fontSize}\n                    fontWeight={fontWeight}\n                >\n                    <ToolTipTSpanLabel fill={labelFill}>{yLabel}: </ToolTipTSpanLabel>\n                    <tspan fill={valueFill}>{yValue}</tspan>\n                </ToolTipText>\n            </g>\n        );\n    }\n\n    /*\n     * Renders the value beneath the label.\n     */\n    public renderValueBeneathLabel() {\n        const { origin, yLabel, yValue, labelFill, valueFill, withShape, fontSize, fontFamily, fontWeight } =\n            this.props;\n\n        return (\n            <g transform={`translate(${origin[0]}, ${origin[1]})`} onClick={this.handleClick}>\n                {withShape ? <line x1={0} y1={2} x2={0} y2={28} stroke={valueFill} strokeWidth=\"4px\" /> : null}\n                <ToolTipText x={5} y={11} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                    <ToolTipTSpanLabel fill={labelFill}>{yLabel}</ToolTipTSpanLabel>\n                    <tspan x=\"5\" dy=\"15\" fill={valueFill}>\n                        {yValue}\n                    </tspan>\n                </ToolTipText>\n            </g>\n        );\n    }\n\n    /*\n     * Renders the value next to the label.\n     * The parent component must have a \"text\"-element.\n     */\n    public renderInline() {\n        const { yLabel, yValue, labelFill, valueFill, fontSize, fontFamily, fontWeight } = this.props;\n\n        return (\n            <tspan onClick={this.handleClick} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                <ToolTipTSpanLabel fill={labelFill}>{yLabel}:&nbsp;</ToolTipTSpanLabel>\n                <tspan fill={valueFill}>{yValue}&nbsp;&nbsp;</tspan>\n            </tspan>\n        );\n    }\n\n    public render() {\n        const { layout } = this.props;\n        let comp: JSX.Element | null = null;\n\n        switch (layout) {\n            case \"horizontal\":\n                comp = this.renderValueNextToLabel();\n                break;\n            case \"horizontalRows\":\n                comp = this.renderValueBeneathLabel();\n                break;\n            case \"horizontalInline\":\n                comp = this.renderInline();\n                break;\n            case \"vertical\":\n                comp = this.renderValueNextToLabel();\n                break;\n            case \"verticalRows\":\n                comp = this.renderValueBeneathLabel();\n                break;\n            default:\n                comp = this.renderValueNextToLabel();\n        }\n\n        return comp;\n    }\n\n    private readonly handleClick = (event: React.MouseEvent) => {\n        const { onClick, forChart, options } = this.props;\n        if (onClick !== undefined) {\n            onClick(event, { chartId: forChart, ...options });\n        }\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}