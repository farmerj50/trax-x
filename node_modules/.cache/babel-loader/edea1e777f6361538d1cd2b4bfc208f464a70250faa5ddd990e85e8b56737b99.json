{"ast":null,"code":"import * as React from \"react\";\nimport { isDefined, isNotDefined } from \"@react-financial-charts/core\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { HoverTextNearMouse, MouseLocationIndicator } from \"./components\";\nimport { EachLinearRegressionChannel } from \"./wrapper\";\nexport class StandardDeviationChannel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleEnd = (e, xyValue, moreProps) => {\n      const {\n        current\n      } = this.state;\n      const {\n        appearance,\n        channels\n      } = this.props;\n      if (this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n        const newChannels = [...channels.map(d => Object.assign(Object.assign({}, d), {\n          selected: false\n        })), {\n          start: current.start,\n          end: xyValue,\n          selected: true,\n          appearance\n        }];\n        this.setState({\n          current: null\n        }, () => {\n          const {\n            onComplete\n          } = this.props;\n          if (onComplete !== undefined) {\n            onComplete(e, newChannels, moreProps);\n          }\n        });\n      }\n    };\n    this.handleStart = (_, xyValue) => {\n      const {\n        current\n      } = this.state;\n      if (isNotDefined(current) || isNotDefined(current.start)) {\n        this.mouseMoved = false;\n        this.setState({\n          current: {\n            start: xyValue,\n            end: null\n          }\n        }, () => {\n          const {\n            onStart\n          } = this.props;\n          if (onStart !== undefined) {\n            onStart();\n          }\n        });\n      }\n    };\n    this.handleDrawLine = (e, xyValue) => {\n      const {\n        current\n      } = this.state;\n      if (isDefined(current) && isDefined(current.start)) {\n        this.mouseMoved = true;\n        this.setState({\n          current: {\n            start: current.start,\n            end: xyValue\n          }\n        });\n      }\n    };\n    this.handleDragLineComplete = (e, moreProps) => {\n      const {\n        override\n      } = this.state;\n      const {\n        channels\n      } = this.props;\n      if (isDefined(override)) {\n        const newChannels = channels.map((each, idx) => idx === override.index ? Object.assign(Object.assign({}, each), {\n          start: [override.x1Value, override.y1Value],\n          end: [override.x2Value, override.y2Value],\n          selected: true\n        }) : each);\n        this.setState({\n          override: null\n        }, () => {\n          const {\n            onComplete\n          } = this.props;\n          if (onComplete !== undefined) {\n            onComplete(e, newChannels, moreProps);\n          }\n        });\n      }\n    };\n    this.handleDragLine = (e, index, newXYValue) => {\n      this.setState({\n        override: Object.assign({\n          index\n        }, newXYValue)\n      });\n    };\n    this.terminate = terminate.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType(\"channels\").bind(this);\n    this.state = {};\n  }\n  render() {\n    const {\n      appearance,\n      channels,\n      currentPositionOpacity,\n      currentPositionRadius = StandardDeviationChannel.defaultProps.currentPositionRadius,\n      currentPositionStroke,\n      currentPositionStrokeWidth,\n      enabled,\n      hoverText,\n      snapTo\n    } = this.props;\n    const {\n      current,\n      override\n    } = this.state;\n    const eachDefaultAppearance = Object.assign(Object.assign({}, StandardDeviationChannel.defaultProps.appearance), appearance);\n    const hoverTextDefault = Object.assign(Object.assign({}, StandardDeviationChannel.defaultProps.hoverText), hoverText);\n    const tempLine = isDefined(current) && isDefined(current.end) ? React.createElement(EachLinearRegressionChannel, {\n      interactive: false,\n      x1Value: current.start[0],\n      x2Value: current.end[0],\n      appearance: eachDefaultAppearance,\n      hoverText: hoverTextDefault\n    }) : null;\n    return React.createElement(\"g\", null, channels.map((each, idx) => {\n      const eachAppearance = isDefined(each.appearance) ? Object.assign(Object.assign({}, eachDefaultAppearance), each.appearance) : eachDefaultAppearance;\n      const eachHoverText = isDefined(each.hoverText) ? Object.assign(Object.assign({}, hoverTextDefault), each.hoverText) : hoverTextDefault;\n      return React.createElement(EachLinearRegressionChannel, {\n        key: idx,\n        ref: this.saveNodeType(idx),\n        index: idx,\n        selected: each.selected,\n        x1Value: getValueFromOverride(override, idx, \"x1Value\", each.start[0]),\n        x2Value: getValueFromOverride(override, idx, \"x2Value\", each.end[0]),\n        appearance: eachAppearance,\n        snapTo: snapTo,\n        hoverText: eachHoverText,\n        onDrag: this.handleDragLine,\n        onDragComplete: this.handleDragLineComplete,\n        edgeInteractiveCursor: \"react-financial-charts-move-cursor\"\n      });\n    }), tempLine, React.createElement(MouseLocationIndicator, {\n      enabled: enabled,\n      snap: true,\n      snapTo: snapTo,\n      r: currentPositionRadius,\n      stroke: currentPositionStroke,\n      opacity: currentPositionOpacity,\n      strokeWidth: currentPositionStrokeWidth,\n      onMouseDown: this.handleStart,\n      onClick: this.handleEnd,\n      onMouseMove: this.handleDrawLine\n    }));\n  }\n}\nStandardDeviationChannel.defaultProps = {\n  snapTo: d => d.close,\n  appearance: {\n    stroke: \"#000000\",\n    fillOpacity: 0.2,\n    strokeOpacity: 1,\n    strokeWidth: 1,\n    fill: \"#8AAFE2\",\n    edgeStrokeWidth: 2,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    r: 5\n  },\n  currentPositionStroke: \"#000000\",\n  currentPositionOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 4,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click and drag the edge circles\",\n    selectedText: \"\"\n  }),\n  channels: []\n};","map":{"version":3,"names":["React","isDefined","isNotDefined","getValueFromOverride","isHoverForInteractiveType","saveNodeType","terminate","HoverTextNearMouse","MouseLocationIndicator","EachLinearRegressionChannel","StandardDeviationChannel","Component","constructor","props","handleEnd","e","xyValue","moreProps","current","state","appearance","channels","mouseMoved","start","newChannels","map","d","Object","assign","selected","end","setState","onComplete","undefined","handleStart","_","onStart","handleDrawLine","handleDragLineComplete","override","each","idx","index","x1Value","y1Value","x2Value","y2Value","handleDragLine","newXYValue","bind","getSelectionState","render","currentPositionOpacity","currentPositionRadius","defaultProps","currentPositionStroke","currentPositionStrokeWidth","enabled","hoverText","snapTo","eachDefaultAppearance","hoverTextDefault","tempLine","createElement","interactive","eachAppearance","eachHoverText","key","ref","onDrag","onDragComplete","edgeInteractiveCursor","snap","r","stroke","opacity","strokeWidth","onMouseDown","onClick","onMouseMove","close","fillOpacity","strokeOpacity","fill","edgeStrokeWidth","edgeStroke","edgeFill","enable","bgHeight","bgWidth","text","selectedText"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\StandardDeviationChannel.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { isDefined, isNotDefined } from \"@react-financial-charts/core\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { HoverTextNearMouse, MouseLocationIndicator } from \"./components\";\nimport { EachLinearRegressionChannel } from \"./wrapper\";\n\nexport interface StandardDeviationChannelProps {\n    readonly enabled: boolean;\n    readonly snapTo?: (datum: any) => number;\n    readonly onStart?: () => void;\n    readonly onComplete?: (e: React.MouseEvent, newChannels: any, moreProps: any) => void;\n    readonly onSelect?: (e: React.MouseEvent, interactives: any[], moreProps: any) => void;\n    readonly currentPositionStroke?: string;\n    readonly currentPositionStrokeWidth?: number;\n    readonly currentPositionOpacity?: number;\n    readonly currentPositionRadius?: number;\n    readonly appearance: {\n        readonly stroke?: string;\n        readonly strokeOpacity?: number;\n        readonly strokeWidth?: number;\n        readonly fill?: string;\n        readonly fillOpacity?: number;\n        readonly edgeStrokeWidth?: number;\n        readonly edgeStroke?: string;\n        readonly edgeFill?: string;\n        readonly r?: number;\n    };\n    readonly hoverText: object;\n    readonly channels: any[];\n}\n\ninterface StandardDeviationChannelState {\n    current?: any;\n    override?: any;\n}\n\nexport class StandardDeviationChannel extends React.Component<\n    StandardDeviationChannelProps,\n    StandardDeviationChannelState\n> {\n    public static defaultProps = {\n        snapTo: (d: any) => d.close,\n        appearance: {\n            stroke: \"#000000\",\n            fillOpacity: 0.2,\n            strokeOpacity: 1,\n            strokeWidth: 1,\n            fill: \"#8AAFE2\",\n            edgeStrokeWidth: 2,\n            edgeStroke: \"#000000\",\n            edgeFill: \"#FFFFFF\",\n            r: 5,\n        },\n        currentPositionStroke: \"#000000\",\n        currentPositionOpacity: 1,\n        currentPositionStrokeWidth: 3,\n        currentPositionRadius: 4,\n        hoverText: {\n            ...HoverTextNearMouse.defaultProps,\n            enable: true,\n            bgHeight: \"auto\",\n            bgWidth: \"auto\",\n            text: \"Click and drag the edge circles\",\n            selectedText: \"\",\n        },\n        channels: [],\n    };\n\n    // @ts-ignore\n    private getSelectionState: any;\n    private mouseMoved: any;\n    private saveNodeType: any;\n\n    // @ts-ignore\n    private terminate: any;\n\n    public constructor(props: StandardDeviationChannelProps) {\n        super(props);\n\n        this.terminate = terminate.bind(this);\n        this.saveNodeType = saveNodeType.bind(this);\n        this.getSelectionState = isHoverForInteractiveType(\"channels\").bind(this);\n\n        this.state = {};\n    }\n\n    public render() {\n        const {\n            appearance,\n            channels,\n            currentPositionOpacity,\n            currentPositionRadius = StandardDeviationChannel.defaultProps.currentPositionRadius,\n            currentPositionStroke,\n            currentPositionStrokeWidth,\n            enabled,\n            hoverText,\n            snapTo,\n        } = this.props;\n        const { current, override } = this.state;\n\n        const eachDefaultAppearance = {\n            ...StandardDeviationChannel.defaultProps.appearance,\n            ...appearance,\n        };\n\n        const hoverTextDefault = {\n            ...StandardDeviationChannel.defaultProps.hoverText,\n            ...hoverText,\n        };\n\n        const tempLine =\n            isDefined(current) && isDefined(current.end) ? (\n                <EachLinearRegressionChannel\n                    interactive={false}\n                    x1Value={current.start[0]}\n                    x2Value={current.end[0]}\n                    appearance={eachDefaultAppearance}\n                    hoverText={hoverTextDefault}\n                />\n            ) : null;\n\n        return (\n            <g>\n                {channels.map((each, idx) => {\n                    const eachAppearance = isDefined(each.appearance)\n                        ? { ...eachDefaultAppearance, ...each.appearance }\n                        : eachDefaultAppearance;\n\n                    const eachHoverText = isDefined(each.hoverText)\n                        ? { ...hoverTextDefault, ...each.hoverText }\n                        : hoverTextDefault;\n\n                    return (\n                        <EachLinearRegressionChannel\n                            key={idx}\n                            ref={this.saveNodeType(idx)}\n                            index={idx}\n                            selected={each.selected}\n                            x1Value={getValueFromOverride(override, idx, \"x1Value\", each.start[0])}\n                            x2Value={getValueFromOverride(override, idx, \"x2Value\", each.end[0])}\n                            appearance={eachAppearance}\n                            snapTo={snapTo}\n                            hoverText={eachHoverText}\n                            onDrag={this.handleDragLine}\n                            onDragComplete={this.handleDragLineComplete}\n                            edgeInteractiveCursor=\"react-financial-charts-move-cursor\"\n                        />\n                    );\n                })}\n                {tempLine}\n                <MouseLocationIndicator\n                    enabled={enabled}\n                    snap\n                    snapTo={snapTo}\n                    r={currentPositionRadius}\n                    stroke={currentPositionStroke}\n                    opacity={currentPositionOpacity}\n                    strokeWidth={currentPositionStrokeWidth}\n                    onMouseDown={this.handleStart}\n                    onClick={this.handleEnd}\n                    onMouseMove={this.handleDrawLine}\n                />\n            </g>\n        );\n    }\n\n    private handleEnd = (e: React.MouseEvent, xyValue: any, moreProps: any) => {\n        const { current } = this.state;\n        const { appearance, channels } = this.props;\n\n        if (this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n            const newChannels = [\n                ...channels.map((d) => ({ ...d, selected: false })),\n                {\n                    start: current.start,\n                    end: xyValue,\n                    selected: true,\n                    appearance,\n                },\n            ];\n\n            this.setState(\n                {\n                    current: null,\n                },\n                () => {\n                    const { onComplete } = this.props;\n                    if (onComplete !== undefined) {\n                        onComplete(e, newChannels, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleStart = (_: React.MouseEvent, xyValue: any) => {\n        const { current } = this.state;\n\n        if (isNotDefined(current) || isNotDefined(current.start)) {\n            this.mouseMoved = false;\n\n            this.setState(\n                {\n                    current: {\n                        start: xyValue,\n                        end: null,\n                    },\n                },\n                () => {\n                    const { onStart } = this.props;\n                    if (onStart !== undefined) {\n                        onStart();\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleDrawLine = (e: React.MouseEvent, xyValue: any) => {\n        const { current } = this.state;\n\n        if (isDefined(current) && isDefined(current.start)) {\n            this.mouseMoved = true;\n            this.setState({\n                current: {\n                    start: current.start,\n                    end: xyValue,\n                },\n            });\n        }\n    };\n\n    private readonly handleDragLineComplete = (e: React.MouseEvent, moreProps: any) => {\n        const { override } = this.state;\n        const { channels } = this.props;\n        if (isDefined(override)) {\n            const newChannels = channels.map((each, idx) =>\n                idx === override.index\n                    ? {\n                          ...each,\n                          start: [override.x1Value, override.y1Value],\n                          end: [override.x2Value, override.y2Value],\n                          selected: true,\n                      }\n                    : each,\n            );\n            this.setState(\n                {\n                    override: null,\n                },\n                () => {\n                    const { onComplete } = this.props;\n                    if (onComplete !== undefined) {\n                        onComplete(e, newChannels, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleDragLine = (e: React.MouseEvent, index: number | undefined, newXYValue: any) => {\n        this.setState({\n            override: {\n                index,\n                ...newXYValue,\n            },\n        });\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}