{"ast":null,"code":"import { first, functor, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { area } from \"d3-shape\";\nimport * as React from \"react\";\n/**\n * `AreaOnlySeries` component.\n */\nexport class AreaOnlySeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        connectNulls,\n        fillStyle,\n        curve,\n        canvasClip,\n        yAccessor,\n        defined = AreaOnlySeries.defaultProps.defined,\n        base\n      } = this.props;\n      const {\n        xScale,\n        chartConfig: {\n          yScale\n        },\n        plotData,\n        xAccessor\n      } = moreProps;\n      if (canvasClip !== undefined) {\n        ctx.save();\n        canvasClip(ctx, moreProps);\n      }\n      if (fillStyle !== undefined) {\n        if (typeof fillStyle === \"string\") {\n          ctx.fillStyle = fillStyle;\n        } else {\n          ctx.fillStyle = fillStyle(ctx, moreProps);\n        }\n      }\n      const newBase = functor(base);\n      const areaSeries = area().x(d => Math.round(xScale(xAccessor(d)))).y0(d => newBase(yScale, d, moreProps)).y1(d => Math.round(yScale(yAccessor(d))));\n      if (curve !== undefined) {\n        areaSeries.curve(curve);\n      }\n      if (!connectNulls) {\n        areaSeries.defined(d => defined(yAccessor(d)));\n      }\n      ctx.beginPath();\n      areaSeries.context(ctx)(plotData);\n      ctx.fill();\n      if (canvasClip !== undefined) {\n        ctx.restore();\n      }\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      canvasDraw: this.drawOnCanvas,\n      canvasToDraw: getAxisCanvas,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nAreaOnlySeries.defaultProps = {\n  connectNulls: false,\n  defined: d => d !== undefined && !isNaN(d),\n  base: yScale => first(yScale.range())\n};","map":{"version":3,"names":["first","functor","getAxisCanvas","GenericChartComponent","area","React","AreaOnlySeries","Component","constructor","drawOnCanvas","ctx","moreProps","connectNulls","fillStyle","curve","canvasClip","yAccessor","defined","defaultProps","base","props","xScale","chartConfig","yScale","plotData","xAccessor","undefined","save","newBase","areaSeries","x","d","Math","round","y0","y1","beginPath","context","fill","restore","render","createElement","canvasDraw","canvasToDraw","drawOn","isNaN","range"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\AreaOnlySeries.tsx"],"sourcesContent":["import { first, functor, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { ScaleContinuousNumeric } from \"d3-scale\";\nimport { area, CurveFactory } from \"d3-shape\";\nimport * as React from \"react\";\n\nexport interface AreaOnlySeriesProps {\n    /**\n     * The base y value to draw the area to.\n     */\n    readonly base?:\n        | number\n        | ((yScale: ScaleContinuousNumeric<number, number>, d: [number, number], moreProps: any) => number | undefined);\n    readonly canvasClip?: (context: CanvasRenderingContext2D, moreProps: any) => void;\n    /**\n     * Wether to connect the area between undefined data points.\n     */\n    readonly connectNulls?: boolean;\n    /**\n     * A factory for a curve generator for the area.\n     */\n    readonly curve?: CurveFactory;\n    /**\n     * The default accessor for defined returns not NaN, thus assumes that the input data is always a number.\n     */\n    readonly defined?: (data: number | undefined) => boolean;\n    /**\n     * Color, gradient, or pattern to use for fill.\n     */\n    readonly fillStyle?:\n        | string\n        | ((context: CanvasRenderingContext2D, moreProps: any) => string | CanvasGradient | CanvasPattern);\n    /**\n     * Selector for data to plot.\n     */\n    readonly yAccessor: (data: any) => number | undefined;\n}\n\n/**\n * `AreaOnlySeries` component.\n */\nexport class AreaOnlySeries extends React.Component<AreaOnlySeriesProps> {\n    public static defaultProps = {\n        connectNulls: false,\n        defined: (d: number | undefined) => d !== undefined && !isNaN(d),\n        base: (yScale: ScaleContinuousNumeric<number, number>) => first(yScale.range()),\n    };\n\n    public render() {\n        return <GenericChartComponent canvasDraw={this.drawOnCanvas} canvasToDraw={getAxisCanvas} drawOn={[\"pan\"]} />;\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const {\n            connectNulls,\n            fillStyle,\n            curve,\n            canvasClip,\n            yAccessor,\n            defined = AreaOnlySeries.defaultProps.defined,\n            base,\n        } = this.props;\n\n        const {\n            xScale,\n            chartConfig: { yScale },\n            plotData,\n            xAccessor,\n        } = moreProps;\n\n        if (canvasClip !== undefined) {\n            ctx.save();\n            canvasClip(ctx, moreProps);\n        }\n\n        if (fillStyle !== undefined) {\n            if (typeof fillStyle === \"string\") {\n                ctx.fillStyle = fillStyle;\n            } else {\n                ctx.fillStyle = fillStyle(ctx, moreProps);\n            }\n        }\n\n        const newBase = functor(base);\n\n        const areaSeries = area()\n            .x((d) => Math.round(xScale(xAccessor(d))))\n            .y0((d) => newBase(yScale, d, moreProps))\n            .y1((d) => Math.round(yScale(yAccessor(d))));\n\n        if (curve !== undefined) {\n            areaSeries.curve(curve);\n        }\n\n        if (!connectNulls) {\n            areaSeries.defined((d) => defined(yAccessor(d)));\n        }\n\n        ctx.beginPath();\n        areaSeries.context(ctx)(plotData);\n        ctx.fill();\n\n        if (canvasClip !== undefined) {\n            ctx.restore();\n        }\n    };\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,OAAO,EAAEC,aAAa,EAAEC,qBAAqB,QAAQ,8BAA8B;AAEnG,SAASC,IAAI,QAAsB,UAAU;AAC7C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAkC9B;;;AAGA,OAAM,MAAOC,cAAe,SAAQD,KAAK,CAACE,SAA8B;EAAxEC,YAAA;;IAWqB,KAAAC,YAAY,GAAG,CAACC,GAA6B,EAAEC,SAAc,KAAI;MAC9E,MAAM;QACFC,YAAY;QACZC,SAAS;QACTC,KAAK;QACLC,UAAU;QACVC,SAAS;QACTC,OAAO,GAAGX,cAAc,CAACY,YAAY,CAACD,OAAO;QAC7CE;MAAI,CACP,GAAG,IAAI,CAACC,KAAK;MAEd,MAAM;QACFC,MAAM;QACNC,WAAW,EAAE;UAAEC;QAAM,CAAE;QACvBC,QAAQ;QACRC;MAAS,CACZ,GAAGd,SAAS;MAEb,IAAII,UAAU,KAAKW,SAAS,EAAE;QAC1BhB,GAAG,CAACiB,IAAI,EAAE;QACVZ,UAAU,CAACL,GAAG,EAAEC,SAAS,CAAC;;MAG9B,IAAIE,SAAS,KAAKa,SAAS,EAAE;QACzB,IAAI,OAAOb,SAAS,KAAK,QAAQ,EAAE;UAC/BH,GAAG,CAACG,SAAS,GAAGA,SAAS;SAC5B,MAAM;UACHH,GAAG,CAACG,SAAS,GAAGA,SAAS,CAACH,GAAG,EAAEC,SAAS,CAAC;;;MAIjD,MAAMiB,OAAO,GAAG3B,OAAO,CAACkB,IAAI,CAAC;MAE7B,MAAMU,UAAU,GAAGzB,IAAI,EAAE,CACpB0B,CAAC,CAAEC,CAAC,IAAKC,IAAI,CAACC,KAAK,CAACZ,MAAM,CAACI,SAAS,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1CG,EAAE,CAAEH,CAAC,IAAKH,OAAO,CAACL,MAAM,EAAEQ,CAAC,EAAEpB,SAAS,CAAC,CAAC,CACxCwB,EAAE,CAAEJ,CAAC,IAAKC,IAAI,CAACC,KAAK,CAACV,MAAM,CAACP,SAAS,CAACe,CAAC,CAAC,CAAC,CAAC,CAAC;MAEhD,IAAIjB,KAAK,KAAKY,SAAS,EAAE;QACrBG,UAAU,CAACf,KAAK,CAACA,KAAK,CAAC;;MAG3B,IAAI,CAACF,YAAY,EAAE;QACfiB,UAAU,CAACZ,OAAO,CAAEc,CAAC,IAAKd,OAAO,CAACD,SAAS,CAACe,CAAC,CAAC,CAAC,CAAC;;MAGpDrB,GAAG,CAAC0B,SAAS,EAAE;MACfP,UAAU,CAACQ,OAAO,CAAC3B,GAAG,CAAC,CAACc,QAAQ,CAAC;MACjCd,GAAG,CAAC4B,IAAI,EAAE;MAEV,IAAIvB,UAAU,KAAKW,SAAS,EAAE;QAC1BhB,GAAG,CAAC6B,OAAO,EAAE;;IAErB,CAAC;EACL;EA1DWC,MAAMA,CAAA;IACT,OAAOnC,KAAA,CAAAoC,aAAA,CAACtC,qBAAqB;MAACuC,UAAU,EAAE,IAAI,CAACjC,YAAY;MAAEkC,YAAY,EAAEzC,aAAa;MAAE0C,MAAM,EAAE,CAAC,KAAK;IAAC,EAAI;EACjH;;AARctC,cAAA,CAAAY,YAAY,GAAG;EACzBN,YAAY,EAAE,KAAK;EACnBK,OAAO,EAAGc,CAAqB,IAAKA,CAAC,KAAKL,SAAS,IAAI,CAACmB,KAAK,CAACd,CAAC,CAAC;EAChEZ,IAAI,EAAGI,MAA8C,IAAKvB,KAAK,CAACuB,MAAM,CAACuB,KAAK,EAAE;CACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}