{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabby\\\\trax-x\\\\src\\\\components\\\\SentimentChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, LineSeries, DateTime, Tooltip } from \"@syncfusion/ej2-react-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SentimentChart = ({\n  ticker\n}) => {\n  _s();\n  const [sentimentData, setSentimentData] = useState([]);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const fetchSentimentData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/sentiment-plot?ticker=${ticker}`);\n        const data = await response.json();\n        if (data && data.dates && data.positive && data.negative && data.neutral) {\n          const formattedData = data.dates.map((date, index) => {\n            var _data$positive$index, _data$negative$index, _data$neutral$index;\n            return {\n              x: new Date(date),\n              positive: (_data$positive$index = data.positive[index]) !== null && _data$positive$index !== void 0 ? _data$positive$index : 0,\n              // Default to 0\n              negative: (_data$negative$index = data.negative[index]) !== null && _data$negative$index !== void 0 ? _data$negative$index : 0,\n              neutral: (_data$neutral$index = data.neutral[index]) !== null && _data$neutral$index !== void 0 ? _data$neutral$index : 0\n            };\n          });\n          setSentimentData(formattedData);\n          setError(\"\"); // Clear error\n        } else {\n          setSentimentData([]);\n          setError(\"No sentiment data available.\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching sentiment data:\", err);\n        setSentimentData([]);\n        setError(\"Failed to load sentiment data.\");\n      }\n    };\n    fetchSentimentData();\n  }, [ticker]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sentiment-chart-container\",\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChartComponent, {\n      primaryXAxis: {\n        valueType: \"DateTime\",\n        labelFormat: \"MMM dd\",\n        intervalType: \"Days\",\n        edgeLabelPlacement: \"Shift\",\n        title: \"Date\"\n      },\n      primaryYAxis: {\n        labelFormat: \"{value}\",\n        title: \"Sentiment Count\",\n        minimum: 0,\n        interval: 1\n      },\n      tooltip: {\n        enable: true\n      },\n      dataSource: sentimentData,\n      height: \"300px\",\n      width: \"100%\",\n      children: [/*#__PURE__*/_jsxDEV(Inject, {\n        services: [LineSeries, DateTime, Tooltip]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SeriesCollectionDirective, {\n        children: [/*#__PURE__*/_jsxDEV(SeriesDirective, {\n          xName: \"x\",\n          yName: \"positive\",\n          type: \"Line\",\n          name: \"Positive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeriesDirective, {\n          xName: \"x\",\n          yName: \"negative\",\n          type: \"Line\",\n          name: \"Negative\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SeriesDirective, {\n          xName: \"x\",\n          yName: \"neutral\",\n          type: \"Line\",\n          name: \"Neutral\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(SentimentChart, \"yXYlednnK+mk1TG2tYvok/TtY44=\");\n_c = SentimentChart;\nexport default SentimentChart;\nvar _c;\n$RefreshReg$(_c, \"SentimentChart\");","map":{"version":3,"names":["React","useState","useEffect","ChartComponent","SeriesCollectionDirective","SeriesDirective","Inject","LineSeries","DateTime","Tooltip","jsxDEV","_jsxDEV","SentimentChart","ticker","_s","sentimentData","setSentimentData","error","setError","fetchSentimentData","response","fetch","data","json","dates","positive","negative","neutral","formattedData","map","date","index","_data$positive$index","_data$negative$index","_data$neutral$index","x","Date","err","console","className","children","style","color","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","primaryXAxis","valueType","labelFormat","intervalType","edgeLabelPlacement","title","primaryYAxis","minimum","interval","tooltip","enable","dataSource","height","width","services","xName","yName","type","name","_c","$RefreshReg$"],"sources":["C:/Users/gabby/trax-x/src/components/SentimentChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  ChartComponent,\r\n  SeriesCollectionDirective,\r\n  SeriesDirective,\r\n  Inject,\r\n  LineSeries,\r\n  DateTime,\r\n  Tooltip,\r\n} from \"@syncfusion/ej2-react-charts\";\r\n\r\nconst SentimentChart = ({ ticker }) => {\r\n  const [sentimentData, setSentimentData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchSentimentData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/sentiment-plot?ticker=${ticker}`);\r\n        const data = await response.json();\r\n\r\n        if (data && data.dates && data.positive && data.negative && data.neutral) {\r\n          const formattedData = data.dates.map((date, index) => ({\r\n            x: new Date(date),\r\n            positive: data.positive[index] ?? 0, // Default to 0\r\n            negative: data.negative[index] ?? 0,\r\n            neutral: data.neutral[index] ?? 0,\r\n          }));\r\n          setSentimentData(formattedData);\r\n          setError(\"\"); // Clear error\r\n        } else {\r\n          setSentimentData([]);\r\n          setError(\"No sentiment data available.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching sentiment data:\", err);\r\n        setSentimentData([]);\r\n        setError(\"Failed to load sentiment data.\");\r\n      }\r\n    };\r\n\r\n    fetchSentimentData();\r\n  }, [ticker]);\r\n\r\n  return (\r\n    <div className=\"sentiment-chart-container\">\r\n      {error ? (\r\n        <p style={{ color: \"red\", textAlign: \"center\" }}>{error}</p>\r\n      ) : (\r\n        <ChartComponent\r\n          primaryXAxis={{\r\n            valueType: \"DateTime\",\r\n            labelFormat: \"MMM dd\",\r\n            intervalType: \"Days\",\r\n            edgeLabelPlacement: \"Shift\",\r\n            title: \"Date\",\r\n          }}\r\n          primaryYAxis={{\r\n            labelFormat: \"{value}\",\r\n            title: \"Sentiment Count\",\r\n            minimum: 0,\r\n            interval: 1,\r\n          }}\r\n          tooltip={{ enable: true }}\r\n          dataSource={sentimentData}\r\n          height=\"300px\"\r\n          width=\"100%\"\r\n        >\r\n          <Inject services={[LineSeries, DateTime, Tooltip]} />\r\n          <SeriesCollectionDirective>\r\n            <SeriesDirective xName=\"x\" yName=\"positive\" type=\"Line\" name=\"Positive\" />\r\n            <SeriesDirective xName=\"x\" yName=\"negative\" type=\"Line\" name=\"Negative\" />\r\n            <SeriesDirective xName=\"x\" yName=\"neutral\" type=\"Line\" name=\"Neutral\" />\r\n          </SeriesCollectionDirective>\r\n        </ChartComponent>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SentimentChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}