{"ast":null,"code":"import * as React from \"react\";\nimport { isDefined, isNotDefined, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport class PointAndFigureSeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        xAccessor,\n        xScale,\n        chartConfig: {\n          yScale\n        },\n        plotData\n      } = moreProps;\n      const columns = this.getColumns(xScale, xAccessor, yScale, plotData);\n      this.drawOnCanvasPrivate(ctx, this.props, columns);\n    };\n    this.getColumns = (xScale, xAccessor, yScale, plotData) => {\n      const width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n      const columnWidth = width / (plotData.length - 1);\n      let anyBox;\n      let j = 0;\n      while (isNotDefined(anyBox)) {\n        if (isDefined(plotData[j].close)) {\n          anyBox = plotData[j].boxes[0];\n        } else {\n          break;\n        }\n        j++;\n      }\n      const boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n      const columns = plotData.filter(d => isDefined(d.close)).map(d => {\n        const boxes = d.boxes.map(box => ({\n          columnWidth,\n          boxHeight,\n          open: yScale(box.open),\n          close: yScale(box.close)\n        }));\n        const xOffset = xScale(xAccessor(d)) - columnWidth / 2;\n        return {\n          boxes,\n          direction: d.direction,\n          offset: [xOffset, 0]\n        };\n      });\n      return columns;\n    };\n    this.drawOnCanvasPrivate = (ctx, props, columns) => {\n      const {\n        stroke,\n        fill,\n        strokeWidth\n      } = props;\n      ctx.lineWidth = strokeWidth;\n      columns.forEach(col => {\n        const [offsetX, offsetY] = col.offset;\n        col.boxes.forEach(box => {\n          if (col.direction > 0) {\n            ctx.fillStyle = fill.up;\n            ctx.strokeStyle = stroke.up;\n            ctx.beginPath();\n            ctx.moveTo(offsetX, offsetY + box.open);\n            ctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n            ctx.moveTo(offsetX, offsetY + box.close);\n            ctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n            ctx.stroke();\n          } else {\n            ctx.fillStyle = fill.down;\n            ctx.strokeStyle = stroke.down;\n            ctx.beginPath();\n            const [x, y] = [offsetX + box.columnWidth / 2, offsetY + box.open + box.boxHeight / 2];\n            const [rx, ry] = [box.columnWidth / 2, box.boxHeight / 2];\n            ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n            ctx.stroke();\n          }\n        });\n      });\n      ctx.stroke();\n    };\n  }\n  render() {\n    const {\n      clip\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      clip: clip,\n      canvasDraw: this.drawOnCanvas,\n      canvasToDraw: getAxisCanvas,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nPointAndFigureSeries.defaultProps = {\n  className: \"react-financial-charts-point-and-figure\",\n  strokeWidth: 1,\n  stroke: {\n    up: \"#6BA583\",\n    down: \"#FF0000\"\n  },\n  fill: {\n    up: \"none\",\n    down: \"none\"\n  },\n  clip: true\n};","map":{"version":3,"names":["React","isDefined","isNotDefined","getAxisCanvas","GenericChartComponent","PointAndFigureSeries","Component","constructor","drawOnCanvas","ctx","moreProps","xAccessor","xScale","chartConfig","yScale","plotData","columns","getColumns","drawOnCanvasPrivate","props","width","length","columnWidth","anyBox","j","close","boxes","boxHeight","Math","abs","open","filter","d","map","box","xOffset","direction","offset","stroke","fill","strokeWidth","lineWidth","forEach","col","offsetX","offsetY","fillStyle","up","strokeStyle","beginPath","moveTo","lineTo","down","x","y","rx","ry","ellipse","PI","render","clip","createElement","canvasDraw","canvasToDraw","drawOn","defaultProps","className"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\PointAndFigureSeries.tsx"],"sourcesContent":["import { ScaleContinuousNumeric } from \"d3-scale\";\nimport * as React from \"react\";\nimport { isDefined, isNotDefined, getAxisCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\n\nexport interface PointAndFigureSeriesProps {\n    readonly className?: string;\n    readonly clip?: boolean;\n    readonly fill?: {\n        up: string;\n        down: string;\n    };\n    readonly stroke?: {\n        up: string;\n        down: string;\n    };\n    readonly strokeWidth?: number;\n}\n\nexport class PointAndFigureSeries extends React.Component<PointAndFigureSeriesProps> {\n    public static defaultProps = {\n        className: \"react-financial-charts-point-and-figure\",\n        strokeWidth: 1,\n        stroke: {\n            up: \"#6BA583\",\n            down: \"#FF0000\",\n        },\n        fill: {\n            up: \"none\",\n            down: \"none\",\n        },\n        clip: true,\n    };\n\n    public render() {\n        const { clip } = this.props;\n\n        return (\n            <GenericChartComponent\n                clip={clip}\n                canvasDraw={this.drawOnCanvas}\n                canvasToDraw={getAxisCanvas}\n                drawOn={[\"pan\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const {\n            xAccessor,\n            xScale,\n            chartConfig: { yScale },\n            plotData,\n        } = moreProps;\n\n        const columns = this.getColumns(xScale, xAccessor, yScale, plotData);\n\n        this.drawOnCanvasPrivate(ctx, this.props, columns);\n    };\n\n    private readonly getColumns = (\n        xScale: ScaleContinuousNumeric<number, number>,\n        xAccessor: any,\n        yScale: ScaleContinuousNumeric<number, number>,\n        plotData: any[],\n    ) => {\n        const width = xScale(xAccessor(plotData[plotData.length - 1])) - xScale(xAccessor(plotData[0]));\n\n        const columnWidth = width / (plotData.length - 1);\n\n        let anyBox;\n        let j = 0;\n        while (isNotDefined(anyBox)) {\n            if (isDefined(plotData[j].close)) {\n                anyBox = plotData[j].boxes[0];\n            } else {\n                break;\n            }\n            j++;\n        }\n\n        const boxHeight = Math.abs(yScale(anyBox.open) - yScale(anyBox.close));\n\n        const columns = plotData\n            .filter((d) => isDefined(d.close))\n            .map((d) => {\n                const boxes = d.boxes.map((box: any) => ({\n                    columnWidth,\n                    boxHeight,\n                    open: yScale(box.open),\n                    close: yScale(box.close),\n                }));\n\n                const xOffset = xScale(xAccessor(d)) - columnWidth / 2;\n                return {\n                    boxes,\n                    direction: d.direction,\n                    offset: [xOffset, 0],\n                };\n            });\n        return columns;\n    };\n\n    private readonly drawOnCanvasPrivate = (ctx: CanvasRenderingContext2D, props: any, columns: any[]) => {\n        const { stroke, fill, strokeWidth } = props;\n\n        ctx.lineWidth = strokeWidth;\n\n        columns.forEach((col) => {\n            const [offsetX, offsetY] = col.offset;\n            col.boxes.forEach((box: any) => {\n                if (col.direction > 0) {\n                    ctx.fillStyle = fill.up;\n                    ctx.strokeStyle = stroke.up;\n\n                    ctx.beginPath();\n\n                    ctx.moveTo(offsetX, offsetY + box.open);\n                    ctx.lineTo(offsetX + box.columnWidth, offsetY + box.close);\n                    ctx.moveTo(offsetX, offsetY + box.close);\n                    ctx.lineTo(offsetX + box.columnWidth, offsetY + box.open);\n\n                    ctx.stroke();\n                } else {\n                    ctx.fillStyle = fill.down;\n                    ctx.strokeStyle = stroke.down;\n\n                    ctx.beginPath();\n\n                    const [x, y] = [offsetX + box.columnWidth / 2, offsetY + box.open + box.boxHeight / 2];\n                    const [rx, ry] = [box.columnWidth / 2, box.boxHeight / 2];\n\n                    ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\n                    ctx.stroke();\n                }\n            });\n        });\n\n        ctx.stroke();\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}