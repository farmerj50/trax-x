{"ast":null,"code":"import { getClosestItemIndexes, getStrokeDasharrayCanvas, getAxisCanvas, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nimport { line } from \"d3-shape\";\nimport * as React from \"react\";\n/**\n * `LineSeries` component.\n */\nexport class LineSeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = lineDash => (ctx, moreProps) => {\n      const {\n        connectNulls,\n        yAccessor,\n        hoverStrokeWidth = LineSeries.defaultProps.hoverStrokeWidth,\n        defined = LineSeries.defaultProps.defined,\n        curve,\n        canvasClip,\n        strokeStyle,\n        strokeWidth = LineSeries.defaultProps.strokeWidth\n      } = this.props;\n      const {\n        xAccessor,\n        xScale,\n        chartConfig,\n        plotData,\n        hovering\n      } = moreProps;\n      if (!chartConfig) {\n        console.warn(\"LineSeries received no chartConfig, is it inside of a Chart?\");\n        return;\n      }\n      const {\n        yScale\n      } = chartConfig;\n      if (canvasClip !== undefined) {\n        ctx.save();\n        canvasClip(ctx, moreProps);\n      }\n      ctx.lineWidth = hovering ? hoverStrokeWidth : strokeWidth;\n      if (strokeStyle !== undefined) {\n        ctx.strokeStyle = strokeStyle;\n      }\n      if (lineDash !== undefined) {\n        ctx.setLineDash(lineDash);\n      }\n      const dataSeries = line().x(d => Math.round(xScale(xAccessor(d)))).y(d => Math.round(yScale(yAccessor(d))));\n      if (curve !== undefined) {\n        dataSeries.curve(curve);\n      }\n      if (!connectNulls) {\n        dataSeries.defined(d => defined(yAccessor(d)));\n      }\n      ctx.beginPath();\n      dataSeries.context(ctx)(plotData);\n      ctx.stroke();\n      if (canvasClip !== undefined) {\n        ctx.restore();\n      }\n    };\n    this.isHover = moreProps => {\n      const {\n        highlightOnHover,\n        yAccessor,\n        hoverTolerance = LineSeries.defaultProps.hoverTolerance\n      } = this.props;\n      if (!highlightOnHover) {\n        return false;\n      }\n      const {\n        chartConfig: {\n          yScale,\n          origin\n        },\n        xAccessor,\n        mouseXY,\n        currentItem,\n        xScale,\n        plotData\n      } = moreProps;\n      const [x, y] = mouseXY;\n      const radius = hoverTolerance;\n      const {\n        left,\n        right\n      } = getClosestItemIndexes(plotData, xScale.invert(x), xAccessor);\n      if (left === right) {\n        const cy = yScale(yAccessor(currentItem)) + origin[1];\n        const cx = xScale(xAccessor(currentItem)) + origin[0];\n        const hovering1 = Math.pow(x - cx, 2) + Math.pow(y - cy, 2) < Math.pow(radius, 2);\n        return hovering1;\n      } else {\n        const l = plotData[left];\n        const r = plotData[right];\n        const x1 = xScale(xAccessor(l)) + origin[0];\n        const y1 = yScale(yAccessor(l)) + origin[1];\n        const x2 = xScale(xAccessor(r)) + origin[0];\n        const y2 = yScale(yAccessor(r)) + origin[1];\n        // y = m * x + b\n        const m /* slope */ = (y2 - y1) / (x2 - x1);\n        const b /* y intercept */ = -1 * m * x1 + y1;\n        const desiredY = Math.round(m * x + b);\n        const hovering2 = y >= desiredY - radius && y <= desiredY + radius;\n        return hovering2;\n      }\n    };\n  }\n  render() {\n    const {\n      highlightOnHover,\n      onClick,\n      onContextMenu,\n      onDoubleClick,\n      onHover,\n      onUnHover,\n      strokeDasharray\n    } = this.props;\n    const hoverProps = highlightOnHover || onHover || onUnHover ? {\n      isHover: this.isHover,\n      drawOn: [\"mousemove\", \"pan\"],\n      canvasToDraw: getMouseCanvas\n    } : {\n      drawOn: [\"pan\"],\n      canvasToDraw: getAxisCanvas\n    };\n    const lineDash = getStrokeDasharrayCanvas(strokeDasharray);\n    return React.createElement(GenericChartComponent, Object.assign({\n      canvasDraw: this.drawOnCanvas(lineDash),\n      onClickWhenHover: onClick,\n      onDoubleClickWhenHover: onDoubleClick,\n      onContextMenuWhenHover: onContextMenu,\n      onHover: onHover,\n      onUnHover: onUnHover\n    }, hoverProps));\n  }\n}\nLineSeries.defaultProps = {\n  connectNulls: false,\n  defined: d => d !== undefined && !isNaN(d),\n  hoverStrokeWidth: 4,\n  hoverTolerance: 6,\n  highlightOnHover: false,\n  strokeDasharray: \"Solid\",\n  strokeStyle: \"#2196f3\",\n  strokeWidth: 1\n};","map":{"version":3,"names":["getClosestItemIndexes","getStrokeDasharrayCanvas","getAxisCanvas","getMouseCanvas","GenericChartComponent","line","React","LineSeries","Component","constructor","drawOnCanvas","lineDash","ctx","moreProps","connectNulls","yAccessor","hoverStrokeWidth","defaultProps","defined","curve","canvasClip","strokeStyle","strokeWidth","props","xAccessor","xScale","chartConfig","plotData","hovering","console","warn","yScale","undefined","save","lineWidth","setLineDash","dataSeries","x","d","Math","round","y","beginPath","context","stroke","restore","isHover","highlightOnHover","hoverTolerance","origin","mouseXY","currentItem","radius","left","right","invert","cy","cx","hovering1","pow","l","r","x1","y1","x2","y2","m","b","desiredY","hovering2","render","onClick","onContextMenu","onDoubleClick","onHover","onUnHover","strokeDasharray","hoverProps","drawOn","canvasToDraw","createElement","Object","assign","canvasDraw","onClickWhenHover","onDoubleClickWhenHover","onContextMenuWhenHover","isNaN"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\LineSeries.tsx"],"sourcesContent":["import {\n    getClosestItemIndexes,\n    getStrokeDasharrayCanvas,\n    strokeDashTypes,\n    getAxisCanvas,\n    getMouseCanvas,\n    GenericChartComponent,\n    MoreProps,\n} from \"@react-financial-charts/core\";\nimport { line, CurveFactoryLineOnly, CurveFactory } from \"d3-shape\";\nimport * as React from \"react\";\n\nexport interface LineSeriesProps {\n    readonly canvasClip?: (context: CanvasRenderingContext2D, moreProps: any) => void;\n    /**\n     * Wether to connect the line between undefined data points.\n     */\n    readonly connectNulls?: boolean;\n    /**\n     * A factory for a curve generator for the line.\n     */\n    readonly curve?: CurveFactory | CurveFactoryLineOnly;\n    /**\n     * Function to decide if a data point has been defined.\n     */\n    readonly defined?: (d: number | undefined) => boolean;\n    /**\n     * Whether to highlight the line when within the `hoverTolerance`.\n     */\n    readonly highlightOnHover?: boolean;\n    /**\n     * Width to increase the line to on hover.\n     */\n    readonly hoverStrokeWidth?: number;\n    /**\n     * The distance between the cursor and the closest point in the line.\n     */\n    readonly hoverTolerance?: number;\n    /**\n     * Click handler.\n     */\n    readonly onClick?: (e: React.MouseEvent, moreProps: any) => void;\n    /**\n     * Double click handler.\n     */\n    readonly onDoubleClick?: (e: React.MouseEvent, moreProps: any) => void;\n    /**\n     * Hover handler.\n     */\n    readonly onHover?: (e: React.MouseEvent, moreProps: any) => void;\n    /**\n     * Unhover handler.\n     */\n    readonly onUnHover?: (e: React.MouseEvent, moreProps: any) => void;\n    /**\n     * Context menu handler.\n     */\n    readonly onContextMenu?: (e: React.MouseEvent, moreProps: any) => void;\n    /**\n     * Color, gradient, or pattern to use for the stroke.\n     */\n    readonly strokeStyle?: string;\n    /**\n     * Stroke dash.\n     */\n    readonly strokeDasharray?: strokeDashTypes;\n    /**\n     * Stroke width.\n     */\n    readonly strokeWidth?: number;\n    /**\n     * Selector for data to plot.\n     */\n    readonly yAccessor: (data: any) => number | undefined;\n}\n\n/**\n * `LineSeries` component.\n */\nexport class LineSeries extends React.Component<LineSeriesProps> {\n    public static defaultProps = {\n        connectNulls: false,\n        defined: (d: number | undefined) => d !== undefined && !isNaN(d),\n        hoverStrokeWidth: 4,\n        hoverTolerance: 6,\n        highlightOnHover: false,\n        strokeDasharray: \"Solid\",\n        strokeStyle: \"#2196f3\",\n        strokeWidth: 1,\n    };\n\n    public render() {\n        const { highlightOnHover, onClick, onContextMenu, onDoubleClick, onHover, onUnHover, strokeDasharray } =\n            this.props;\n\n        const hoverProps =\n            highlightOnHover || onHover || onUnHover\n                ? {\n                      isHover: this.isHover,\n                      drawOn: [\"mousemove\", \"pan\"],\n                      canvasToDraw: getMouseCanvas,\n                  }\n                : {\n                      drawOn: [\"pan\"],\n                      canvasToDraw: getAxisCanvas,\n                  };\n\n        const lineDash = getStrokeDasharrayCanvas(strokeDasharray);\n\n        return (\n            <GenericChartComponent\n                canvasDraw={this.drawOnCanvas(lineDash)}\n                onClickWhenHover={onClick}\n                onDoubleClickWhenHover={onDoubleClick}\n                onContextMenuWhenHover={onContextMenu}\n                onHover={onHover}\n                onUnHover={onUnHover}\n                {...hoverProps}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (lineDash?: number[]) => (ctx: CanvasRenderingContext2D, moreProps: MoreProps) => {\n        const {\n            connectNulls,\n            yAccessor,\n            hoverStrokeWidth = LineSeries.defaultProps.hoverStrokeWidth,\n            defined = LineSeries.defaultProps.defined,\n            curve,\n            canvasClip,\n            strokeStyle,\n            strokeWidth = LineSeries.defaultProps.strokeWidth,\n        } = this.props;\n\n        const { xAccessor, xScale, chartConfig, plotData, hovering } = moreProps;\n        if (!chartConfig) {\n            console.warn(\"LineSeries received no chartConfig, is it inside of a Chart?\");\n            return;\n        }\n        const { yScale } = chartConfig;\n\n        if (canvasClip !== undefined) {\n            ctx.save();\n            canvasClip(ctx, moreProps);\n        }\n\n        ctx.lineWidth = hovering ? hoverStrokeWidth : strokeWidth;\n\n        if (strokeStyle !== undefined) {\n            ctx.strokeStyle = strokeStyle;\n        }\n\n        if (lineDash !== undefined) {\n            ctx.setLineDash(lineDash);\n        }\n\n        const dataSeries = line()\n            .x((d) => Math.round(xScale(xAccessor(d))))\n            .y((d) => Math.round(yScale(yAccessor(d)!)));\n\n        if (curve !== undefined) {\n            dataSeries.curve(curve);\n        }\n\n        if (!connectNulls) {\n            dataSeries.defined((d) => defined(yAccessor(d)));\n        }\n\n        ctx.beginPath();\n        dataSeries.context(ctx)(plotData);\n        ctx.stroke();\n\n        if (canvasClip !== undefined) {\n            ctx.restore();\n        }\n    };\n\n    private readonly isHover = (moreProps: any) => {\n        const { highlightOnHover, yAccessor, hoverTolerance = LineSeries.defaultProps.hoverTolerance } = this.props;\n        if (!highlightOnHover) {\n            return false;\n        }\n\n        const {\n            chartConfig: { yScale, origin },\n            xAccessor,\n            mouseXY,\n            currentItem,\n            xScale,\n            plotData,\n        } = moreProps;\n\n        const [x, y] = mouseXY;\n        const radius = hoverTolerance;\n\n        const { left, right } = getClosestItemIndexes(plotData, xScale.invert(x), xAccessor);\n        if (left === right) {\n            const cy = yScale(yAccessor(currentItem)) + origin[1];\n            const cx = xScale(xAccessor(currentItem)) + origin[0];\n\n            const hovering1 = Math.pow(x - cx, 2) + Math.pow(y - cy, 2) < Math.pow(radius, 2);\n\n            return hovering1;\n        } else {\n            const l = plotData[left];\n            const r = plotData[right];\n            const x1 = xScale(xAccessor(l)) + origin[0];\n            const y1 = yScale(yAccessor(l)) + origin[1];\n            const x2 = xScale(xAccessor(r)) + origin[0];\n            const y2 = yScale(yAccessor(r)) + origin[1];\n\n            // y = m * x + b\n            const m /* slope */ = (y2 - y1) / (x2 - x1);\n            const b /* y intercept */ = -1 * m * x1 + y1;\n\n            const desiredY = Math.round(m * x + b);\n\n            const hovering2 = y >= desiredY - radius && y <= desiredY + radius;\n\n            return hovering2;\n        }\n    };\n}\n"],"mappings":"AAAA,SACIA,qBAAqB,EACrBC,wBAAwB,EAExBC,aAAa,EACbC,cAAc,EACdC,qBAAqB,QAElB,8BAA8B;AACrC,SAASC,IAAI,QAA4C,UAAU;AACnE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAkE9B;;;AAGA,OAAM,MAAOC,UAAW,SAAQD,KAAK,CAACE,SAA0B;EAAhEC,YAAA;;IA2CqB,KAAAC,YAAY,GAAIC,QAAmB,IAAK,CAACC,GAA6B,EAAEC,SAAoB,KAAI;MAC7G,MAAM;QACFC,YAAY;QACZC,SAAS;QACTC,gBAAgB,GAAGT,UAAU,CAACU,YAAY,CAACD,gBAAgB;QAC3DE,OAAO,GAAGX,UAAU,CAACU,YAAY,CAACC,OAAO;QACzCC,KAAK;QACLC,UAAU;QACVC,WAAW;QACXC,WAAW,GAAGf,UAAU,CAACU,YAAY,CAACK;MAAW,CACpD,GAAG,IAAI,CAACC,KAAK;MAEd,MAAM;QAAEC,SAAS;QAAEC,MAAM;QAAEC,WAAW;QAAEC,QAAQ;QAAEC;MAAQ,CAAE,GAAGf,SAAS;MACxE,IAAI,CAACa,WAAW,EAAE;QACdG,OAAO,CAACC,IAAI,CAAC,8DAA8D,CAAC;QAC5E;;MAEJ,MAAM;QAAEC;MAAM,CAAE,GAAGL,WAAW;MAE9B,IAAIN,UAAU,KAAKY,SAAS,EAAE;QAC1BpB,GAAG,CAACqB,IAAI,EAAE;QACVb,UAAU,CAACR,GAAG,EAAEC,SAAS,CAAC;;MAG9BD,GAAG,CAACsB,SAAS,GAAGN,QAAQ,GAAGZ,gBAAgB,GAAGM,WAAW;MAEzD,IAAID,WAAW,KAAKW,SAAS,EAAE;QAC3BpB,GAAG,CAACS,WAAW,GAAGA,WAAW;;MAGjC,IAAIV,QAAQ,KAAKqB,SAAS,EAAE;QACxBpB,GAAG,CAACuB,WAAW,CAACxB,QAAQ,CAAC;;MAG7B,MAAMyB,UAAU,GAAG/B,IAAI,EAAE,CACpBgC,CAAC,CAAEC,CAAC,IAAKC,IAAI,CAACC,KAAK,CAACf,MAAM,CAACD,SAAS,CAACc,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1CG,CAAC,CAAEH,CAAC,IAAKC,IAAI,CAACC,KAAK,CAACT,MAAM,CAAChB,SAAS,CAACuB,CAAC,CAAE,CAAC,CAAC,CAAC;MAEhD,IAAInB,KAAK,KAAKa,SAAS,EAAE;QACrBI,UAAU,CAACjB,KAAK,CAACA,KAAK,CAAC;;MAG3B,IAAI,CAACL,YAAY,EAAE;QACfsB,UAAU,CAAClB,OAAO,CAAEoB,CAAC,IAAKpB,OAAO,CAACH,SAAS,CAACuB,CAAC,CAAC,CAAC,CAAC;;MAGpD1B,GAAG,CAAC8B,SAAS,EAAE;MACfN,UAAU,CAACO,OAAO,CAAC/B,GAAG,CAAC,CAACe,QAAQ,CAAC;MACjCf,GAAG,CAACgC,MAAM,EAAE;MAEZ,IAAIxB,UAAU,KAAKY,SAAS,EAAE;QAC1BpB,GAAG,CAACiC,OAAO,EAAE;;IAErB,CAAC;IAEgB,KAAAC,OAAO,GAAIjC,SAAc,IAAI;MAC1C,MAAM;QAAEkC,gBAAgB;QAAEhC,SAAS;QAAEiC,cAAc,GAAGzC,UAAU,CAACU,YAAY,CAAC+B;MAAc,CAAE,GAAG,IAAI,CAACzB,KAAK;MAC3G,IAAI,CAACwB,gBAAgB,EAAE;QACnB,OAAO,KAAK;;MAGhB,MAAM;QACFrB,WAAW,EAAE;UAAEK,MAAM;UAAEkB;QAAM,CAAE;QAC/BzB,SAAS;QACT0B,OAAO;QACPC,WAAW;QACX1B,MAAM;QACNE;MAAQ,CACX,GAAGd,SAAS;MAEb,MAAM,CAACwB,CAAC,EAAEI,CAAC,CAAC,GAAGS,OAAO;MACtB,MAAME,MAAM,GAAGJ,cAAc;MAE7B,MAAM;QAAEK,IAAI;QAAEC;MAAK,CAAE,GAAGtD,qBAAqB,CAAC2B,QAAQ,EAAEF,MAAM,CAAC8B,MAAM,CAAClB,CAAC,CAAC,EAAEb,SAAS,CAAC;MACpF,IAAI6B,IAAI,KAAKC,KAAK,EAAE;QAChB,MAAME,EAAE,GAAGzB,MAAM,CAAChB,SAAS,CAACoC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC;QACrD,MAAMQ,EAAE,GAAGhC,MAAM,CAACD,SAAS,CAAC2B,WAAW,CAAC,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC;QAErD,MAAMS,SAAS,GAAGnB,IAAI,CAACoB,GAAG,CAACtB,CAAC,GAAGoB,EAAE,EAAE,CAAC,CAAC,GAAGlB,IAAI,CAACoB,GAAG,CAAClB,CAAC,GAAGe,EAAE,EAAE,CAAC,CAAC,GAAGjB,IAAI,CAACoB,GAAG,CAACP,MAAM,EAAE,CAAC,CAAC;QAEjF,OAAOM,SAAS;OACnB,MAAM;QACH,MAAME,CAAC,GAAGjC,QAAQ,CAAC0B,IAAI,CAAC;QACxB,MAAMQ,CAAC,GAAGlC,QAAQ,CAAC2B,KAAK,CAAC;QACzB,MAAMQ,EAAE,GAAGrC,MAAM,CAACD,SAAS,CAACoC,CAAC,CAAC,CAAC,GAAGX,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAMc,EAAE,GAAGhC,MAAM,CAAChB,SAAS,CAAC6C,CAAC,CAAC,CAAC,GAAGX,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAMe,EAAE,GAAGvC,MAAM,CAACD,SAAS,CAACqC,CAAC,CAAC,CAAC,GAAGZ,MAAM,CAAC,CAAC,CAAC;QAC3C,MAAMgB,EAAE,GAAGlC,MAAM,CAAChB,SAAS,CAAC8C,CAAC,CAAC,CAAC,GAAGZ,MAAM,CAAC,CAAC,CAAC;QAE3C;QACA,MAAMiB,CAAC,CAAC,cAAc,CAACD,EAAE,GAAGF,EAAE,KAAKC,EAAE,GAAGF,EAAE,CAAC;QAC3C,MAAMK,CAAC,CAAC,oBAAoB,CAAC,CAAC,GAAGD,CAAC,GAAGJ,EAAE,GAAGC,EAAE;QAE5C,MAAMK,QAAQ,GAAG7B,IAAI,CAACC,KAAK,CAAC0B,CAAC,GAAG7B,CAAC,GAAG8B,CAAC,CAAC;QAEtC,MAAME,SAAS,GAAG5B,CAAC,IAAI2B,QAAQ,GAAGhB,MAAM,IAAIX,CAAC,IAAI2B,QAAQ,GAAGhB,MAAM;QAElE,OAAOiB,SAAS;;IAExB,CAAC;EACL;EAnIWC,MAAMA,CAAA;IACT,MAAM;MAAEvB,gBAAgB;MAAEwB,OAAO;MAAEC,aAAa;MAAEC,aAAa;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAe,CAAE,GAClG,IAAI,CAACrD,KAAK;IAEd,MAAMsD,UAAU,GACZ9B,gBAAgB,IAAI2B,OAAO,IAAIC,SAAS,GAClC;MACI7B,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBgC,MAAM,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC;MAC5BC,YAAY,EAAE5E;KACjB,GACD;MACI2E,MAAM,EAAE,CAAC,KAAK,CAAC;MACfC,YAAY,EAAE7E;KACjB;IAEX,MAAMS,QAAQ,GAAGV,wBAAwB,CAAC2E,eAAe,CAAC;IAE1D,OACItE,KAAA,CAAA0E,aAAA,CAAC5E,qBAAqB,EAAA6E,MAAA,CAAAC,MAAA;MAClBC,UAAU,EAAE,IAAI,CAACzE,YAAY,CAACC,QAAQ,CAAC;MACvCyE,gBAAgB,EAAEb,OAAO;MACzBc,sBAAsB,EAAEZ,aAAa;MACrCa,sBAAsB,EAAEd,aAAa;MACrCE,OAAO,EAAEA,OAAO;MAChBC,SAAS,EAAEA;IAAS,GAChBE,UAAU,EAChB;EAEV;;AAxCctE,UAAA,CAAAU,YAAY,GAAG;EACzBH,YAAY,EAAE,KAAK;EACnBI,OAAO,EAAGoB,CAAqB,IAAKA,CAAC,KAAKN,SAAS,IAAI,CAACuD,KAAK,CAACjD,CAAC,CAAC;EAChEtB,gBAAgB,EAAE,CAAC;EACnBgC,cAAc,EAAE,CAAC;EACjBD,gBAAgB,EAAE,KAAK;EACvB6B,eAAe,EAAE,OAAO;EACxBvD,WAAW,EAAE,SAAS;EACtBC,WAAW,EAAE;CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}