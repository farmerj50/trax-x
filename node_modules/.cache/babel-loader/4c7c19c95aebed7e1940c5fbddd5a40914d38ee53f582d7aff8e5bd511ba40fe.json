{"ast":null,"code":"import * as React from \"react\";\nimport { drawOnCanvas } from \"@react-financial-charts/coordinates/lib/EdgeCoordinateV3\";\nimport { getYCoordinate } from \"@react-financial-charts/coordinates/lib/MouseCoordinateY\";\nimport { getStrokeDasharrayCanvas, getMouseCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport class InteractiveYCoordinate extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.width = 0;\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        bgFillStyle,\n        textFill,\n        fontFamily,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        strokeStyle,\n        strokeWidth,\n        strokeDasharray,\n        text,\n        textBox,\n        edge,\n        selected,\n        hovering\n      } = this.props;\n      const values = this.helper(moreProps);\n      if (values == null) {\n        return;\n      }\n      const {\n        x1,\n        x2,\n        y,\n        rect\n      } = values;\n      ctx.strokeStyle = strokeStyle;\n      ctx.beginPath();\n      if (selected || hovering) {\n        ctx.lineWidth = strokeWidth + 1;\n      } else {\n        ctx.lineWidth = strokeWidth;\n      }\n      ctx.textBaseline = \"middle\";\n      ctx.textAlign = \"start\";\n      ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n      this.width = textBox.padding.left + ctx.measureText(text).width + textBox.padding.right + textBox.closeIcon.padding.left + textBox.closeIcon.width + textBox.closeIcon.padding.right;\n      ctx.setLineDash(getStrokeDasharrayCanvas(strokeDasharray));\n      ctx.moveTo(x1, y);\n      ctx.lineTo(rect.x, y);\n      ctx.moveTo(rect.x + this.width, y);\n      ctx.lineTo(x2, y);\n      ctx.stroke();\n      ctx.setLineDash([]);\n      ctx.fillStyle = bgFillStyle;\n      ctx.fillRect(rect.x, rect.y, this.width, rect.height);\n      ctx.strokeRect(rect.x, rect.y, this.width, rect.height);\n      ctx.fillStyle = textFill;\n      ctx.beginPath();\n      ctx.fillText(text, rect.x + 10, y);\n      const newEdge = Object.assign(Object.assign({}, edge), {\n        textFill,\n        fontFamily,\n        fontSize\n      });\n      // @ts-ignore\n      const yValue = edge.displayFormat(this.props.yValue);\n      const yCoord = getYCoordinate(y, yValue, newEdge, moreProps);\n      drawOnCanvas(ctx, yCoord);\n    };\n    this.isHover = moreProps => {\n      const {\n        onHover\n      } = this.props;\n      if (onHover !== undefined) {\n        const values = this.helper(moreProps);\n        if (values == null) {\n          return false;\n        }\n        const {\n          x1,\n          x2,\n          y,\n          rect\n        } = values;\n        const {\n          mouseXY: [mouseX, mouseY]\n        } = moreProps;\n        if (mouseX >= rect.x && mouseX <= rect.x + this.width && mouseY >= rect.y && mouseY <= rect.y + rect.height) {\n          return true;\n        }\n        if (x1 <= mouseX && x2 >= mouseX && Math.abs(mouseY - y) < 4) {\n          return true;\n        }\n      }\n      return false;\n    };\n    this.helper = moreProps => {\n      const {\n        yValue,\n        textBox\n      } = this.props;\n      const {\n        chartConfig: {\n          width,\n          yScale,\n          height\n        }\n      } = moreProps;\n      const y = Math.round(yScale(yValue));\n      if (y >= 0 && y <= height) {\n        const rect = {\n          x: textBox.left,\n          y: y - textBox.height / 2,\n          height: textBox.height\n        };\n        return {\n          x1: 0,\n          x2: width,\n          y,\n          rect\n        };\n      }\n    };\n  }\n  render() {\n    const {\n      interactiveCursorClass\n    } = this.props;\n    const {\n      onHover,\n      onUnHover\n    } = this.props;\n    const {\n      onDragStart,\n      onDrag,\n      onDragComplete\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      isHover: this.isHover,\n      canvasToDraw: getMouseCanvas,\n      canvasDraw: this.drawOnCanvas,\n      interactiveCursorClass: interactiveCursorClass,\n      enableDragOnHover: true,\n      onDragStart: onDragStart,\n      onDrag: onDrag,\n      onDragComplete: onDragComplete,\n      onHover: onHover,\n      onUnHover: onUnHover,\n      drawOn: [\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]\n    });\n  }\n}\nInteractiveYCoordinate.defaultProps = {\n  fontWeight: \"normal\",\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false,\n  hovering: false\n};","map":{"version":3,"names":["React","drawOnCanvas","getYCoordinate","getStrokeDasharrayCanvas","getMouseCanvas","GenericChartComponent","InteractiveYCoordinate","Component","constructor","width","ctx","moreProps","bgFillStyle","textFill","fontFamily","fontSize","fontStyle","fontWeight","strokeStyle","strokeWidth","strokeDasharray","text","textBox","edge","selected","hovering","props","values","helper","x1","x2","y","rect","beginPath","lineWidth","textBaseline","textAlign","font","padding","left","measureText","right","closeIcon","setLineDash","moveTo","lineTo","x","stroke","fillStyle","fillRect","height","strokeRect","fillText","newEdge","Object","assign","yValue","displayFormat","yCoord","isHover","onHover","undefined","mouseXY","mouseX","mouseY","Math","abs","chartConfig","yScale","round","render","interactiveCursorClass","onUnHover","onDragStart","onDrag","onDragComplete","createElement","clip","canvasToDraw","canvasDraw","enableDragOnHover","drawOn","defaultProps","tolerance"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\components\\InteractiveYCoordinate.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { drawOnCanvas } from \"@react-financial-charts/coordinates/lib/EdgeCoordinateV3\";\nimport { getYCoordinate } from \"@react-financial-charts/coordinates/lib/MouseCoordinateY\";\nimport {\n    getStrokeDasharrayCanvas,\n    getMouseCanvas,\n    GenericChartComponent,\n    strokeDashTypes,\n} from \"@react-financial-charts/core\";\n\nexport interface InteractiveYCoordinateProps {\n    readonly bgFillStyle: string;\n    readonly strokeStyle: string;\n    readonly strokeWidth: number;\n    readonly strokeDasharray: strokeDashTypes;\n    readonly textFill: string;\n    readonly fontFamily: string;\n    readonly fontSize: number;\n    readonly fontWeight: number | string;\n    readonly fontStyle: string;\n    readonly text: string;\n    readonly edge: object;\n    readonly textBox: {\n        readonly closeIcon: any;\n        readonly left: number;\n        readonly height: number;\n        readonly padding: any;\n    };\n    readonly yValue: number;\n    readonly onDragStart?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDrag?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDragComplete?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onUnHover?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly defaultClassName?: string;\n    readonly interactiveCursorClass?: string;\n    readonly tolerance: number;\n    readonly selected: boolean;\n    readonly hovering: boolean;\n}\n\nexport class InteractiveYCoordinate extends React.Component<InteractiveYCoordinateProps> {\n    public static defaultProps = {\n        fontWeight: \"normal\", // standard dev\n        strokeWidth: 1,\n        tolerance: 4,\n        selected: false,\n        hovering: false,\n    };\n\n    private width = 0;\n\n    public render() {\n        const { interactiveCursorClass } = this.props;\n        const { onHover, onUnHover } = this.props;\n        const { onDragStart, onDrag, onDragComplete } = this.props;\n\n        return (\n            <GenericChartComponent\n                clip={false}\n                isHover={this.isHover}\n                canvasToDraw={getMouseCanvas}\n                canvasDraw={this.drawOnCanvas}\n                interactiveCursorClass={interactiveCursorClass}\n                enableDragOnHover\n                onDragStart={onDragStart}\n                onDrag={onDrag}\n                onDragComplete={onDragComplete}\n                onHover={onHover}\n                onUnHover={onUnHover}\n                drawOn={[\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const {\n            bgFillStyle,\n            textFill,\n            fontFamily,\n            fontSize,\n            fontStyle,\n            fontWeight,\n            strokeStyle,\n            strokeWidth,\n            strokeDasharray,\n            text,\n            textBox,\n            edge,\n            selected,\n            hovering,\n        } = this.props;\n\n        const values = this.helper(moreProps);\n        if (values == null) {\n            return;\n        }\n\n        const { x1, x2, y, rect } = values;\n\n        ctx.strokeStyle = strokeStyle;\n\n        ctx.beginPath();\n        if (selected || hovering) {\n            ctx.lineWidth = strokeWidth + 1;\n        } else {\n            ctx.lineWidth = strokeWidth;\n        }\n        ctx.textBaseline = \"middle\";\n        ctx.textAlign = \"start\";\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        this.width =\n            textBox.padding.left +\n            ctx.measureText(text).width +\n            textBox.padding.right +\n            textBox.closeIcon.padding.left +\n            textBox.closeIcon.width +\n            textBox.closeIcon.padding.right;\n\n        ctx.setLineDash(getStrokeDasharrayCanvas(strokeDasharray));\n        ctx.moveTo(x1, y);\n        ctx.lineTo(rect.x, y);\n\n        ctx.moveTo(rect.x + this.width, y);\n        ctx.lineTo(x2, y);\n        ctx.stroke();\n\n        ctx.setLineDash([]);\n\n        ctx.fillStyle = bgFillStyle;\n\n        ctx.fillRect(rect.x, rect.y, this.width, rect.height);\n        ctx.strokeRect(rect.x, rect.y, this.width, rect.height);\n\n        ctx.fillStyle = textFill;\n\n        ctx.beginPath();\n        ctx.fillText(text, rect.x + 10, y);\n        const newEdge = {\n            ...edge,\n            textFill,\n            fontFamily,\n            fontSize,\n        };\n\n        // @ts-ignore\n        const yValue = edge.displayFormat(this.props.yValue);\n        const yCoord = getYCoordinate(y, yValue, newEdge, moreProps);\n        drawOnCanvas(ctx, yCoord);\n    };\n\n    private readonly isHover = (moreProps: any) => {\n        const { onHover } = this.props;\n\n        if (onHover !== undefined) {\n            const values = this.helper(moreProps);\n            if (values == null) {\n                return false;\n            }\n\n            const { x1, x2, y, rect } = values;\n            const {\n                mouseXY: [mouseX, mouseY],\n            } = moreProps;\n\n            if (\n                mouseX >= rect.x &&\n                mouseX <= rect.x + this.width &&\n                mouseY >= rect.y &&\n                mouseY <= rect.y + rect.height\n            ) {\n                return true;\n            }\n            if (x1 <= mouseX && x2 >= mouseX && Math.abs(mouseY - y) < 4) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    private readonly helper = (moreProps: any) => {\n        const { yValue, textBox } = this.props;\n\n        const {\n            chartConfig: { width, yScale, height },\n        } = moreProps;\n\n        const y = Math.round(yScale(yValue));\n\n        if (y >= 0 && y <= height) {\n            const rect = {\n                x: textBox.left,\n                y: y - textBox.height / 2,\n                height: textBox.height,\n            };\n            return {\n                x1: 0,\n                x2: width,\n                y,\n                rect,\n            };\n        }\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}