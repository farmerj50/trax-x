{"ast":null,"code":"import { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ChartContext, isDefined } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse } from \"./components\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachInteractiveYCoordinate } from \"./wrapper\";\nexport class InteractiveYCoordinate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDelete = (e, index, moreProps) => {\n      const {\n        onDelete,\n        yCoordinateList\n      } = this.props;\n      if (onDelete !== undefined && index !== undefined) {\n        onDelete(e, yCoordinateList[index], moreProps);\n      }\n    };\n    this.handleDragComplete = (e, moreProps) => {\n      const {\n        override\n      } = this.state;\n      if (isDefined(override)) {\n        const {\n          yCoordinateList\n        } = this.props;\n        const newAlertList = yCoordinateList.map((each, idx) => {\n          const selected = idx === override.index;\n          return selected ? Object.assign(Object.assign({}, each), {\n            yValue: override.yValue,\n            selected\n          }) : Object.assign(Object.assign({}, each), {\n            selected\n          });\n        });\n        const draggedAlert = newAlertList[override.index];\n        this.setState({\n          override: null\n        }, () => {\n          const {\n            onDragComplete\n          } = this.props;\n          if (onDragComplete !== undefined) {\n            onDragComplete(e, newAlertList, moreProps, draggedAlert);\n          }\n        });\n      }\n    };\n    this.handleDrag = (_, index, yValue) => {\n      this.setState({\n        override: {\n          index,\n          yValue\n        }\n      });\n    };\n    this.terminate = terminate.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType(\"yCoordinateList\").bind(this);\n    this.state = {};\n  }\n  render() {\n    const {\n      yCoordinateList\n    } = this.props;\n    const {\n      override\n    } = this.state;\n    return React.createElement(\"g\", null, yCoordinateList.map((each, idx) => {\n      const props = each;\n      return React.createElement(EachInteractiveYCoordinate, Object.assign({\n        key: each.id,\n        ref: this.saveNodeType(idx),\n        index: idx\n      }, props, {\n        selected: each.selected,\n        yValue: getValueFromOverride(override, idx, \"yValue\", each.yValue),\n        onDelete: this.handleDelete,\n        onDrag: this.handleDrag,\n        onDragComplete: this.handleDragComplete,\n        edgeInteractiveCursor: \"react-financial-charts-move-cursor\"\n      }));\n    }));\n  }\n}\nInteractiveYCoordinate.defaultProps = {\n  defaultPriceCoordinate: {\n    bgFill: \"#FFFFFF\",\n    bgOpacity: 1,\n    stroke: \"#6574CD\",\n    strokeOpacity: 1,\n    strokeDasharray: \"ShortDash2\",\n    strokeWidth: 1,\n    textFill: \"#6574CD\",\n    fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n    fontSize: 12,\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    text: \"Alert\",\n    textBox: {\n      height: 24,\n      left: 20,\n      padding: {\n        left: 10,\n        right: 5\n      },\n      closeIcon: {\n        padding: {\n          left: 5,\n          right: 8\n        },\n        width: 8\n      }\n    },\n    edge: {\n      stroke: \"#6574CD\",\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      fill: \"#FFFFFF\",\n      fillOpacity: 1,\n      orient: \"right\",\n      at: \"right\",\n      arrowWidth: 10,\n      dx: 0,\n      rectWidth: 50,\n      rectHeight: 20,\n      displayFormat: format(\".2f\")\n    }\n  },\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 175,\n    text: \"Click and drag the edge circles\"\n  }),\n  yCoordinateList: []\n};\nInteractiveYCoordinate.contextType = ChartContext;","map":{"version":3,"names":["format","React","ChartContext","isDefined","HoverTextNearMouse","getValueFromOverride","isHoverForInteractiveType","saveNodeType","terminate","EachInteractiveYCoordinate","InteractiveYCoordinate","Component","constructor","props","handleDelete","e","index","moreProps","onDelete","yCoordinateList","undefined","handleDragComplete","override","state","newAlertList","map","each","idx","selected","Object","assign","yValue","draggedAlert","setState","onDragComplete","handleDrag","_","bind","getSelectionState","render","createElement","key","id","ref","onDrag","edgeInteractiveCursor","defaultProps","defaultPriceCoordinate","bgFill","bgOpacity","stroke","strokeOpacity","strokeDasharray","strokeWidth","textFill","fontFamily","fontSize","fontStyle","fontWeight","text","textBox","height","left","padding","right","closeIcon","width","edge","fill","fillOpacity","orient","at","arrowWidth","dx","rectWidth","rectHeight","displayFormat","hoverText","enable","bgHeight","bgWidth","contextType"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\InteractiveYCoordinate.tsx"],"sourcesContent":["import { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { ChartContext, isDefined, strokeDashTypes } from \"@react-financial-charts/core\";\nimport { HoverTextNearMouse } from \"./components\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { EachInteractiveYCoordinate } from \"./wrapper\";\n\ninterface InteractiveYCoordinateProps {\n    readonly onChoosePosition: (e: React.MouseEvent, newText: any, moreProps: any) => void;\n    readonly onDragComplete: (e: React.MouseEvent, newAlertList: any[], moreProps: any, draggedAlert: any) => void;\n    readonly onSelect?: (e: React.MouseEvent, interactives: any[], moreProps: any) => void;\n    readonly onDelete?: (e: React.MouseEvent, yCoordinate: any, moreProps: any) => void;\n    readonly defaultPriceCoordinate: {\n        readonly bgFill: string;\n        readonly bgOpacity: number;\n        readonly stroke: string;\n        readonly strokeDasharray: strokeDashTypes;\n        readonly strokeOpacity: number;\n        readonly strokeWidth: number;\n        readonly textFill: string;\n        readonly fontFamily: string;\n        readonly fontWeight: string;\n        readonly fontStyle: string;\n        readonly fontSize: number;\n        readonly text: string;\n        readonly textBox: {\n            readonly height: number;\n            readonly left: number;\n            readonly padding: {\n                left: number;\n                right: number;\n            };\n            readonly closeIcon: {\n                padding: {\n                    left: number;\n                    right: number;\n                };\n                width: number;\n            };\n        };\n        readonly edge: {\n            readonly stroke: string;\n            readonly strokeOpacity: number;\n            readonly strokeWidth: number;\n            readonly fill: string;\n            readonly fillOpacity: number;\n        };\n    };\n    readonly hoverText: object;\n    readonly yCoordinateList: any[];\n    readonly enabled: boolean;\n}\n\ninterface InteractiveYCoordinateState {\n    current?: any;\n    override?: any;\n}\n\nexport class InteractiveYCoordinate extends React.Component<InteractiveYCoordinateProps, InteractiveYCoordinateState> {\n    public static defaultProps = {\n        defaultPriceCoordinate: {\n            bgFill: \"#FFFFFF\",\n            bgOpacity: 1,\n            stroke: \"#6574CD\",\n            strokeOpacity: 1,\n            strokeDasharray: \"ShortDash2\",\n            strokeWidth: 1,\n            textFill: \"#6574CD\",\n            fontFamily: \"-apple-system, system-ui, Roboto, 'Helvetica Neue', Ubuntu, sans-serif\",\n            fontSize: 12,\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            text: \"Alert\",\n            textBox: {\n                height: 24,\n                left: 20,\n                padding: { left: 10, right: 5 },\n                closeIcon: {\n                    padding: { left: 5, right: 8 },\n                    width: 8,\n                },\n            },\n            edge: {\n                stroke: \"#6574CD\",\n                strokeOpacity: 1,\n                strokeWidth: 1,\n                fill: \"#FFFFFF\",\n                fillOpacity: 1,\n                orient: \"right\",\n                at: \"right\",\n                arrowWidth: 10,\n                dx: 0,\n                rectWidth: 50,\n                rectHeight: 20,\n                displayFormat: format(\".2f\"),\n            },\n        },\n        hoverText: {\n            ...HoverTextNearMouse.defaultProps,\n            enable: true,\n            bgHeight: 18,\n            bgWidth: 175,\n            text: \"Click and drag the edge circles\",\n        },\n        yCoordinateList: [],\n    };\n\n    public static contextType = ChartContext;\n\n    // @ts-ignore\n    private getSelectionState: any;\n    private saveNodeType: any;\n    // @ts-ignore\n    private terminate: any;\n\n    public constructor(props: InteractiveYCoordinateProps) {\n        super(props);\n\n        this.terminate = terminate.bind(this);\n        this.saveNodeType = saveNodeType.bind(this);\n        this.getSelectionState = isHoverForInteractiveType(\"yCoordinateList\").bind(this);\n\n        this.state = {};\n    }\n\n    public render() {\n        const { yCoordinateList } = this.props;\n        const { override } = this.state;\n        return (\n            <g>\n                {yCoordinateList.map((each, idx) => {\n                    const props = each;\n                    return (\n                        <EachInteractiveYCoordinate\n                            key={each.id}\n                            ref={this.saveNodeType(idx)}\n                            index={idx}\n                            {...props}\n                            selected={each.selected}\n                            yValue={getValueFromOverride(override, idx, \"yValue\", each.yValue)}\n                            onDelete={this.handleDelete}\n                            onDrag={this.handleDrag}\n                            onDragComplete={this.handleDragComplete}\n                            edgeInteractiveCursor=\"react-financial-charts-move-cursor\"\n                        />\n                    );\n                })}\n            </g>\n        );\n    }\n\n    private readonly handleDelete = (e: React.MouseEvent, index: number | undefined, moreProps: any) => {\n        const { onDelete, yCoordinateList } = this.props;\n        if (onDelete !== undefined && index !== undefined) {\n            onDelete(e, yCoordinateList[index], moreProps);\n        }\n    };\n\n    private readonly handleDragComplete = (e: React.MouseEvent, moreProps: any) => {\n        const { override } = this.state;\n        if (isDefined(override)) {\n            const { yCoordinateList } = this.props;\n            const newAlertList = yCoordinateList.map((each, idx) => {\n                const selected = idx === override.index;\n                return selected\n                    ? {\n                          ...each,\n                          yValue: override.yValue,\n                          selected,\n                      }\n                    : {\n                          ...each,\n                          selected,\n                      };\n            });\n            const draggedAlert = newAlertList[override.index];\n            this.setState(\n                {\n                    override: null,\n                },\n                () => {\n                    const { onDragComplete } = this.props;\n                    if (onDragComplete !== undefined) {\n                        onDragComplete(e, newAlertList, moreProps, draggedAlert);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleDrag = (_: React.MouseEvent, index: any, yValue: any) => {\n        this.setState({\n            override: {\n                index,\n                yValue,\n            },\n        });\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}