{"ast":null,"code":"import { merge } from \"d3-array\";\nimport * as React from \"react\";\nimport { first, functor, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { drawOnCanvas2 } from \"./StackedBarSeries\";\nexport class OverlayBarSeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const bars = this.getBars(moreProps);\n      drawOnCanvas2(this.props, ctx, bars);\n    };\n    this.getBars = moreProps => {\n      const {\n        xScale,\n        xAccessor,\n        chartConfig: {\n          yScale\n        },\n        plotData\n      } = moreProps;\n      const {\n        baseAt,\n        fillStyle,\n        stroke,\n        yAccessor\n      } = this.props;\n      const getFill = functor(fillStyle);\n      const getBase = functor(baseAt);\n      const widthFunctor = functor(this.props.width);\n      const width = widthFunctor(this.props, moreProps);\n      const offset = Math.floor(0.5 * width);\n      const bars = plotData.map(d => {\n        const innerBars = yAccessor.map((eachYAccessor, i) => {\n          const yValue = eachYAccessor(d);\n          if (yValue === undefined) {\n            return undefined;\n          }\n          const xValue = xAccessor(d);\n          const x = Math.round(xScale(xValue)) - offset;\n          const y = yScale(yValue);\n          return {\n            height: 0,\n            width: offset * 2,\n            x,\n            y,\n            stroke: stroke ? getFill(d, i) : \"none\",\n            fillStyle: getFill(d, i),\n            i\n          };\n        }).filter(yValue => yValue !== undefined);\n        let b = getBase(xScale, yScale, d);\n        let h;\n        for (let i = innerBars.length - 1; i >= 0; i--) {\n          h = b - innerBars[i].y;\n          if (h < 0) {\n            innerBars[i].y = b;\n            h = -1 * h;\n          }\n          innerBars[i].height = h;\n          b = innerBars[i].y;\n        }\n        return innerBars;\n      });\n      return merge(bars);\n    };\n  }\n  render() {\n    const {\n      clip\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      canvasToDraw: getAxisCanvas,\n      canvasDraw: this.drawOnCanvas,\n      clip: clip,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nOverlayBarSeries.defaultProps = {\n  baseAt: (xScale, yScale) => first(yScale.range()),\n  clip: true,\n  direction: \"up\",\n  stroke: false,\n  fillStyle: \"#4682B4\",\n  widthRatio: 0.5,\n  width: plotDataLengthBarWidth\n};","map":{"version":3,"names":["merge","React","first","functor","getAxisCanvas","GenericChartComponent","plotDataLengthBarWidth","drawOnCanvas2","OverlayBarSeries","Component","constructor","drawOnCanvas","ctx","moreProps","bars","getBars","props","xScale","xAccessor","chartConfig","yScale","plotData","baseAt","fillStyle","stroke","yAccessor","getFill","getBase","widthFunctor","width","offset","Math","floor","map","d","innerBars","eachYAccessor","i","yValue","undefined","xValue","x","round","y","height","filter","b","h","length","render","clip","createElement","canvasToDraw","canvasDraw","drawOn","defaultProps","range","direction","widthRatio"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\OverlayBarSeries.tsx"],"sourcesContent":["import { merge } from \"d3-array\";\nimport { ScaleContinuousNumeric, ScaleTime } from \"d3-scale\";\nimport * as React from \"react\";\nimport {\n    first,\n    functor,\n    getAxisCanvas,\n    GenericChartComponent,\n    plotDataLengthBarWidth,\n} from \"@react-financial-charts/core\";\nimport { drawOnCanvas2 } from \"./StackedBarSeries\";\n\nexport interface OverlayBarSeriesProps {\n    readonly baseAt?:\n        | number\n        | ((\n              xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>,\n              yScale: ScaleContinuousNumeric<number, number>,\n              datum: any,\n          ) => number);\n    readonly direction?: \"up\" | \"down\";\n    readonly stroke?: boolean;\n    readonly width?: any;\n    readonly widthRatio?: number;\n    readonly fillStyle?: string | ((data: any, y: number) => string);\n    readonly yAccessor: ((datum: any) => number | undefined)[];\n    readonly xScale?: ScaleContinuousNumeric<number, number>;\n    readonly yScale?: ScaleContinuousNumeric<number, number>;\n    readonly plotData?: number[];\n    readonly clip?: boolean;\n}\n\nexport class OverlayBarSeries extends React.Component<OverlayBarSeriesProps> {\n    public static defaultProps = {\n        baseAt: (xScale: ScaleContinuousNumeric<number, number>, yScale: ScaleContinuousNumeric<number, number>) =>\n            first(yScale.range()),\n        clip: true,\n        direction: \"up\",\n        stroke: false,\n        fillStyle: \"#4682B4\",\n        widthRatio: 0.5,\n        width: plotDataLengthBarWidth,\n    };\n\n    public render() {\n        const { clip } = this.props;\n\n        return (\n            <GenericChartComponent\n                canvasToDraw={getAxisCanvas}\n                canvasDraw={this.drawOnCanvas}\n                clip={clip}\n                drawOn={[\"pan\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const bars = this.getBars(moreProps);\n\n        drawOnCanvas2(this.props, ctx, bars);\n    };\n\n    private readonly getBars = (moreProps: any) => {\n        const {\n            xScale,\n            xAccessor,\n            chartConfig: { yScale },\n            plotData,\n        } = moreProps;\n\n        const { baseAt, fillStyle, stroke, yAccessor } = this.props;\n\n        const getFill = functor(fillStyle);\n        const getBase = functor(baseAt);\n        const widthFunctor = functor(this.props.width);\n\n        const width = widthFunctor(this.props, moreProps);\n        const offset = Math.floor(0.5 * width);\n\n        const bars = plotData.map((d: any) => {\n            const innerBars = yAccessor\n                .map((eachYAccessor: any, i: number) => {\n                    const yValue = eachYAccessor(d);\n                    if (yValue === undefined) {\n                        return undefined;\n                    }\n\n                    const xValue = xAccessor(d);\n                    const x = Math.round(xScale(xValue)) - offset;\n                    const y = yScale(yValue);\n\n                    return {\n                        height: 0,\n                        width: offset * 2,\n                        x,\n                        y,\n                        stroke: stroke ? getFill(d, i) : \"none\",\n                        fillStyle: getFill(d, i),\n                        i,\n                    };\n                })\n                .filter((yValue: any) => yValue !== undefined);\n\n            let b = getBase(xScale, yScale, d);\n            let h;\n            for (let i = innerBars.length - 1; i >= 0; i--) {\n                h = b - innerBars[i]!.y;\n                if (h < 0) {\n                    innerBars[i]!.y = b;\n                    h = -1 * h;\n                }\n                innerBars[i]!.height = h;\n                b = innerBars[i]!.y;\n            }\n            return innerBars;\n        });\n\n        return merge(bars);\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}