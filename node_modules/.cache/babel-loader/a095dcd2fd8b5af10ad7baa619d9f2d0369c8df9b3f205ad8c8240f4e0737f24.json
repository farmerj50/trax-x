{"ast":null,"code":"import * as React from \"react\";\nimport { getAxisCanvas, getStrokeDasharrayCanvas, GenericChartComponent } from \"@react-financial-charts/core\";\nexport class StraightLine extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        type,\n        strokeStyle,\n        lineWidth,\n        lineDash,\n        yValue,\n        xValue\n      } = this.props;\n      const {\n        xScale,\n        chartConfig: {\n          yScale,\n          width,\n          height\n        }\n      } = moreProps;\n      ctx.beginPath();\n      if (strokeStyle !== undefined) {\n        ctx.strokeStyle = strokeStyle;\n      }\n      if (lineWidth !== undefined) {\n        ctx.lineWidth = lineWidth;\n      }\n      if (lineDash !== undefined) {\n        if (typeof lineDash === \"string\") {\n          ctx.setLineDash(getStrokeDasharrayCanvas(lineDash));\n        } else {\n          ctx.setLineDash(lineDash);\n        }\n      }\n      const {\n        x1,\n        y1,\n        x2,\n        y2\n      } = this.getLineCoordinates(type, xScale, yScale, xValue, yValue, width, height);\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n    };\n    this.getLineCoordinates = (type, xScale, yScale, xValue, yValue, width, height) => {\n      return type === \"horizontal\" ? {\n        x1: 0,\n        y1: Math.round(yScale(yValue)),\n        x2: width,\n        y2: Math.round(yScale(yValue))\n      } : {\n        x1: Math.round(xScale(xValue)),\n        y1: 0,\n        x2: Math.round(xScale(xValue)),\n        y2: height\n      };\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      canvasDraw: this.drawOnCanvas,\n      canvasToDraw: getAxisCanvas,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nStraightLine.defaultProps = {\n  lineWidth: 1,\n  lineDash: \"Solid\",\n  strokeStyle: \"rgba(0, 0, 0, 0.5)\",\n  type: \"horizontal\"\n};","map":{"version":3,"names":["React","getAxisCanvas","getStrokeDasharrayCanvas","GenericChartComponent","StraightLine","Component","constructor","drawOnCanvas","ctx","moreProps","type","strokeStyle","lineWidth","lineDash","yValue","xValue","props","xScale","chartConfig","yScale","width","height","beginPath","undefined","setLineDash","x1","y1","x2","y2","getLineCoordinates","moveTo","lineTo","stroke","Math","round","render","createElement","canvasDraw","canvasToDraw","drawOn","defaultProps"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\StraightLine.tsx"],"sourcesContent":["import { ScaleContinuousNumeric, ScaleTime } from \"d3-scale\";\nimport * as React from \"react\";\nimport {\n    getAxisCanvas,\n    getStrokeDasharrayCanvas,\n    GenericChartComponent,\n    strokeDashTypes,\n} from \"@react-financial-charts/core\";\n\nexport interface StraightLineProps {\n    readonly lineDash?: strokeDashTypes | number[];\n    readonly lineWidth?: number;\n    readonly strokeStyle?: string;\n    readonly type?: \"vertical\" | \"horizontal\";\n    readonly yValue?: number;\n    readonly xValue?: number;\n}\n\nexport class StraightLine extends React.Component<StraightLineProps> {\n    public static defaultProps = {\n        lineWidth: 1,\n        lineDash: \"Solid\",\n        strokeStyle: \"rgba(0, 0, 0, 0.5)\",\n        type: \"horizontal\",\n    };\n\n    public render() {\n        return <GenericChartComponent canvasDraw={this.drawOnCanvas} canvasToDraw={getAxisCanvas} drawOn={[\"pan\"]} />;\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { type, strokeStyle, lineWidth, lineDash, yValue, xValue } = this.props;\n\n        const {\n            xScale,\n            chartConfig: { yScale, width, height },\n        } = moreProps;\n\n        ctx.beginPath();\n\n        if (strokeStyle !== undefined) {\n            ctx.strokeStyle = strokeStyle;\n        }\n        if (lineWidth !== undefined) {\n            ctx.lineWidth = lineWidth;\n        }\n        if (lineDash !== undefined) {\n            if (typeof lineDash === \"string\") {\n                ctx.setLineDash(getStrokeDasharrayCanvas(lineDash));\n            } else {\n                ctx.setLineDash(lineDash);\n            }\n        }\n\n        const { x1, y1, x2, y2 } = this.getLineCoordinates(type, xScale, yScale, xValue, yValue, width, height);\n\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n    };\n\n    private readonly getLineCoordinates = (\n        type: \"horizontal\" | \"vertical\" | undefined,\n        xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>,\n        yScale: ScaleContinuousNumeric<number, number>,\n        xValue: number | undefined,\n        yValue: number | undefined,\n        width: number,\n        height: number,\n    ) => {\n        return type === \"horizontal\"\n            ? { x1: 0, y1: Math.round(yScale(yValue!)), x2: width, y2: Math.round(yScale(yValue!)) }\n            : { x1: Math.round(xScale(xValue!)), y1: 0, x2: Math.round(xScale(xValue!)), y2: height };\n    };\n}\n"],"mappings":"AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SACIC,aAAa,EACbC,wBAAwB,EACxBC,qBAAqB,QAElB,8BAA8B;AAWrC,OAAM,MAAOC,YAAa,SAAQJ,KAAK,CAACK,SAA4B;EAApEC,YAAA;;IAYqB,KAAAC,YAAY,GAAG,CAACC,GAA6B,EAAEC,SAAc,KAAI;MAC9E,MAAM;QAAEC,IAAI;QAAEC,WAAW;QAAEC,SAAS;QAAEC,QAAQ;QAAEC,MAAM;QAAEC;MAAM,CAAE,GAAG,IAAI,CAACC,KAAK;MAE7E,MAAM;QACFC,MAAM;QACNC,WAAW,EAAE;UAAEC,MAAM;UAAEC,KAAK;UAAEC;QAAM;MAAE,CACzC,GAAGZ,SAAS;MAEbD,GAAG,CAACc,SAAS,EAAE;MAEf,IAAIX,WAAW,KAAKY,SAAS,EAAE;QAC3Bf,GAAG,CAACG,WAAW,GAAGA,WAAW;;MAEjC,IAAIC,SAAS,KAAKW,SAAS,EAAE;QACzBf,GAAG,CAACI,SAAS,GAAGA,SAAS;;MAE7B,IAAIC,QAAQ,KAAKU,SAAS,EAAE;QACxB,IAAI,OAAOV,QAAQ,KAAK,QAAQ,EAAE;UAC9BL,GAAG,CAACgB,WAAW,CAACtB,wBAAwB,CAACW,QAAQ,CAAC,CAAC;SACtD,MAAM;UACHL,GAAG,CAACgB,WAAW,CAACX,QAAQ,CAAC;;;MAIjC,MAAM;QAAEY,EAAE;QAAEC,EAAE;QAAEC,EAAE;QAAEC;MAAE,CAAE,GAAG,IAAI,CAACC,kBAAkB,CAACnB,IAAI,EAAEO,MAAM,EAAEE,MAAM,EAAEJ,MAAM,EAAED,MAAM,EAAEM,KAAK,EAAEC,MAAM,CAAC;MAEvGb,GAAG,CAACsB,MAAM,CAACL,EAAE,EAAEC,EAAE,CAAC;MAClBlB,GAAG,CAACuB,MAAM,CAACJ,EAAE,EAAEC,EAAE,CAAC;MAClBpB,GAAG,CAACwB,MAAM,EAAE;IAChB,CAAC;IAEgB,KAAAH,kBAAkB,GAAG,CAClCnB,IAA2C,EAC3CO,MAA0E,EAC1EE,MAA8C,EAC9CJ,MAA0B,EAC1BD,MAA0B,EAC1BM,KAAa,EACbC,MAAc,KACd;MACA,OAAOX,IAAI,KAAK,YAAY,GACtB;QAAEe,EAAE,EAAE,CAAC;QAAEC,EAAE,EAAEO,IAAI,CAACC,KAAK,CAACf,MAAM,CAACL,MAAO,CAAC,CAAC;QAAEa,EAAE,EAAEP,KAAK;QAAEQ,EAAE,EAAEK,IAAI,CAACC,KAAK,CAACf,MAAM,CAACL,MAAO,CAAC;MAAC,CAAE,GACtF;QAAEW,EAAE,EAAEQ,IAAI,CAACC,KAAK,CAACjB,MAAM,CAACF,MAAO,CAAC,CAAC;QAAEW,EAAE,EAAE,CAAC;QAAEC,EAAE,EAAEM,IAAI,CAACC,KAAK,CAACjB,MAAM,CAACF,MAAO,CAAC,CAAC;QAAEa,EAAE,EAAEP;MAAM,CAAE;IACjG,CAAC;EACL;EAhDWc,MAAMA,CAAA;IACT,OAAOnC,KAAA,CAAAoC,aAAA,CAACjC,qBAAqB;MAACkC,UAAU,EAAE,IAAI,CAAC9B,YAAY;MAAE+B,YAAY,EAAErC,aAAa;MAAEsC,MAAM,EAAE,CAAC,KAAK;IAAC,EAAI;EACjH;;AATcnC,YAAA,CAAAoC,YAAY,GAAG;EACzB5B,SAAS,EAAE,CAAC;EACZC,QAAQ,EAAE,OAAO;EACjBF,WAAW,EAAE,oBAAoB;EACjCD,IAAI,EAAE;CACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}