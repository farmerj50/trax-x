{"ast":null,"code":"import { GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { SingleTooltip } from \"./SingleTooltip\";\nimport { ToolTipText } from \"./ToolTipText\";\nexport class GroupTooltip extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.getPosition = moreProps => {\n      const {\n        position\n      } = this.props;\n      const {\n        height,\n        width\n      } = moreProps.chartConfig;\n      const dx = 20;\n      const dy = 40;\n      let textAnchor;\n      let xyPos = null;\n      if (position !== undefined) {\n        switch (position) {\n          case \"topRight\":\n            xyPos = [width - dx, null];\n            textAnchor = \"end\";\n            break;\n          case \"bottomLeft\":\n            xyPos = [null, height - dy];\n            break;\n          case \"bottomRight\":\n            xyPos = [width - dx, height - dy];\n            textAnchor = \"end\";\n            break;\n          default:\n            xyPos = [null, null];\n        }\n      } else {\n        xyPos = [null, null];\n      }\n      return {\n        xyPos,\n        textAnchor\n      };\n    };\n    this.renderSVG = moreProps => {\n      var _a;\n      const {\n        chartId,\n        fullData\n      } = moreProps;\n      const {\n        className,\n        displayInit = GroupTooltip.defaultProps.displayInit,\n        displayValuesFor,\n        onClick,\n        width = 60,\n        verticalSize = 13,\n        fontFamily,\n        fontSize,\n        fontWeight,\n        layout,\n        origin,\n        displayFormat,\n        options\n      } = this.props;\n      const currentItem = (_a = displayValuesFor(this.props, moreProps)) !== null && _a !== void 0 ? _a : last(fullData);\n      const {\n        xyPos,\n        textAnchor\n      } = this.getPosition(moreProps);\n      const xPos = xyPos != null && xyPos[0] != null ? xyPos[0] : origin[0];\n      const yPos = xyPos != null && xyPos[1] != null ? xyPos[1] : origin[1];\n      const singleTooltip = options.map((each, idx) => {\n        const yValue = currentItem && each.yAccessor(currentItem);\n        const yDisplayValue = yValue ? displayFormat(yValue) : displayInit;\n        const orig = () => {\n          if (layout === \"horizontal\" || layout === \"horizontalRows\") {\n            return [width * idx, 0];\n          }\n          if (layout === \"vertical\") {\n            return [0, verticalSize * idx];\n          }\n          if (layout === \"verticalRows\") {\n            return [0, verticalSize * 2.3 * idx];\n          }\n          return [0, 0];\n        };\n        return React.createElement(SingleTooltip, {\n          key: idx,\n          layout: layout,\n          origin: orig(),\n          yLabel: each.yLabel,\n          yValue: yDisplayValue,\n          options: each,\n          forChart: chartId,\n          onClick: onClick,\n          fontFamily: fontFamily,\n          fontSize: fontSize,\n          labelFill: each.labelFill,\n          valueFill: each.valueFill,\n          withShape: each.withShape\n        });\n      });\n      return React.createElement(\"g\", {\n        transform: `translate(${xPos}, ${yPos})`,\n        className: className,\n        textAnchor: textAnchor\n      }, layout === \"horizontalInline\" ? React.createElement(ToolTipText, {\n        x: 0,\n        y: 0,\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }, singleTooltip) : singleTooltip);\n    };\n  }\n  render() {\n    return React.createElement(GenericChartComponent, {\n      clip: false,\n      svgDraw: this.renderSVG,\n      drawOn: [\"mousemove\"]\n    });\n  }\n}\nGroupTooltip.defaultProps = {\n  className: \"react-financial-charts-tooltip react-financial-charts-group-tooltip\",\n  layout: \"horizontal\",\n  displayFormat: format(\".2f\"),\n  displayInit: \"\",\n  displayValuesFor: (_, props) => props.currentItem,\n  origin: [0, 0],\n  width: 60,\n  verticalSize: 13\n};","map":{"version":3,"names":["GenericChartComponent","last","format","React","SingleTooltip","ToolTipText","GroupTooltip","Component","constructor","getPosition","moreProps","position","props","height","width","chartConfig","dx","dy","textAnchor","xyPos","undefined","renderSVG","chartId","fullData","className","displayInit","defaultProps","displayValuesFor","onClick","verticalSize","fontFamily","fontSize","fontWeight","layout","origin","displayFormat","options","currentItem","_a","xPos","yPos","singleTooltip","map","each","idx","yValue","yAccessor","yDisplayValue","orig","createElement","key","yLabel","forChart","labelFill","valueFill","withShape","transform","x","y","render","clip","svgDraw","drawOn","_"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\tooltip\\src\\GroupTooltip.tsx"],"sourcesContent":["import { GenericChartComponent, last } from \"@react-financial-charts/core\";\nimport { format } from \"d3-format\";\nimport * as React from \"react\";\nimport { layouts, SingleTooltip } from \"./SingleTooltip\";\nimport { ToolTipText } from \"./ToolTipText\";\n\nexport interface GroupTooltipProps {\n    readonly className?: string;\n    readonly fontFamily?: string;\n    readonly fontSize?: number;\n    readonly fontWeight?: number;\n    readonly displayFormat: (value: number) => string;\n    readonly displayInit?: string;\n    readonly displayValuesFor: (props: GroupTooltipProps, moreProps: any) => any;\n    readonly layout: layouts;\n    readonly onClick?: (event: React.MouseEvent, details: any) => void;\n    readonly options: {\n        labelFill?: string;\n        yLabel: string;\n        yAccessor: (data: any) => number;\n        valueFill?: string;\n        withShape?: boolean;\n    }[];\n    readonly origin: [number, number];\n    readonly position?: \"topRight\" | \"bottomLeft\" | \"bottomRight\";\n    readonly verticalSize?: number; // \"verticalSize\" only be used, if layout is \"vertical\", \"verticalRows\".\n    readonly width?: number; // \"width\" only be used, if layout is \"horizontal\" or \"horizontalRows\".\n}\n\nexport class GroupTooltip extends React.Component<GroupTooltipProps> {\n    public static defaultProps = {\n        className: \"react-financial-charts-tooltip react-financial-charts-group-tooltip\",\n        layout: \"horizontal\",\n        displayFormat: format(\".2f\"),\n        displayInit: \"\",\n        displayValuesFor: (_: any, props: any) => props.currentItem,\n        origin: [0, 0],\n        width: 60,\n        verticalSize: 13,\n    };\n\n    public render() {\n        return <GenericChartComponent clip={false} svgDraw={this.renderSVG} drawOn={[\"mousemove\"]} />;\n    }\n\n    private readonly getPosition = (moreProps: any) => {\n        const { position } = this.props;\n        const { height, width } = moreProps.chartConfig;\n\n        const dx = 20;\n        const dy = 40;\n        let textAnchor: string | undefined;\n        let xyPos: (number | null)[] | null = null;\n\n        if (position !== undefined) {\n            switch (position) {\n                case \"topRight\":\n                    xyPos = [width - dx, null];\n                    textAnchor = \"end\";\n                    break;\n                case \"bottomLeft\":\n                    xyPos = [null, height - dy];\n                    break;\n                case \"bottomRight\":\n                    xyPos = [width - dx, height - dy];\n                    textAnchor = \"end\";\n                    break;\n                default:\n                    xyPos = [null, null];\n            }\n        } else {\n            xyPos = [null, null];\n        }\n\n        return { xyPos, textAnchor };\n    };\n\n    private readonly renderSVG = (moreProps: any) => {\n        const { chartId, fullData } = moreProps;\n\n        const {\n            className,\n            displayInit = GroupTooltip.defaultProps.displayInit,\n            displayValuesFor,\n            onClick,\n            width = 60,\n            verticalSize = 13,\n            fontFamily,\n            fontSize,\n            fontWeight,\n            layout,\n            origin,\n            displayFormat,\n            options,\n        } = this.props;\n\n        const currentItem = displayValuesFor(this.props, moreProps) ?? last(fullData);\n\n        const { xyPos, textAnchor } = this.getPosition(moreProps);\n\n        const xPos = xyPos != null && xyPos[0] != null ? xyPos[0] : origin[0];\n        const yPos = xyPos != null && xyPos[1] != null ? xyPos[1] : origin[1];\n\n        const singleTooltip = options.map((each, idx) => {\n            const yValue = currentItem && each.yAccessor(currentItem);\n            const yDisplayValue = yValue ? displayFormat(yValue) : displayInit;\n\n            const orig: () => [number, number] = () => {\n                if (layout === \"horizontal\" || layout === \"horizontalRows\") {\n                    return [width * idx, 0];\n                }\n                if (layout === \"vertical\") {\n                    return [0, verticalSize * idx];\n                }\n                if (layout === \"verticalRows\") {\n                    return [0, verticalSize * 2.3 * idx];\n                }\n                return [0, 0];\n            };\n\n            return (\n                <SingleTooltip\n                    key={idx}\n                    layout={layout}\n                    origin={orig()}\n                    yLabel={each.yLabel}\n                    yValue={yDisplayValue}\n                    options={each}\n                    forChart={chartId}\n                    onClick={onClick}\n                    fontFamily={fontFamily}\n                    fontSize={fontSize}\n                    labelFill={each.labelFill}\n                    valueFill={each.valueFill}\n                    withShape={each.withShape}\n                />\n            );\n        });\n\n        return (\n            <g transform={`translate(${xPos}, ${yPos})`} className={className} textAnchor={textAnchor}>\n                {layout === \"horizontalInline\" ? (\n                    <ToolTipText x={0} y={0} fontFamily={fontFamily} fontSize={fontSize} fontWeight={fontWeight}>\n                        {singleTooltip}\n                    </ToolTipText>\n                ) : (\n                    singleTooltip\n                )}\n            </g>\n        );\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}