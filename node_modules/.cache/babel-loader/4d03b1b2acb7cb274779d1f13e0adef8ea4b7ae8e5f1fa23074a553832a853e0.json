{"ast":null,"code":"import * as React from \"react\";\nimport { first, getAxisCanvas, getMouseCanvas, GenericChartComponent, last } from \"@react-financial-charts/core\";\n/**\n * SAR stands for 'stop and reverse'.\n * The indicator is below prices as they're rising and above\n * prices as they're falling. In this regard, the indicator\n * stops and reverses when the price trend reverses and breaks above or below the indicator.\n */\nexport class SARSeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        yAccessor,\n        fillStyle = SARSeries.defaultProps.fillStyle,\n        strokeStyle\n      } = this.props;\n      const {\n        xAccessor,\n        plotData,\n        xScale,\n        chartConfig: {\n          yScale\n        },\n        hovering\n      } = moreProps;\n      const width = xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)));\n      const d = width / plotData.length * 0.5 / 2;\n      const radius = Math.min(2, Math.max(0.5, d)) + (hovering ? 2 : 0);\n      plotData.forEach(each => {\n        const yValue = yAccessor(each);\n        if (yValue === undefined) {\n          return;\n        }\n        const centerX = xScale(xAccessor(each));\n        const centerY = yScale(yValue);\n        const color = yValue > each.close ? fillStyle.falling : fillStyle.rising;\n        ctx.fillStyle = color;\n        if (strokeStyle !== undefined) {\n          ctx.strokeStyle = yValue > each.close ? strokeStyle.falling : strokeStyle.rising;\n        }\n        ctx.beginPath();\n        ctx.ellipse(centerX, centerY, radius, radius, 0, 0, 2 * Math.PI);\n        ctx.closePath();\n        ctx.fill();\n        if (strokeStyle !== undefined) {\n          ctx.stroke();\n        }\n      });\n    };\n    this.isHover = moreProps => {\n      const {\n        mouseXY,\n        currentItem,\n        chartConfig: {\n          yScale\n        }\n      } = moreProps;\n      const {\n        yAccessor\n      } = this.props;\n      const y = mouseXY[1];\n      const currentY = yScale(yAccessor(currentItem));\n      return y < currentY + 5 && y > currentY - 5;\n    };\n  }\n  render() {\n    const {\n      highlightOnHover,\n      onClick,\n      onDoubleClick,\n      onContextMenu\n    } = this.props;\n    const hoverProps = highlightOnHover ? {\n      isHover: this.isHover,\n      drawOn: [\"mousemove\", \"pan\"],\n      canvasToDraw: getMouseCanvas\n    } : {\n      drawOn: [\"pan\"],\n      canvasToDraw: getAxisCanvas\n    };\n    return React.createElement(GenericChartComponent, Object.assign({\n      canvasDraw: this.drawOnCanvas,\n      onClickWhenHover: onClick,\n      onDoubleClickWhenHover: onDoubleClick,\n      onContextMenuWhenHover: onContextMenu\n    }, hoverProps));\n  }\n}\nSARSeries.defaultProps = {\n  fillStyle: {\n    falling: \"#4682B4\",\n    rising: \"#15EC2E\"\n  },\n  highlightOnHover: false\n};","map":{"version":3,"names":["React","first","getAxisCanvas","getMouseCanvas","GenericChartComponent","last","SARSeries","Component","constructor","drawOnCanvas","ctx","moreProps","yAccessor","fillStyle","defaultProps","strokeStyle","props","xAccessor","plotData","xScale","chartConfig","yScale","hovering","width","d","length","radius","Math","min","max","forEach","each","yValue","undefined","centerX","centerY","color","close","falling","rising","beginPath","ellipse","PI","closePath","fill","stroke","isHover","mouseXY","currentItem","y","currentY","render","highlightOnHover","onClick","onDoubleClick","onContextMenu","hoverProps","drawOn","canvasToDraw","createElement","Object","assign","canvasDraw","onClickWhenHover","onDoubleClickWhenHover","onContextMenuWhenHover"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\SARSeries.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { first, getAxisCanvas, getMouseCanvas, GenericChartComponent, last } from \"@react-financial-charts/core\";\n\nexport interface SARSeriesProps {\n    readonly fillStyle?: {\n        falling: string;\n        rising: string;\n    };\n    readonly strokeStyle?: {\n        falling: string;\n        rising: string;\n    };\n    readonly highlightOnHover?: boolean;\n    readonly onClick?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onDoubleClick?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onContextMenu?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly yAccessor: (datum: any) => number | undefined;\n}\n\n/**\n * SAR stands for 'stop and reverse'.\n * The indicator is below prices as they're rising and above\n * prices as they're falling. In this regard, the indicator\n * stops and reverses when the price trend reverses and breaks above or below the indicator.\n */\nexport class SARSeries extends React.Component<SARSeriesProps> {\n    public static defaultProps = {\n        fillStyle: {\n            falling: \"#4682B4\",\n            rising: \"#15EC2E\",\n        },\n        highlightOnHover: false,\n    };\n\n    public render() {\n        const { highlightOnHover, onClick, onDoubleClick, onContextMenu } = this.props;\n\n        const hoverProps = highlightOnHover\n            ? {\n                  isHover: this.isHover,\n                  drawOn: [\"mousemove\", \"pan\"],\n                  canvasToDraw: getMouseCanvas,\n              }\n            : {\n                  drawOn: [\"pan\"],\n                  canvasToDraw: getAxisCanvas,\n              };\n\n        return (\n            <GenericChartComponent\n                canvasDraw={this.drawOnCanvas}\n                onClickWhenHover={onClick}\n                onDoubleClickWhenHover={onDoubleClick}\n                onContextMenuWhenHover={onContextMenu}\n                {...hoverProps}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { yAccessor, fillStyle = SARSeries.defaultProps.fillStyle, strokeStyle } = this.props;\n        const {\n            xAccessor,\n            plotData,\n            xScale,\n            chartConfig: { yScale },\n            hovering,\n        } = moreProps;\n\n        const width = xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)));\n\n        const d = ((width / plotData.length) * 0.5) / 2;\n        const radius = Math.min(2, Math.max(0.5, d)) + (hovering ? 2 : 0);\n\n        (plotData as any[]).forEach((each) => {\n            const yValue = yAccessor(each);\n            if (yValue === undefined) {\n                return;\n            }\n\n            const centerX = xScale(xAccessor(each));\n            const centerY = yScale(yValue);\n            const color = yValue > each.close ? fillStyle.falling : fillStyle.rising;\n\n            ctx.fillStyle = color;\n            if (strokeStyle !== undefined) {\n                ctx.strokeStyle = yValue > each.close ? strokeStyle.falling : strokeStyle.rising;\n            }\n\n            ctx.beginPath();\n            ctx.ellipse(centerX, centerY, radius, radius, 0, 0, 2 * Math.PI);\n            ctx.closePath();\n            ctx.fill();\n            if (strokeStyle !== undefined) {\n                ctx.stroke();\n            }\n        });\n    };\n\n    private readonly isHover = (moreProps: any) => {\n        const {\n            mouseXY,\n            currentItem,\n            chartConfig: { yScale },\n        } = moreProps;\n        const { yAccessor } = this.props;\n        const y = mouseXY[1];\n        const currentY = yScale(yAccessor(currentItem));\n        return y < currentY + 5 && y > currentY - 5;\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}