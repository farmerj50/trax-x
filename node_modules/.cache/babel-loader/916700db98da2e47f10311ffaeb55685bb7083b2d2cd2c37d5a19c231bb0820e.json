{"ast":null,"code":"import { ExportUtils } from '../../common/utils/export';\nimport { beforeExport } from '../../common/model/constants';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { getValue } from '@syncfusion/ej2-base';\n/**\n * The `Export` module is used to print and export the rendered chart.\n */\nvar Export = /** @class */function () {\n  /**\n   * Constructor for export module.\n   *\n   * @private\n   */\n  function Export(chart) {\n    this.actualRowCount = 0;\n    this.series = [];\n    this.axisCollection = [];\n    this.requiredValuesLength = 0;\n    this.histogramSeriesCount = 0;\n    this.chart = chart;\n  }\n  /**\n   * Exports the chart or charts to the specified file format.\n   *\n   * @param {ExportType} type - The type of export (e.g., 'PNG', 'JPEG', 'PDF', etc.).\n   * @param {string} fileName - The name of the file to save.\n   * @param {PdfPageOrientation} [orientation] - The orientation of the PDF page. Defaults to 'Portrait'.\n   * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} [controls] - An array of chart or chart-like components to export.\n   * @param {number} [width] - The width of the exported image or PDF page.\n   * @param {number} [height] - The height of the exported image or PDF page.\n   * @param {boolean} [isVertical] - Specifies whether to export the chart vertically. Defaults to false.\n   * @param {IPDFArgs} [header] - The header options for the PDF.\n   * @param {IPDFArgs} [footer] - The footer options for the PDF.\n   * @param {boolean} [exportToMultiplePage] - Specifies whether to export the charts to multiple pages in PDF. Defaults to false.\n   * @returns {void}\n   * @public\n   */\n  Export.prototype.export = function (type, fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n    var exportChart = new ExportUtils(this.chart);\n    controls = controls ? controls : [this.chart];\n    var argsData = {\n      cancel: false,\n      name: beforeExport,\n      width: width,\n      height: height\n    };\n    this.chart.trigger(beforeExport, argsData);\n    if (!argsData.cancel) {\n      if (type === 'CSV' || type === 'XLSX') {\n        this.excelExport(controls, fileName, type);\n      } else {\n        exportChart.export(type, fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\n      }\n    }\n  };\n  /**\n   * Exports the specified chart or charts to Excel format.\n   *\n   * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - An array of chart or chart-like components to export.\n   * @param {string} fileName - The name of the Excel file to save.\n   * @param {ExportType} type - The type of export (e.g., 'XLSX', 'CSV', etc.).\n   * @returns {void}\n   * @private\n   */\n  Export.prototype.excelExport = function (controls, fileName, type) {\n    this.rows = [];\n    this.actualRowCount = 1;\n    var workSheets = [];\n    var requiredValues = [];\n    var headerStyle = {\n      bold: true,\n      hAlign: 'Center',\n      vAlign: 'Center',\n      wrapText: true\n    };\n    var xValues = [];\n    var isRangeNavigator = controls[0].getModuleName() === 'rangeNavigator';\n    var isAccumulation = controls[0].getModuleName() === 'accumulationchart';\n    this.series = isRangeNavigator ? controls[0].series : controls[0].visibleSeries;\n    if (isRangeNavigator && this.series.length === 0) {\n      if (controls[0].dataSource) {\n        //To create an Excel sheet when the Rangenavigator series is not given.\n        this.createRangeNavigatorExcelSheet(controls[0], headerStyle, type);\n      }\n    } else {\n      this.histogramSeriesCount = 0;\n      this.requiredValuesLength = 0;\n      this.axisCollection = [];\n      if (isAccumulation || isRangeNavigator) {\n        this.axisCollection.push(null);\n      } else {\n        this.axisCollection = controls[0].getModuleName() === 'stockChart' ? controls[0].chart.horizontalAxes : controls[0].horizontalAxes;\n      }\n      //To get the number of columns for the excel.\n      requiredValues = this.getRequiredValues(isRangeNavigator);\n      if (this.requiredValuesLength === 0 && this.series.length === this.histogramSeriesCount) {\n        return;\n      }\n      //To get all x values in the series.\n      xValues = this.getXValue(requiredValues, controls, isRangeNavigator, isAccumulation);\n      //To get the the chart title and series name.\n      this.getTitle(requiredValues, headerStyle, controls, isRangeNavigator, isAccumulation, type, xValues[0].length);\n      //To create an Excel sheet.\n      this.createExcelSheet(isRangeNavigator, isAccumulation, xValues, type, requiredValues, headerStyle, controls);\n    }\n    var columns = [];\n    this.requiredValuesLength = this.requiredValuesLength === 0 ? 1 : this.requiredValuesLength;\n    for (var columnCount = 0; columnCount < this.requiredValuesLength; columnCount++) {\n      columns.push({\n        index: columnCount + 1,\n        width: 100\n      });\n    }\n    workSheets.push({\n      columns: columns,\n      rows: this.rows\n    });\n    var book = new Workbook({\n      worksheets: workSheets\n    }, type === 'XLSX' ? 'xlsx' : 'csv');\n    fileName = fileName ? fileName : type === 'XLSX' ? 'XLSX' : 'CSV';\n    book.save(fileName + (type === 'XLSX' ? '.xlsx' : '.csv'));\n  };\n  /**\n   * Creates an Excel sheet for exporting RangeNavigator control data.\n   *\n   * @param {RangeNavigator} controls - The RangeNavigator control to export.\n   * @param {ExcelCellStyle} headerStyle - The style to apply to the header cells in the Excel sheet.\n   * @param {ExportType} type - The type of export (e.g., 'XLSX', 'CSV', etc.).\n   * @returns {void}\n   * @private\n   */\n  Export.prototype.createRangeNavigatorExcelSheet = function (controls, headerStyle, type) {\n    var xName = controls.xName;\n    var yName = controls.yName;\n    this.rows.push({\n      index: this.actualRowCount,\n      cells: [{\n        index: 1,\n        value: controls.valueType.indexOf('DateTime') > -1 ? controls.valueType : 'Category',\n        colSpan: 1,\n        rowSpan: 1,\n        style: headerStyle\n      }, {\n        index: 2,\n        value: yName,\n        colSpan: 1,\n        rowSpan: 1,\n        style: headerStyle\n      }]\n    });\n    this.actualRowCount++;\n    var dataSource = controls.dataSource;\n    for (var dataCount = 0; dataCount < dataSource.length; dataCount++) {\n      this.rows.push({\n        index: this.actualRowCount,\n        cells: [{\n          index: 1,\n          value: type === 'CSV' && dataSource[dataCount][xName] === null ? '' : dataSource[dataCount][xName],\n          colSpan: 1,\n          rowSpan: 1,\n          style: headerStyle\n        }, {\n          index: 2,\n          value: type === 'CSV' && dataSource[dataCount][yName] === null ? '' : dataSource[dataCount][yName],\n          colSpan: 1,\n          rowSpan: 1,\n          style: {}\n        }]\n      });\n      this.actualRowCount++;\n    }\n    this.requiredValuesLength = 2;\n  };\n  /**\n   * Gets the number of columns for the Excel sheet.\n   *\n   * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n   * @returns {string[][]} - An array containing the required values for the Excel sheet.\n   * @private\n   */\n  Export.prototype.getRequiredValues = function (isRangeNavigator) {\n    var requiredValues = [];\n    var _loop_1 = function (seriesCount) {\n      var seriesType = this_1.series[seriesCount].type;\n      if (!isRangeNavigator && !this_1.series[seriesCount].visible || this_1.series[seriesCount].category === 'TrendLine') {\n        requiredValues.push([]);\n        return \"continue\";\n      }\n      if (seriesType === 'Histogram') {\n        requiredValues.push([]);\n        this_1.histogramSeriesCount++;\n      } else if (this_1.series[seriesCount].category === 'Pareto') {\n        requiredValues.push([this_1.series[seriesCount]['xName'], 'y']);\n      } else if (seriesType.indexOf('Range') !== -1 || seriesType === 'Hilo') {\n        requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['high'], this_1.series[seriesCount]['low']]);\n      } else if (seriesType === 'HiloOpenClose' || seriesType === 'Candle') {\n        requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['high'], this_1.series[seriesCount]['low'], this_1.series[seriesCount]['open'], this_1.series[seriesCount]['close']]);\n        if (seriesType === 'Candle' && this_1.series[seriesCount]['volume'] !== '') {\n          requiredValues[seriesCount].push(this_1.series[seriesCount]['volume']);\n        }\n      } else if (seriesType === 'BoxAndWhisker') {\n        requiredValues.push([this_1.series[seriesCount]['xName'], 'maximum', 'upperQuartile', 'median', 'lowerQuartile', 'minimum', 'outliers']);\n      } else if (seriesType === 'Bubble') {\n        requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['yName']]);\n        if (this_1.series[seriesCount]['size'] !== '') {\n          requiredValues[seriesCount].push(this_1.series[seriesCount]['size']);\n        }\n      } else if (seriesType === 'Pie') {\n        requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['yName']]);\n        if (this_1.series[seriesCount]['radius'].match(/[a-zA-Z]/)) {\n          requiredValues[seriesCount].push(this_1.series[seriesCount]['radius']);\n        }\n      } else {\n        requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['yName']]);\n      }\n      if (this_1.series[seriesCount].errorBar && this_1.series[seriesCount].errorBar.visible) {\n        var errorBar_1 = this_1.series[seriesCount].errorBar;\n        var errorTypes = ['verticalError', 'horizontalError', 'verticalNegativeError', 'horizontalNegativeError', 'verticalPositiveError', 'horizontalPositiveError'];\n        errorTypes.forEach(function (errorType) {\n          if (typeof errorBar_1[errorType] === 'string') {\n            requiredValues[seriesCount].push(errorBar_1[errorType]);\n          }\n        });\n      }\n      this_1.requiredValuesLength += requiredValues[seriesCount].length;\n    };\n    var this_1 = this;\n    for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n      _loop_1(seriesCount);\n    }\n    return requiredValues;\n  };\n  /**\n   * Gets the title for the Excel sheet.\n   *\n   * @param {string[][]} requiredValues - The required values for the Excel sheet.\n   * @param {ExcelCellStyle} headerStyle - The style for the header.\n   * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - The controls to export.\n   * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n   * @param {boolean} isAccumulation - Specifies whether the data is for an AccumulationChart.\n   * @param {ExportType} type - The type of export.\n   * @param {number} xValueLength - The length of X values.\n   * @returns {void}\n   * @private\n   */\n  Export.prototype.getTitle = function (requiredValues, headerStyle, controls, isRangeNavigator, isAccumulation, type, xValueLength) {\n    var cells = [];\n    var additionalCells = [];\n    var index = 1;\n    var isTitle = false;\n    if (!isRangeNavigator && type === 'XLSX' && controls[0].title) {\n      this.rows.push({});\n      this.actualRowCount++;\n      isTitle = true;\n    }\n    for (var axisCount = 0; axisCount < this.axisCollection.length; axisCount++) {\n      if (isAccumulation && xValueLength === 0) {\n        break;\n      }\n      var isYName = false;\n      var valueType = '';\n      var currentIndex = index;\n      var isXValue = false;\n      for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n        var axisName = this.axisCollection[axisCount] !== null ? this.axisCollection[axisCount].name === 'primaryXAxis' || this.axisCollection[axisCount].name === 'primaryYAxis' && this.series[seriesCount].type.indexOf('Bar') > -1 ? null : this.axisCollection[axisCount].name : '';\n        if (!isRangeNavigator && (!isAccumulation && axisName !== this.series[seriesCount].xAxisName || !this.series[seriesCount].visible || this.series[seriesCount].category === 'TrendLine' || this.series[seriesCount].type === 'Histogram')) {\n          continue;\n        }\n        if (!isXValue) {\n          cells.push({});\n          index++;\n        }\n        isXValue = true;\n        var seriesName = this.series[seriesCount].name;\n        var requiredValuesLength = this.series[seriesCount].type === 'BoxAndWhisker' ? requiredValues[seriesCount].length - 1 : requiredValues[seriesCount].length;\n        if (requiredValues[seriesCount][1] === this.series[seriesCount].yName) {\n          for (var requiredValuesCount = 1; requiredValuesCount < requiredValuesLength; requiredValuesCount++) {\n            cells.push({\n              index: index,\n              value: requiredValuesCount === 1 ? seriesName ? seriesName : 'Series-' + (seriesCount + 1) : requiredValues[seriesCount][requiredValuesCount],\n              colSpan: 1,\n              rowSpan: 1,\n              style: headerStyle\n            });\n            index++;\n          }\n        } else {\n          cells.push({\n            index: index,\n            value: seriesName ? seriesName : 'Series-' + (seriesCount + 1),\n            colSpan: requiredValuesLength - 1,\n            rowSpan: 1,\n            style: headerStyle\n          });\n          var localIndex = index;\n          for (var requiredValuesCount = 1; requiredValuesCount < requiredValuesLength; requiredValuesCount++) {\n            additionalCells.push({\n              index: localIndex,\n              value: requiredValues[seriesCount][requiredValuesCount],\n              colSpan: 1,\n              rowSpan: 1,\n              style: headerStyle\n            });\n            localIndex++;\n          }\n          if (this.series[seriesCount].type === 'BoxAndWhisker') {\n            cells.push({\n              index: localIndex,\n              value: requiredValues[seriesCount][requiredValuesLength],\n              colSpan: 1,\n              rowSpan: 2,\n              style: headerStyle\n            });\n            localIndex++;\n          }\n          index = localIndex;\n          isYName = true;\n        }\n        valueType = isAccumulation ? requiredValues[0][0] : isRangeNavigator ? controls[0].valueType : this.axisCollection[axisCount].valueType;\n        valueType = isAccumulation || valueType.indexOf('DateTime') > -1 ? valueType : 'Category';\n      }\n      if (isXValue) {\n        cells[currentIndex - 1] = {\n          index: currentIndex,\n          value: valueType,\n          colSpan: 1,\n          rowSpan: isYName ? 2 : 1,\n          style: headerStyle\n        };\n      }\n    }\n    if (cells.length) {\n      this.rows.push({\n        index: this.actualRowCount,\n        cells: cells\n      });\n      this.actualRowCount++;\n    }\n    if (additionalCells.length) {\n      this.rows.push({\n        index: this.actualRowCount,\n        cells: additionalCells\n      });\n      this.actualRowCount++;\n    }\n    if (isTitle) {\n      cells = [];\n      cells.push({\n        index: 1,\n        value: controls[0].title,\n        colSpan: index === 1 ? index : index - 1,\n        rowSpan: 1,\n        style: headerStyle\n      });\n      this.rows[0] = {\n        index: 1,\n        cells: cells\n      };\n    }\n    this.requiredValuesLength = index - 1;\n  };\n  /**\n   * Gets the X values for the Excel sheet.\n   *\n   * @param {string[][]} requiredValues - The required values for the Excel sheet.\n   * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - The controls to export.\n   * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n   * @param {boolean} isAccumulation - Specifies whether the data is for an AccumulationChart.\n   * @returns {number[][]} - The X values.\n   * @private\n   */\n  Export.prototype.getXValue = function (requiredValues, controls, isRangeNavigator, isAccumulation) {\n    var xValues = [];\n    for (var axisCount = 0; axisCount < this.axisCollection.length; axisCount++) {\n      var xValue = [];\n      var valueType = isAccumulation ? '' : isRangeNavigator ? controls[0].valueType : this.axisCollection[axisCount].valueType;\n      for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n        var axisName = this.axisCollection[axisCount] !== null ? this.axisCollection[axisCount].name === 'primaryXAxis' || this.axisCollection[axisCount].name === 'primaryYAxis' && this.series[seriesCount].type.indexOf('Bar') > -1 ? null : this.axisCollection[axisCount].name : '';\n        if (!isRangeNavigator && (!isAccumulation && axisName !== this.series[seriesCount].xAxisName || !this.series[seriesCount].visible) || this.series[seriesCount].category === 'TrendLine' || this.series[seriesCount].type === 'Histogram') {\n          continue;\n        }\n        for (var dataCount = 0; dataCount < this.series[seriesCount].dataSource.length; dataCount++) {\n          if (isAccumulation && !this.series[seriesCount].points[dataCount].visible) {\n            continue;\n          }\n          xValue.push(valueType.indexOf('DateTime') > -1 ? new Date(this.series[seriesCount].dataSource[dataCount][requiredValues[seriesCount][0]]).getTime() : this.series[seriesCount].dataSource[dataCount][requiredValues[seriesCount][0]]);\n        }\n      }\n      xValues.push(xValue);\n    }\n    var _loop_2 = function (xValuesLength) {\n      xValues[xValuesLength] = xValues[xValuesLength].filter(function (item, index) {\n        return xValues[xValuesLength].indexOf(item) === index;\n      });\n    };\n    for (var xValuesLength = 0; xValuesLength < xValues.length; xValuesLength++) {\n      _loop_2(xValuesLength);\n    }\n    return xValues;\n  };\n  /**\n   * Creates an Excel sheet.\n   *\n   * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n   * @param {boolean} isAccumulation - Specifies whether the data is for an AccumulationChart.\n   * @param {number[][]} xValues - The X values for the Excel sheet.\n   * @param {ExportType} type - The type of export.\n   * @param {string[][]} requiredValues - The required values for the Excel sheet.\n   * @param {ExcelCellStyle} headerStyle - The style for the header in Excel.\n   * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - The controls to export.\n   * @private\n   */\n  Export.prototype.createExcelSheet = function (isRangeNavigator, isAccumulation, xValues, type, requiredValues, headerStyle, controls) {\n    var startIndex = 0;\n    var index = 0;\n    for (var axisCount = 0; axisCount < this.axisCollection.length; axisCount++) {\n      var valueType = isAccumulation ? '' : isRangeNavigator ? controls[0].valueType : this.axisCollection[axisCount].valueType;\n      for (var xValueLength = 0; xValueLength < xValues[axisCount].length; xValueLength++) {\n        index = startIndex ? startIndex : 1;\n        var cells = [];\n        var isXValue = true;\n        for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n          var axisName = this.axisCollection[axisCount] !== null ? this.axisCollection[axisCount].name === 'primaryXAxis' || this.axisCollection[axisCount].name === 'primaryYAxis' && this.series[seriesCount].type.indexOf('Bar') > -1 ? null : this.axisCollection[axisCount].name : '';\n          if (!isRangeNavigator && (!isAccumulation && this.series[seriesCount].xAxisName !== axisName || !this.series[seriesCount].visible) || this.series[seriesCount].category === 'TrendLine' || this.series[seriesCount].type === 'Histogram') {\n            continue;\n          }\n          var isExist = false;\n          var dataSource = this.series[seriesCount].dataSource;\n          for (var dataCount = 0; dataCount < dataSource.length; dataCount++) {\n            var xValue = valueType.indexOf('DateTime') > -1 ? this.series[seriesCount].category === 'Pareto' ? new Date(this.series[seriesCount].points[dataCount][requiredValues[seriesCount][0]]).getTime() : new Date(dataSource[dataCount][requiredValues[seriesCount][0]]).getTime() : this.series[seriesCount].category === 'Pareto' ? this.series[seriesCount].points[dataCount][requiredValues[seriesCount][0]] : dataSource[dataCount][requiredValues[seriesCount][0]];\n            if (xValues[axisCount][xValueLength] === xValue) {\n              var usedValueCount = isXValue ? 0 : 1;\n              var usedValueLength = this.series[seriesCount].type === 'BoxAndWhisker' ? requiredValues[seriesCount].length - 1 : requiredValues[seriesCount].length;\n              for (; usedValueCount < usedValueLength; usedValueCount++) {\n                var cellValue = this.series[seriesCount].enableComplexProperty ? getValue(requiredValues[seriesCount][usedValueCount], dataSource[dataCount]) : dataSource[dataCount][requiredValues[seriesCount][usedValueCount]];\n                var value = usedValueCount !== 0 && (this.series[seriesCount].type === 'BoxAndWhisker' || this.series[seriesCount].category === 'Pareto') ? this.series[seriesCount].points[dataCount][requiredValues[seriesCount][usedValueCount]] : cellValue;\n                if (value === null && type === 'CSV') {\n                  value = '';\n                }\n                cells.push({\n                  index: usedValueCount === 0 ? startIndex === 0 ? 1 : startIndex : index,\n                  value: value,\n                  colSpan: 1,\n                  rowSpan: 1,\n                  style: usedValueCount === 0 ? headerStyle : {}\n                });\n                index++;\n              }\n              if (this.series[seriesCount].type === 'BoxAndWhisker') {\n                cells.push({\n                  index: index,\n                  value: this.series[seriesCount].points[dataCount]['outliers'][0],\n                  colSpan: 1,\n                  rowSpan: 1,\n                  style: {}\n                });\n                index++;\n              }\n              isXValue = false;\n              isExist = true;\n              break;\n            }\n          }\n          if (!isExist) {\n            index += requiredValues[seriesCount].length - 1;\n          }\n        }\n        this.rows.push({\n          index: this.actualRowCount,\n          cells: cells\n        });\n        this.actualRowCount++;\n      }\n      startIndex = index;\n    }\n  };\n  /**\n   * Gets the data URL of the chart or accumulation chart.\n   *\n   * @param {Chart | AccumulationChart} chart - The chart or accumulation chart.\n   * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string}} - The data URL information.\n   */\n  Export.prototype.getDataUrl = function (chart) {\n    var exportUtil = new ExportUtils(chart);\n    return exportUtil.getDataUrl(chart);\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} - Returns the module name.\n   */\n  Export.prototype.getModuleName = function () {\n    // Returns the module name\n    return 'Export';\n  };\n  /**\n   * To destroy the chart.\n   *\n   * @returns {void}\n   * @private\n   */\n  Export.prototype.destroy = function () {\n    // Destroy method performed here\n  };\n  return Export;\n}();\nexport { Export };","map":{"version":3,"names":["ExportUtils","beforeExport","Workbook","getValue","Export","chart","actualRowCount","series","axisCollection","requiredValuesLength","histogramSeriesCount","prototype","export","type","fileName","orientation","controls","width","height","isVertical","header","footer","exportToMultiplePage","exportChart","argsData","cancel","name","trigger","excelExport","rows","workSheets","requiredValues","headerStyle","bold","hAlign","vAlign","wrapText","xValues","isRangeNavigator","getModuleName","isAccumulation","visibleSeries","length","dataSource","createRangeNavigatorExcelSheet","push","horizontalAxes","getRequiredValues","getXValue","getTitle","createExcelSheet","columns","columnCount","index","book","worksheets","save","xName","yName","cells","value","valueType","indexOf","colSpan","rowSpan","style","dataCount","_loop_1","seriesCount","seriesType","this_1","visible","category","match","errorBar","errorBar_1","errorTypes","forEach","errorType","xValueLength","additionalCells","isTitle","title","axisCount","isYName","currentIndex","isXValue","axisName","xAxisName","seriesName","requiredValuesCount","localIndex","xValue","points","Date","getTime","_loop_2","xValuesLength","filter","item","startIndex","isExist","usedValueCount","usedValueLength","cellValue","enableComplexProperty","getDataUrl","exportUtil","destroy"],"sources":["C:/Users/gabby/trax-x/node_modules/@syncfusion/ej2-charts/src/chart/print-export/export.js"],"sourcesContent":["import { ExportUtils } from '../../common/utils/export';\nimport { beforeExport } from '../../common/model/constants';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { getValue } from '@syncfusion/ej2-base';\n/**\n * The `Export` module is used to print and export the rendered chart.\n */\nvar Export = /** @class */ (function () {\n    /**\n     * Constructor for export module.\n     *\n     * @private\n     */\n    function Export(chart) {\n        this.actualRowCount = 0;\n        this.series = [];\n        this.axisCollection = [];\n        this.requiredValuesLength = 0;\n        this.histogramSeriesCount = 0;\n        this.chart = chart;\n    }\n    /**\n     * Exports the chart or charts to the specified file format.\n     *\n     * @param {ExportType} type - The type of export (e.g., 'PNG', 'JPEG', 'PDF', etc.).\n     * @param {string} fileName - The name of the file to save.\n     * @param {PdfPageOrientation} [orientation] - The orientation of the PDF page. Defaults to 'Portrait'.\n     * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} [controls] - An array of chart or chart-like components to export.\n     * @param {number} [width] - The width of the exported image or PDF page.\n     * @param {number} [height] - The height of the exported image or PDF page.\n     * @param {boolean} [isVertical] - Specifies whether to export the chart vertically. Defaults to false.\n     * @param {IPDFArgs} [header] - The header options for the PDF.\n     * @param {IPDFArgs} [footer] - The footer options for the PDF.\n     * @param {boolean} [exportToMultiplePage] - Specifies whether to export the charts to multiple pages in PDF. Defaults to false.\n     * @returns {void}\n     * @public\n     */\n    Export.prototype.export = function (type, fileName, orientation, controls, width, height, isVertical, header, footer, exportToMultiplePage) {\n        var exportChart = new ExportUtils(this.chart);\n        controls = controls ? controls : [this.chart];\n        var argsData = {\n            cancel: false, name: beforeExport, width: width, height: height\n        };\n        this.chart.trigger(beforeExport, argsData);\n        if (!argsData.cancel) {\n            if (type === 'CSV' || type === 'XLSX') {\n                this.excelExport(controls, fileName, type);\n            }\n            else {\n                exportChart.export(type, fileName, orientation, controls, width = argsData.width, height = argsData.height, isVertical, header, footer, exportToMultiplePage);\n            }\n        }\n    };\n    /**\n     * Exports the specified chart or charts to Excel format.\n     *\n     * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - An array of chart or chart-like components to export.\n     * @param {string} fileName - The name of the Excel file to save.\n     * @param {ExportType} type - The type of export (e.g., 'XLSX', 'CSV', etc.).\n     * @returns {void}\n     * @private\n     */\n    Export.prototype.excelExport = function (controls, fileName, type) {\n        this.rows = [];\n        this.actualRowCount = 1;\n        var workSheets = [];\n        var requiredValues = [];\n        var headerStyle = { bold: true, hAlign: 'Center', vAlign: 'Center', wrapText: true };\n        var xValues = [];\n        var isRangeNavigator = controls[0].getModuleName() === 'rangeNavigator';\n        var isAccumulation = controls[0].getModuleName() === 'accumulationchart';\n        this.series = isRangeNavigator ? controls[0].series : controls[0].visibleSeries;\n        if (isRangeNavigator && this.series.length === 0) {\n            if (controls[0].dataSource) {\n                //To create an Excel sheet when the Rangenavigator series is not given.\n                this.createRangeNavigatorExcelSheet(controls[0], headerStyle, type);\n            }\n        }\n        else {\n            this.histogramSeriesCount = 0;\n            this.requiredValuesLength = 0;\n            this.axisCollection = [];\n            if (isAccumulation || isRangeNavigator) {\n                this.axisCollection.push(null);\n            }\n            else {\n                this.axisCollection = controls[0].getModuleName() === 'stockChart' ? controls[0].chart.horizontalAxes : controls[0].horizontalAxes;\n            }\n            //To get the number of columns for the excel.\n            requiredValues = this.getRequiredValues(isRangeNavigator);\n            if (this.requiredValuesLength === 0 && this.series.length === this.histogramSeriesCount) {\n                return;\n            }\n            //To get all x values in the series.\n            xValues = this.getXValue(requiredValues, controls, isRangeNavigator, isAccumulation);\n            //To get the the chart title and series name.\n            this.getTitle(requiredValues, headerStyle, controls, isRangeNavigator, isAccumulation, type, xValues[0].length);\n            //To create an Excel sheet.\n            this.createExcelSheet(isRangeNavigator, isAccumulation, xValues, type, requiredValues, headerStyle, controls);\n        }\n        var columns = [];\n        this.requiredValuesLength = this.requiredValuesLength === 0 ? 1 : this.requiredValuesLength;\n        for (var columnCount = 0; columnCount < this.requiredValuesLength; columnCount++) {\n            columns.push({ index: columnCount + 1, width: 100 });\n        }\n        workSheets.push({ columns: columns, rows: this.rows });\n        var book = new Workbook({ worksheets: workSheets }, type === 'XLSX' ? 'xlsx' : 'csv');\n        fileName = fileName ? fileName : type === 'XLSX' ? 'XLSX' : 'CSV';\n        book.save(fileName + (type === 'XLSX' ? '.xlsx' : '.csv'));\n    };\n    /**\n     * Creates an Excel sheet for exporting RangeNavigator control data.\n     *\n     * @param {RangeNavigator} controls - The RangeNavigator control to export.\n     * @param {ExcelCellStyle} headerStyle - The style to apply to the header cells in the Excel sheet.\n     * @param {ExportType} type - The type of export (e.g., 'XLSX', 'CSV', etc.).\n     * @returns {void}\n     * @private\n     */\n    Export.prototype.createRangeNavigatorExcelSheet = function (controls, headerStyle, type) {\n        var xName = controls.xName;\n        var yName = controls.yName;\n        this.rows.push({\n            index: this.actualRowCount, cells: [{ index: 1, value: controls.valueType.indexOf('DateTime') > -1 ? controls.valueType : 'Category', colSpan: 1, rowSpan: 1,\n                    style: headerStyle },\n                { index: 2, value: yName, colSpan: 1, rowSpan: 1, style: headerStyle }]\n        });\n        this.actualRowCount++;\n        var dataSource = controls.dataSource;\n        for (var dataCount = 0; dataCount < dataSource.length; dataCount++) {\n            this.rows.push({ index: this.actualRowCount, cells: [{ index: 1, value: (type === 'CSV' && dataSource[dataCount][xName] === null) ? '' :\n                            dataSource[dataCount][xName], colSpan: 1, rowSpan: 1, style: headerStyle },\n                    { index: 2, value: (type === 'CSV' && dataSource[dataCount][yName] === null) ? '' : dataSource[dataCount][yName], colSpan: 1, rowSpan: 1, style: {} }] });\n            this.actualRowCount++;\n        }\n        this.requiredValuesLength = 2;\n    };\n    /**\n     * Gets the number of columns for the Excel sheet.\n     *\n     * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n     * @returns {string[][]} - An array containing the required values for the Excel sheet.\n     * @private\n     */\n    Export.prototype.getRequiredValues = function (isRangeNavigator) {\n        var requiredValues = [];\n        var _loop_1 = function (seriesCount) {\n            var seriesType = this_1.series[seriesCount].type;\n            if ((!isRangeNavigator && !this_1.series[seriesCount].visible) || this_1.series[seriesCount].category === 'TrendLine') {\n                requiredValues.push([]);\n                return \"continue\";\n            }\n            if (seriesType === 'Histogram') {\n                requiredValues.push([]);\n                this_1.histogramSeriesCount++;\n            }\n            else if (this_1.series[seriesCount].category === 'Pareto') {\n                requiredValues.push([this_1.series[seriesCount]['xName'], 'y']);\n            }\n            else if (seriesType.indexOf('Range') !== -1 || seriesType === 'Hilo') {\n                requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['high'], this_1.series[seriesCount]['low']]);\n            }\n            else if (seriesType === 'HiloOpenClose' || seriesType === 'Candle') {\n                requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['high'], this_1.series[seriesCount]['low'], this_1.series[seriesCount]['open'], this_1.series[seriesCount]['close']]);\n                if (seriesType === 'Candle' && this_1.series[seriesCount]['volume'] !== '') {\n                    requiredValues[seriesCount].push(this_1.series[seriesCount]['volume']);\n                }\n            }\n            else if (seriesType === 'BoxAndWhisker') {\n                requiredValues.push([this_1.series[seriesCount]['xName'], 'maximum', 'upperQuartile', 'median', 'lowerQuartile', 'minimum', 'outliers']);\n            }\n            else if (seriesType === 'Bubble') {\n                requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['yName']]);\n                if (this_1.series[seriesCount]['size'] !== '') {\n                    requiredValues[seriesCount].push(this_1.series[seriesCount]['size']);\n                }\n            }\n            else if (seriesType === 'Pie') {\n                requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['yName']]);\n                if (this_1.series[seriesCount]['radius'].match(/[a-zA-Z]/)) {\n                    requiredValues[seriesCount].push(this_1.series[seriesCount]['radius']);\n                }\n            }\n            else {\n                requiredValues.push([this_1.series[seriesCount]['xName'], this_1.series[seriesCount]['yName']]);\n            }\n            if (this_1.series[seriesCount].errorBar &&\n                this_1.series[seriesCount].errorBar.visible) {\n                var errorBar_1 = this_1.series[seriesCount].errorBar;\n                var errorTypes = ['verticalError', 'horizontalError', 'verticalNegativeError', 'horizontalNegativeError', 'verticalPositiveError', 'horizontalPositiveError'];\n                errorTypes.forEach(function (errorType) {\n                    if (typeof errorBar_1[errorType] === 'string') {\n                        requiredValues[seriesCount].push(errorBar_1[errorType]);\n                    }\n                });\n            }\n            this_1.requiredValuesLength += requiredValues[seriesCount].length;\n        };\n        var this_1 = this;\n        for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n            _loop_1(seriesCount);\n        }\n        return requiredValues;\n    };\n    /**\n     * Gets the title for the Excel sheet.\n     *\n     * @param {string[][]} requiredValues - The required values for the Excel sheet.\n     * @param {ExcelCellStyle} headerStyle - The style for the header.\n     * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - The controls to export.\n     * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n     * @param {boolean} isAccumulation - Specifies whether the data is for an AccumulationChart.\n     * @param {ExportType} type - The type of export.\n     * @param {number} xValueLength - The length of X values.\n     * @returns {void}\n     * @private\n     */\n    Export.prototype.getTitle = function (requiredValues, headerStyle, controls, isRangeNavigator, isAccumulation, type, xValueLength) {\n        var cells = [];\n        var additionalCells = [];\n        var index = 1;\n        var isTitle = false;\n        if (!isRangeNavigator && type === 'XLSX' && controls[0].title) {\n            this.rows.push({});\n            this.actualRowCount++;\n            isTitle = true;\n        }\n        for (var axisCount = 0; axisCount < this.axisCollection.length; axisCount++) {\n            if (isAccumulation && xValueLength === 0) {\n                break;\n            }\n            var isYName = false;\n            var valueType = '';\n            var currentIndex = index;\n            var isXValue = false;\n            for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n                var axisName = this.axisCollection[axisCount] !== null ? (this.axisCollection[axisCount].name === 'primaryXAxis' || (this.axisCollection[axisCount].name === 'primaryYAxis' && this.series[seriesCount].type.indexOf('Bar') > -1)) ? null : this.axisCollection[axisCount].name : '';\n                if (!isRangeNavigator && ((!isAccumulation && (axisName !==\n                    this.series[seriesCount].xAxisName)) ||\n                    !this.series[seriesCount].visible ||\n                    this.series[seriesCount].category === 'TrendLine' || this.series[seriesCount].type === 'Histogram')) {\n                    continue;\n                }\n                if (!isXValue) {\n                    cells.push({});\n                    index++;\n                }\n                isXValue = true;\n                var seriesName = this.series[seriesCount].name;\n                var requiredValuesLength = this.series[seriesCount].type === 'BoxAndWhisker' ? requiredValues[seriesCount].length - 1 : requiredValues[seriesCount].length;\n                if (requiredValues[seriesCount][1] === this.series[seriesCount].yName) {\n                    for (var requiredValuesCount = 1; requiredValuesCount < requiredValuesLength; requiredValuesCount++) {\n                        cells.push({ index: index, value: (requiredValuesCount === 1 ? seriesName ? seriesName : 'Series-' + (seriesCount + 1) : requiredValues[seriesCount][requiredValuesCount]), colSpan: 1, rowSpan: 1, style: headerStyle });\n                        index++;\n                    }\n                }\n                else {\n                    cells.push({ index: index, value: seriesName ? seriesName : 'Series-' + (seriesCount + 1), colSpan: requiredValuesLength - 1, rowSpan: 1, style: headerStyle });\n                    var localIndex = index;\n                    for (var requiredValuesCount = 1; requiredValuesCount < requiredValuesLength; requiredValuesCount++) {\n                        additionalCells.push({\n                            index: localIndex, value: requiredValues[seriesCount][requiredValuesCount],\n                            colSpan: 1, rowSpan: 1, style: headerStyle\n                        });\n                        localIndex++;\n                    }\n                    if (this.series[seriesCount].type === 'BoxAndWhisker') {\n                        cells.push({ index: localIndex, value: requiredValues[seriesCount][requiredValuesLength],\n                            colSpan: 1, rowSpan: 2, style: headerStyle\n                        });\n                        localIndex++;\n                    }\n                    index = localIndex;\n                    isYName = true;\n                }\n                valueType = isAccumulation ? requiredValues[0][0] : isRangeNavigator ? controls[0].valueType :\n                    this.axisCollection[axisCount].valueType;\n                valueType = (isAccumulation || valueType.indexOf('DateTime') > -1) ? valueType : 'Category';\n            }\n            if (isXValue) {\n                cells[(currentIndex - 1)] = { index: currentIndex, value: valueType, colSpan: 1,\n                    rowSpan: isYName ? 2 : 1, style: headerStyle };\n            }\n        }\n        if (cells.length) {\n            this.rows.push({ index: this.actualRowCount, cells: cells });\n            this.actualRowCount++;\n        }\n        if (additionalCells.length) {\n            this.rows.push({ index: this.actualRowCount, cells: additionalCells });\n            this.actualRowCount++;\n        }\n        if (isTitle) {\n            cells = [];\n            cells.push({ index: 1, value: controls[0].title,\n                colSpan: (index === 1 ? index : index - 1), rowSpan: 1, style: headerStyle });\n            this.rows[0] = ({ index: 1, cells: cells });\n        }\n        this.requiredValuesLength = index - 1;\n    };\n    /**\n     * Gets the X values for the Excel sheet.\n     *\n     * @param {string[][]} requiredValues - The required values for the Excel sheet.\n     * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - The controls to export.\n     * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n     * @param {boolean} isAccumulation - Specifies whether the data is for an AccumulationChart.\n     * @returns {number[][]} - The X values.\n     * @private\n     */\n    Export.prototype.getXValue = function (requiredValues, controls, isRangeNavigator, isAccumulation) {\n        var xValues = [];\n        for (var axisCount = 0; axisCount < this.axisCollection.length; axisCount++) {\n            var xValue = [];\n            var valueType = isAccumulation ? '' : isRangeNavigator ? controls[0].valueType : this.axisCollection[axisCount].valueType;\n            for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n                var axisName = this.axisCollection[axisCount] !== null ? (this.axisCollection[axisCount].name === 'primaryXAxis' || (this.axisCollection[axisCount].name === 'primaryYAxis' && this.series[seriesCount].type.indexOf('Bar') > -1)) ? null : this.axisCollection[axisCount].name : '';\n                if ((!isRangeNavigator && ((!isAccumulation && (axisName !==\n                    this.series[seriesCount].xAxisName)) ||\n                    !this.series[seriesCount].visible) ||\n                    this.series[seriesCount].category === 'TrendLine' || this.series[seriesCount].type === 'Histogram')) {\n                    continue;\n                }\n                for (var dataCount = 0; dataCount < this.series[seriesCount].dataSource.length; dataCount++) {\n                    if (isAccumulation && !this.series[seriesCount].points[dataCount].visible) {\n                        continue;\n                    }\n                    xValue.push((valueType.indexOf('DateTime') > -1) ? new Date(this.series[seriesCount].\n                        dataSource[dataCount][requiredValues[seriesCount][0]]).getTime() :\n                        this.series[seriesCount].dataSource[dataCount][requiredValues[seriesCount][0]]);\n                }\n            }\n            xValues.push(xValue);\n        }\n        var _loop_2 = function (xValuesLength) {\n            xValues[xValuesLength] = xValues[xValuesLength].filter(function (item, index) {\n                return xValues[xValuesLength].indexOf(item) === index;\n            });\n        };\n        for (var xValuesLength = 0; xValuesLength < xValues.length; xValuesLength++) {\n            _loop_2(xValuesLength);\n        }\n        return (xValues);\n    };\n    /**\n     * Creates an Excel sheet.\n     *\n     * @param {boolean} isRangeNavigator - Specifies whether the data is for a RangeNavigator control.\n     * @param {boolean} isAccumulation - Specifies whether the data is for an AccumulationChart.\n     * @param {number[][]} xValues - The X values for the Excel sheet.\n     * @param {ExportType} type - The type of export.\n     * @param {string[][]} requiredValues - The required values for the Excel sheet.\n     * @param {ExcelCellStyle} headerStyle - The style for the header in Excel.\n     * @param {(Chart | AccumulationChart | RangeNavigator | StockChart)[]} controls - The controls to export.\n     * @private\n     */\n    Export.prototype.createExcelSheet = function (isRangeNavigator, isAccumulation, xValues, type, requiredValues, headerStyle, controls) {\n        var startIndex = 0;\n        var index = 0;\n        for (var axisCount = 0; axisCount < this.axisCollection.length; axisCount++) {\n            var valueType = isAccumulation ? '' : isRangeNavigator ? controls[0].valueType : this.axisCollection[axisCount].valueType;\n            for (var xValueLength = 0; xValueLength < xValues[axisCount].length; xValueLength++) {\n                index = startIndex ? startIndex : 1;\n                var cells = [];\n                var isXValue = true;\n                for (var seriesCount = 0; seriesCount < this.series.length; seriesCount++) {\n                    var axisName = this.axisCollection[axisCount] !== null ? (this.axisCollection[axisCount].name === 'primaryXAxis' || (this.axisCollection[axisCount].name === 'primaryYAxis' && this.series[seriesCount].type.indexOf('Bar') > -1)) ? null : this.axisCollection[axisCount].name : '';\n                    if ((!isRangeNavigator && ((!isAccumulation &&\n                        this.series[seriesCount].xAxisName !== axisName) ||\n                        !this.series[seriesCount].visible) ||\n                        this.series[seriesCount].category === 'TrendLine' || this.series[seriesCount].type === 'Histogram')) {\n                        continue;\n                    }\n                    var isExist = false;\n                    var dataSource = this.series[seriesCount].dataSource;\n                    for (var dataCount = 0; dataCount < dataSource.length; dataCount++) {\n                        var xValue = (valueType.indexOf('DateTime') > -1) ? this.series[seriesCount].category === 'Pareto' ? new Date(this.series[seriesCount].points[dataCount][requiredValues[seriesCount][0]]).getTime() :\n                            new Date(dataSource[dataCount][requiredValues[seriesCount][0]]).getTime() :\n                            this.series[seriesCount].category === 'Pareto' ? this.series[seriesCount].points[dataCount][requiredValues[seriesCount][0]] : dataSource[dataCount][requiredValues[seriesCount][0]];\n                        if (xValues[axisCount][xValueLength] === xValue) {\n                            var usedValueCount = isXValue ? 0 : 1;\n                            var usedValueLength = this.series[seriesCount].type === 'BoxAndWhisker' ? requiredValues[seriesCount].length - 1 : requiredValues[seriesCount].length;\n                            for (; usedValueCount < usedValueLength; usedValueCount++) {\n                                var cellValue = this.series[seriesCount].enableComplexProperty ?\n                                    getValue(requiredValues[seriesCount][usedValueCount], dataSource[dataCount]) :\n                                    dataSource[dataCount][requiredValues[seriesCount][usedValueCount]];\n                                var value = (usedValueCount !== 0 && (this.series[seriesCount].type === 'BoxAndWhisker' || this.series[seriesCount].category === 'Pareto')) ? this.series[seriesCount].points[dataCount][requiredValues[seriesCount][usedValueCount]] : cellValue;\n                                if (value === null && type === 'CSV') {\n                                    value = '';\n                                }\n                                cells.push({\n                                    index: (usedValueCount === 0 ? startIndex === 0 ? 1 : startIndex : index), value: value,\n                                    colSpan: 1, rowSpan: 1, style: usedValueCount === 0 ? headerStyle : {}\n                                });\n                                index++;\n                            }\n                            if (this.series[seriesCount].type === 'BoxAndWhisker') {\n                                cells.push({ index: index, value: this.series[seriesCount].points[dataCount]['outliers'][0], colSpan: 1, rowSpan: 1, style: {} });\n                                index++;\n                            }\n                            isXValue = false;\n                            isExist = true;\n                            break;\n                        }\n                    }\n                    if (!isExist) {\n                        index += (requiredValues[seriesCount].length - 1);\n                    }\n                }\n                this.rows.push({ index: this.actualRowCount, cells: cells });\n                this.actualRowCount++;\n            }\n            startIndex = index;\n        }\n    };\n    /**\n     * Gets the data URL of the chart or accumulation chart.\n     *\n     * @param {Chart | AccumulationChart} chart - The chart or accumulation chart.\n     * @returns {{ element: HTMLCanvasElement, dataUrl?: string, blobUrl?: string}} - The data URL information.\n     */\n    Export.prototype.getDataUrl = function (chart) {\n        var exportUtil = new ExportUtils(chart);\n        return exportUtil.getDataUrl(chart);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} - Returns the module name.\n     */\n    Export.prototype.getModuleName = function () {\n        // Returns the module name\n        return 'Export';\n    };\n    /**\n     * To destroy the chart.\n     *\n     * @returns {void}\n     * @private\n     */\n    Export.prototype.destroy = function () {\n        // Destroy method performed here\n    };\n    return Export;\n}());\nexport { Export };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}