{"ast":null,"code":"import * as React from \"react\";\nimport { isDefined, isNotDefined, noop } from \"@react-financial-charts/core\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { HoverTextNearMouse, MouseLocationIndicator, InteractiveStraightLine } from \"./components\";\nimport { EachTrendLine } from \"./wrapper\";\nexport class TrendLine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleEnd = (e, xyValue, moreProps) => {\n      const {\n        current\n      } = this.state;\n      const {\n        trends,\n        appearance,\n        type\n      } = this.props;\n      if (this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n        const newTrends = [...trends.map(d => Object.assign(Object.assign({}, d), {\n          selected: false\n        })), {\n          start: current.start,\n          end: xyValue,\n          selected: true,\n          appearance,\n          type\n        }];\n        this.setState({\n          current: null,\n          trends: newTrends\n        }, () => {\n          const {\n            onComplete\n          } = this.props;\n          if (onComplete !== undefined) {\n            onComplete(e, newTrends, moreProps);\n          }\n        });\n      }\n    };\n    this.handleStart = (e, xyValue, moreProps) => {\n      const {\n        current\n      } = this.state;\n      if (isNotDefined(current) || isNotDefined(current.start)) {\n        this.mouseMoved = false;\n        this.setState({\n          current: {\n            start: xyValue,\n            end: null\n          }\n        }, () => {\n          const {\n            onStart\n          } = this.props;\n          if (onStart !== undefined) {\n            onStart(e, moreProps);\n          }\n        });\n      }\n    };\n    this.handleDrawLine = (_, xyValue) => {\n      const {\n        current\n      } = this.state;\n      if (isDefined(current) && isDefined(current.start)) {\n        this.mouseMoved = true;\n        this.setState({\n          current: {\n            start: current.start,\n            end: xyValue\n          }\n        });\n      }\n    };\n    this.handleDragLineComplete = (e, moreProps) => {\n      const {\n        override\n      } = this.state;\n      if (isDefined(override)) {\n        const {\n          trends\n        } = this.props;\n        const newTrends = trends.map((each, idx) => idx === override.index ? Object.assign(Object.assign({}, each), {\n          start: [override.x1Value, override.y1Value],\n          end: [override.x2Value, override.y2Value],\n          selected: true\n        }) : Object.assign(Object.assign({}, each), {\n          selected: false\n        }));\n        this.setState({\n          override: null\n        }, () => {\n          const {\n            onComplete\n          } = this.props;\n          if (onComplete !== undefined) {\n            onComplete(e, newTrends, moreProps);\n          }\n        });\n      }\n    };\n    this.handleDragLine = (_, index, newXYValue) => {\n      this.setState({\n        override: Object.assign({\n          index\n        }, newXYValue)\n      });\n    };\n    this.terminate = terminate.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.getSelectionState = isHoverForInteractiveType(\"trends\").bind(this);\n    this.state = {};\n  }\n  render() {\n    const {\n      appearance,\n      currentPositionstrokeOpacity,\n      currentPositionRadius = TrendLine.defaultProps.currentPositionRadius,\n      currentPositionStroke,\n      currentPositionStrokeWidth,\n      enabled,\n      hoverText,\n      shouldDisableSnap,\n      snap,\n      snapTo,\n      trends,\n      type\n    } = this.props;\n    const {\n      current,\n      override\n    } = this.state;\n    const tempLine = isDefined(current) && isDefined(current.end) ? React.createElement(InteractiveStraightLine, {\n      type: type,\n      x1Value: current.start[0],\n      y1Value: current.start[1],\n      x2Value: current.end[0],\n      y2Value: current.end[1],\n      strokeStyle: appearance.strokeStyle,\n      strokeWidth: appearance.strokeWidth\n    }) : null;\n    return React.createElement(\"g\", null, trends.map((each, idx) => {\n      const eachAppearance = isDefined(each.appearance) ? Object.assign(Object.assign({}, appearance), each.appearance) : appearance;\n      const hoverTextWithDefault = Object.assign(Object.assign({}, TrendLine.defaultProps.hoverText), hoverText);\n      return React.createElement(EachTrendLine, {\n        key: idx,\n        ref: this.saveNodeType(idx),\n        index: idx,\n        type: each.type,\n        selected: each.selected,\n        x1Value: getValueFromOverride(override, idx, \"x1Value\", each.start[0]),\n        y1Value: getValueFromOverride(override, idx, \"y1Value\", each.start[1]),\n        x2Value: getValueFromOverride(override, idx, \"x2Value\", each.end[0]),\n        y2Value: getValueFromOverride(override, idx, \"y2Value\", each.end[1]),\n        strokeStyle: eachAppearance.strokeStyle,\n        strokeWidth: eachAppearance.strokeWidth,\n        strokeOpacity: eachAppearance.strokeOpacity,\n        strokeDasharray: eachAppearance.strokeDasharray,\n        edgeStroke: eachAppearance.edgeStroke,\n        edgeFill: eachAppearance.edgeFill,\n        edgeStrokeWidth: eachAppearance.edgeStrokeWidth,\n        r: eachAppearance.r,\n        hoverText: hoverTextWithDefault,\n        onDrag: this.handleDragLine,\n        onDragComplete: this.handleDragLineComplete,\n        edgeInteractiveCursor: \"react-financial-charts-move-cursor\",\n        lineInteractiveCursor: \"react-financial-charts-move-cursor\"\n      });\n    }), tempLine, React.createElement(MouseLocationIndicator, {\n      enabled: enabled,\n      snap: snap,\n      shouldDisableSnap: shouldDisableSnap,\n      snapTo: snapTo,\n      r: currentPositionRadius,\n      stroke: currentPositionStroke,\n      opacity: currentPositionstrokeOpacity,\n      strokeWidth: currentPositionStrokeWidth,\n      onMouseDown: this.handleStart,\n      onClick: this.handleEnd,\n      onMouseMove: this.handleDrawLine\n    }));\n  }\n}\nTrendLine.defaultProps = {\n  type: \"XLINE\",\n  onStart: noop,\n  onSelect: noop,\n  currentPositionStroke: \"#000000\",\n  currentPositionstrokeOpacity: 1,\n  currentPositionStrokeWidth: 3,\n  currentPositionRadius: 0,\n  shouldDisableSnap: e => e.button === 2 || e.shiftKey,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: \"auto\",\n    bgWidth: \"auto\",\n    text: \"Click to select object\",\n    selectedText: \"\"\n  }),\n  trends: [],\n  appearance: {\n    strokeStyle: \"#000000\",\n    strokeWidth: 1,\n    strokeDasharray: \"Solid\",\n    edgeStrokeWidth: 1,\n    edgeFill: \"#FFFFFF\",\n    edgeStroke: \"#000000\",\n    r: 6\n  }\n};","map":{"version":3,"names":["React","isDefined","isNotDefined","noop","getValueFromOverride","isHoverForInteractiveType","saveNodeType","terminate","HoverTextNearMouse","MouseLocationIndicator","InteractiveStraightLine","EachTrendLine","TrendLine","Component","constructor","props","handleEnd","e","xyValue","moreProps","current","state","trends","appearance","type","mouseMoved","start","newTrends","map","d","Object","assign","selected","end","setState","onComplete","undefined","handleStart","onStart","handleDrawLine","_","handleDragLineComplete","override","each","idx","index","x1Value","y1Value","x2Value","y2Value","handleDragLine","newXYValue","bind","getSelectionState","render","currentPositionstrokeOpacity","currentPositionRadius","defaultProps","currentPositionStroke","currentPositionStrokeWidth","enabled","hoverText","shouldDisableSnap","snap","snapTo","tempLine","createElement","strokeStyle","strokeWidth","eachAppearance","hoverTextWithDefault","key","ref","strokeOpacity","strokeDasharray","edgeStroke","edgeFill","edgeStrokeWidth","r","onDrag","onDragComplete","edgeInteractiveCursor","lineInteractiveCursor","stroke","opacity","onMouseDown","onClick","onMouseMove","onSelect","button","shiftKey","enable","bgHeight","bgWidth","text","selectedText"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\TrendLine.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { isDefined, isNotDefined, noop, strokeDashTypes } from \"@react-financial-charts/core\";\nimport { getValueFromOverride, isHoverForInteractiveType, saveNodeType, terminate } from \"./utils\";\nimport { HoverTextNearMouse, MouseLocationIndicator, InteractiveStraightLine } from \"./components\";\nimport { EachTrendLine } from \"./wrapper\";\n\nexport interface TrendLineProps {\n    readonly snap: boolean;\n    readonly enabled: boolean;\n    readonly snapTo?: (datum: any) => number | number[];\n    readonly shouldDisableSnap?: (e: React.MouseEvent) => boolean;\n    readonly onStart: (e: React.MouseEvent, moreProps: any) => void;\n    readonly onComplete?: (e: React.MouseEvent, newTrends: any[], moreProps: any) => void;\n    readonly onSelect?: (e: React.MouseEvent, interactives: any[], moreProps: any) => void;\n    readonly currentPositionStroke?: string;\n    readonly currentPositionStrokeWidth?: number;\n    readonly currentPositionstrokeOpacity?: number;\n    readonly currentPositionRadius?: number;\n    readonly type:\n        | \"XLINE\" // extends from -Infinity to +Infinity\n        | \"RAY\" // extends to +/-Infinity in one direction\n        | \"LINE\"; // extends between the set bounds\n    readonly hoverText: object;\n    readonly trends: any[];\n    readonly appearance: {\n        readonly strokeStyle: string;\n        readonly strokeWidth: number;\n        readonly strokeDasharray: strokeDashTypes;\n        readonly edgeStrokeWidth: number;\n        readonly edgeFill: string;\n        readonly edgeStroke: string;\n    };\n}\n\ninterface TrendLineState {\n    current?: any;\n    override?: any;\n    trends?: any;\n}\n\nexport class TrendLine extends React.Component<TrendLineProps, TrendLineState> {\n    public static defaultProps = {\n        type: \"XLINE\",\n        onStart: noop,\n        onSelect: noop,\n        currentPositionStroke: \"#000000\",\n        currentPositionstrokeOpacity: 1,\n        currentPositionStrokeWidth: 3,\n        currentPositionRadius: 0,\n        shouldDisableSnap: (e: React.MouseEvent) => e.button === 2 || e.shiftKey,\n        hoverText: {\n            ...HoverTextNearMouse.defaultProps,\n            enable: true,\n            bgHeight: \"auto\",\n            bgWidth: \"auto\",\n            text: \"Click to select object\",\n            selectedText: \"\",\n        },\n        trends: [],\n        appearance: {\n            strokeStyle: \"#000000\",\n            strokeWidth: 1,\n            strokeDasharray: \"Solid\",\n            edgeStrokeWidth: 1,\n            edgeFill: \"#FFFFFF\",\n            edgeStroke: \"#000000\",\n            r: 6,\n        },\n    };\n\n    // @ts-ignore\n    private getSelectionState: any;\n    private mouseMoved: any;\n    private saveNodeType: any;\n    // @ts-ignore\n    private terminate: any;\n\n    public constructor(props: TrendLineProps) {\n        super(props);\n\n        this.terminate = terminate.bind(this);\n        this.saveNodeType = saveNodeType.bind(this);\n\n        this.getSelectionState = isHoverForInteractiveType(\"trends\").bind(this);\n\n        this.state = {};\n    }\n\n    public render() {\n        const {\n            appearance,\n            currentPositionstrokeOpacity,\n            currentPositionRadius = TrendLine.defaultProps.currentPositionRadius,\n            currentPositionStroke,\n            currentPositionStrokeWidth,\n            enabled,\n            hoverText,\n            shouldDisableSnap,\n            snap,\n            snapTo,\n            trends,\n            type,\n        } = this.props;\n\n        const { current, override } = this.state;\n\n        const tempLine =\n            isDefined(current) && isDefined(current.end) ? (\n                <InteractiveStraightLine\n                    type={type}\n                    x1Value={current.start[0]}\n                    y1Value={current.start[1]}\n                    x2Value={current.end[0]}\n                    y2Value={current.end[1]}\n                    strokeStyle={appearance.strokeStyle}\n                    strokeWidth={appearance.strokeWidth}\n                />\n            ) : null;\n\n        return (\n            <g>\n                {trends.map((each, idx) => {\n                    const eachAppearance = isDefined(each.appearance)\n                        ? { ...appearance, ...each.appearance }\n                        : appearance;\n\n                    const hoverTextWithDefault = {\n                        ...TrendLine.defaultProps.hoverText,\n                        ...hoverText,\n                    };\n\n                    return (\n                        <EachTrendLine\n                            key={idx}\n                            ref={this.saveNodeType(idx)}\n                            index={idx}\n                            type={each.type}\n                            selected={each.selected}\n                            x1Value={getValueFromOverride(override, idx, \"x1Value\", each.start[0])}\n                            y1Value={getValueFromOverride(override, idx, \"y1Value\", each.start[1])}\n                            x2Value={getValueFromOverride(override, idx, \"x2Value\", each.end[0])}\n                            y2Value={getValueFromOverride(override, idx, \"y2Value\", each.end[1])}\n                            strokeStyle={eachAppearance.strokeStyle}\n                            strokeWidth={eachAppearance.strokeWidth}\n                            strokeOpacity={eachAppearance.strokeOpacity}\n                            strokeDasharray={eachAppearance.strokeDasharray}\n                            edgeStroke={eachAppearance.edgeStroke}\n                            edgeFill={eachAppearance.edgeFill}\n                            edgeStrokeWidth={eachAppearance.edgeStrokeWidth}\n                            r={eachAppearance.r}\n                            hoverText={hoverTextWithDefault}\n                            onDrag={this.handleDragLine}\n                            onDragComplete={this.handleDragLineComplete}\n                            edgeInteractiveCursor=\"react-financial-charts-move-cursor\"\n                            lineInteractiveCursor=\"react-financial-charts-move-cursor\"\n                        />\n                    );\n                })}\n                {tempLine}\n                <MouseLocationIndicator\n                    enabled={enabled}\n                    snap={snap}\n                    shouldDisableSnap={shouldDisableSnap}\n                    snapTo={snapTo}\n                    r={currentPositionRadius}\n                    stroke={currentPositionStroke}\n                    opacity={currentPositionstrokeOpacity}\n                    strokeWidth={currentPositionStrokeWidth}\n                    onMouseDown={this.handleStart}\n                    onClick={this.handleEnd}\n                    onMouseMove={this.handleDrawLine}\n                />\n            </g>\n        );\n    }\n\n    private readonly handleEnd = (e: React.MouseEvent, xyValue: any, moreProps: any) => {\n        const { current } = this.state;\n        const { trends, appearance, type } = this.props;\n\n        if (this.mouseMoved && isDefined(current) && isDefined(current.start)) {\n            const newTrends = [\n                ...trends.map((d) => ({ ...d, selected: false })),\n                {\n                    start: current.start,\n                    end: xyValue,\n                    selected: true,\n                    appearance,\n                    type,\n                },\n            ];\n            this.setState(\n                {\n                    current: null,\n                    trends: newTrends,\n                },\n                () => {\n                    const { onComplete } = this.props;\n                    if (onComplete !== undefined) {\n                        onComplete(e, newTrends, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleStart = (e: React.MouseEvent, xyValue: any, moreProps: any) => {\n        const { current } = this.state;\n\n        if (isNotDefined(current) || isNotDefined(current.start)) {\n            this.mouseMoved = false;\n\n            this.setState(\n                {\n                    current: {\n                        start: xyValue,\n                        end: null,\n                    },\n                },\n                () => {\n                    const { onStart } = this.props;\n                    if (onStart !== undefined) {\n                        onStart(e, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleDrawLine = (_: React.MouseEvent, xyValue: any) => {\n        const { current } = this.state;\n        if (isDefined(current) && isDefined(current.start)) {\n            this.mouseMoved = true;\n            this.setState({\n                current: {\n                    start: current.start,\n                    end: xyValue,\n                },\n            });\n        }\n    };\n\n    private readonly handleDragLineComplete = (e: React.MouseEvent, moreProps: any) => {\n        const { override } = this.state;\n        if (isDefined(override)) {\n            const { trends } = this.props;\n            const newTrends = trends.map((each, idx) =>\n                idx === override.index\n                    ? {\n                          ...each,\n                          start: [override.x1Value, override.y1Value],\n                          end: [override.x2Value, override.y2Value],\n                          selected: true,\n                      }\n                    : {\n                          ...each,\n                          selected: false,\n                      },\n            );\n\n            this.setState(\n                {\n                    override: null,\n                },\n                () => {\n                    const { onComplete } = this.props;\n                    if (onComplete !== undefined) {\n                        onComplete(e, newTrends, moreProps);\n                    }\n                },\n            );\n        }\n    };\n\n    private readonly handleDragLine = (_: React.MouseEvent, index: number | undefined, newXYValue: any) => {\n        this.setState({\n            override: {\n                index,\n                ...newXYValue,\n            },\n        });\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}