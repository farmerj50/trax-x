{"ast":null,"code":"import { scaleOrdinal } from \"d3-scale\";\nconst defaultColors = [\"#F44336\", \"#2196F3\", \"#8BC34A\", \"#FF5722\", \"#3F51B5\", \"#03A9F4\", \"#9C27B0\", \"#4CAF50\"];\nlet i = 0;\nconst overlayColors = scaleOrdinal(defaultColors);\nexport default function () {\n  let id = i++;\n  let accessor;\n  let stroke;\n  let fill;\n  let echo;\n  let type;\n  const baseIndicator = () => () => {\n    /** Do Nothing */\n  };\n  baseIndicator.id = newId => {\n    if (newId === undefined) {\n      return id;\n    }\n    id = newId;\n    return baseIndicator;\n  };\n  baseIndicator.accessor = newAccessor => {\n    if (newAccessor === undefined) {\n      return accessor;\n    }\n    accessor = newAccessor;\n    return baseIndicator;\n  };\n  baseIndicator.stroke = newStroke => {\n    if (newStroke === undefined) {\n      return !stroke ? stroke = overlayColors(id) : stroke;\n    }\n    stroke = newStroke;\n    return baseIndicator;\n  };\n  baseIndicator.fill = newFill => {\n    if (newFill === undefined) {\n      return !fill ? fill = overlayColors(id) : fill;\n    }\n    fill = newFill;\n    return baseIndicator;\n  };\n  baseIndicator.echo = newEcho => {\n    if (newEcho === undefined) {\n      return echo;\n    }\n    echo = newEcho;\n    return baseIndicator;\n  };\n  baseIndicator.type = newType => {\n    if (newType === undefined) {\n      return type;\n    }\n    type = newType;\n    return baseIndicator;\n  };\n  return baseIndicator;\n}","map":{"version":3,"names":["scaleOrdinal","defaultColors","i","overlayColors","id","accessor","stroke","fill","echo","type","baseIndicator","newId","undefined","newAccessor","newStroke","newFill","newEcho","newType"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\indicator\\baseIndicator.ts"],"sourcesContent":["import { scaleOrdinal } from \"d3-scale\";\n\nconst defaultColors = [\"#F44336\", \"#2196F3\", \"#8BC34A\", \"#FF5722\", \"#3F51B5\", \"#03A9F4\", \"#9C27B0\", \"#4CAF50\"];\n\nlet i = 0;\nconst overlayColors = scaleOrdinal<number, string>(defaultColors);\n\nexport interface BaseIndicator {\n    (): () => void;\n    id(): number;\n    id(x: number): BaseIndicator;\n    accessor(): any;\n    accessor(x: any): BaseIndicator;\n    stroke(): string | any;\n    stroke(x: string | any): BaseIndicator;\n    fill(): string | any;\n    fill(x: string | any): BaseIndicator;\n    echo(): any;\n    echo(x: any): BaseIndicator;\n    type(): string;\n    type(x: string): BaseIndicator;\n}\n\nexport default function () {\n    let id = i++;\n    let accessor: any;\n    let stroke: string | any;\n    let fill: string | any;\n    let echo: any;\n    let type: string;\n\n    const baseIndicator = () => () => {\n        /** Do Nothing */\n    };\n\n    baseIndicator.id = (newId?: number) => {\n        if (newId === undefined) {\n            return id;\n        }\n\n        id = newId;\n\n        return baseIndicator;\n    };\n\n    baseIndicator.accessor = (newAccessor?: any) => {\n        if (newAccessor === undefined) {\n            return accessor;\n        }\n\n        accessor = newAccessor;\n\n        return baseIndicator;\n    };\n\n    baseIndicator.stroke = (newStroke?: string | any) => {\n        if (newStroke === undefined) {\n            return !stroke ? (stroke = overlayColors(id)) : stroke;\n        }\n\n        stroke = newStroke;\n\n        return baseIndicator;\n    };\n\n    baseIndicator.fill = (newFill?: string | any) => {\n        if (newFill === undefined) {\n            return !fill ? (fill = overlayColors(id)) : fill;\n        }\n\n        fill = newFill;\n\n        return baseIndicator;\n    };\n\n    baseIndicator.echo = (newEcho?: any) => {\n        if (newEcho === undefined) {\n            return echo;\n        }\n\n        echo = newEcho;\n\n        return baseIndicator;\n    };\n\n    baseIndicator.type = (newType?: string) => {\n        if (newType === undefined) {\n            return type;\n        }\n\n        type = newType;\n\n        return baseIndicator;\n    };\n\n    return baseIndicator as BaseIndicator;\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,UAAU;AAEvC,MAAMC,aAAa,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;AAE9G,IAAIC,CAAC,GAAG,CAAC;AACT,MAAMC,aAAa,GAAGH,YAAY,CAAiBC,aAAa,CAAC;AAkBjE,eAAc;EACV,IAAIG,EAAE,GAAGF,CAAC,EAAE;EACZ,IAAIG,QAAa;EACjB,IAAIC,MAAoB;EACxB,IAAIC,IAAkB;EACtB,IAAIC,IAAS;EACb,IAAIC,IAAY;EAEhB,MAAMC,aAAa,GAAGA,CAAA,KAAM,MAAK;IAC7B;EAAA,CACH;EAEDA,aAAa,CAACN,EAAE,GAAIO,KAAc,IAAI;IAClC,IAAIA,KAAK,KAAKC,SAAS,EAAE;MACrB,OAAOR,EAAE;;IAGbA,EAAE,GAAGO,KAAK;IAEV,OAAOD,aAAa;EACxB,CAAC;EAEDA,aAAa,CAACL,QAAQ,GAAIQ,WAAiB,IAAI;IAC3C,IAAIA,WAAW,KAAKD,SAAS,EAAE;MAC3B,OAAOP,QAAQ;;IAGnBA,QAAQ,GAAGQ,WAAW;IAEtB,OAAOH,aAAa;EACxB,CAAC;EAEDA,aAAa,CAACJ,MAAM,GAAIQ,SAAwB,IAAI;IAChD,IAAIA,SAAS,KAAKF,SAAS,EAAE;MACzB,OAAO,CAACN,MAAM,GAAIA,MAAM,GAAGH,aAAa,CAACC,EAAE,CAAC,GAAIE,MAAM;;IAG1DA,MAAM,GAAGQ,SAAS;IAElB,OAAOJ,aAAa;EACxB,CAAC;EAEDA,aAAa,CAACH,IAAI,GAAIQ,OAAsB,IAAI;IAC5C,IAAIA,OAAO,KAAKH,SAAS,EAAE;MACvB,OAAO,CAACL,IAAI,GAAIA,IAAI,GAAGJ,aAAa,CAACC,EAAE,CAAC,GAAIG,IAAI;;IAGpDA,IAAI,GAAGQ,OAAO;IAEd,OAAOL,aAAa;EACxB,CAAC;EAEDA,aAAa,CAACF,IAAI,GAAIQ,OAAa,IAAI;IACnC,IAAIA,OAAO,KAAKJ,SAAS,EAAE;MACvB,OAAOJ,IAAI;;IAGfA,IAAI,GAAGQ,OAAO;IAEd,OAAON,aAAa;EACxB,CAAC;EAEDA,aAAa,CAACD,IAAI,GAAIQ,OAAgB,IAAI;IACtC,IAAIA,OAAO,KAAKL,SAAS,EAAE;MACvB,OAAOH,IAAI;;IAGfA,IAAI,GAAGQ,OAAO;IAEd,OAAOP,aAAa;EACxB,CAAC;EAED,OAAOA,aAA8B;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}