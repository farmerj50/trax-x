{"ast":null,"code":"import { atr } from \"../calculator\";\nimport { merge, rebind } from \"../utils\";\nimport baseIndicator from \"./baseIndicator\";\nconst ALGORITHM_TYPE = \"ATR\";\nexport default function () {\n  const base = baseIndicator().type(ALGORITHM_TYPE);\n  const underlyingAlgorithm = atr();\n  const mergedAlgorithm = merge().algorithm(underlyingAlgorithm).merge((datum, i) => {\n    datum.atr = i;\n  });\n  const indicator = (data, options = {\n    merge: true\n  }) => {\n    if (options.merge) {\n      if (!base.accessor()) {\n        throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n      }\n      return mergedAlgorithm(data);\n    }\n    return underlyingAlgorithm(data);\n  };\n  rebind(indicator, base, \"id\", \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n  rebind(indicator, underlyingAlgorithm, \"options\");\n  rebind(indicator, mergedAlgorithm, \"merge\", \"skipUndefined\");\n  return indicator;\n}","map":{"version":3,"names":["atr","merge","rebind","baseIndicator","ALGORITHM_TYPE","base","type","underlyingAlgorithm","mergedAlgorithm","algorithm","datum","i","indicator","data","options","accessor","Error"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\indicators\\src\\indicator\\atr.ts"],"sourcesContent":["import { atr } from \"../calculator\";\nimport { merge, rebind } from \"../utils\";\nimport { ATROptions } from \"../calculator/atr\";\nimport baseIndicator from \"./baseIndicator\";\n\nconst ALGORITHM_TYPE = \"ATR\";\n\ninterface ATRIndicator {\n    (data: any[], options?: { merge: boolean }): any;\n    id(): number;\n    id(x: number): ATRIndicator;\n    accessor(): any;\n    accessor(x: any): ATRIndicator;\n    stroke(): string | any;\n    stroke(x: string | any): ATRIndicator;\n    fill(): string | any;\n    fill(x: string | any): ATRIndicator;\n    echo(): any;\n    echo(x: any): ATRIndicator;\n    type(): string;\n    type(x: string): ATRIndicator;\n    merge(): any;\n    merge(newMerge: any): ATRIndicator;\n    options(): ATROptions;\n    options(newOptions: ATROptions): ATRIndicator;\n    skipUndefined(): boolean;\n    skipUndefined(newSkipUndefined: boolean): ATRIndicator;\n}\n\nexport default function () {\n    const base = baseIndicator().type(ALGORITHM_TYPE);\n\n    const underlyingAlgorithm = atr();\n\n    const mergedAlgorithm = merge()\n        .algorithm(underlyingAlgorithm)\n        .merge((datum: any, i: number) => {\n            datum.atr = i;\n        });\n\n    const indicator = (data: any[], options = { merge: true }) => {\n        if (options.merge) {\n            if (!base.accessor()) {\n                throw new Error(`Set an accessor to ${ALGORITHM_TYPE} before calculating`);\n            }\n\n            return mergedAlgorithm(data);\n        }\n\n        return underlyingAlgorithm(data);\n    };\n\n    rebind(indicator, base, \"id\", \"accessor\", \"stroke\", \"fill\", \"echo\", \"type\");\n    rebind(indicator, underlyingAlgorithm, \"options\");\n    rebind(indicator, mergedAlgorithm, \"merge\", \"skipUndefined\");\n\n    return indicator as ATRIndicator;\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,eAAe;AACnC,SAASC,KAAK,EAAEC,MAAM,QAAQ,UAAU;AAExC,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,cAAc,GAAG,KAAK;AAwB5B,eAAc;EACV,MAAMC,IAAI,GAAGF,aAAa,EAAE,CAACG,IAAI,CAACF,cAAc,CAAC;EAEjD,MAAMG,mBAAmB,GAAGP,GAAG,EAAE;EAEjC,MAAMQ,eAAe,GAAGP,KAAK,EAAE,CAC1BQ,SAAS,CAACF,mBAAmB,CAAC,CAC9BN,KAAK,CAAC,CAACS,KAAU,EAAEC,CAAS,KAAI;IAC7BD,KAAK,CAACV,GAAG,GAAGW,CAAC;EACjB,CAAC,CAAC;EAEN,MAAMC,SAAS,GAAGA,CAACC,IAAW,EAAEC,OAAO,GAAG;IAAEb,KAAK,EAAE;EAAI,CAAE,KAAI;IACzD,IAAIa,OAAO,CAACb,KAAK,EAAE;MACf,IAAI,CAACI,IAAI,CAACU,QAAQ,EAAE,EAAE;QAClB,MAAM,IAAIC,KAAK,CAAC,sBAAsBZ,cAAc,qBAAqB,CAAC;;MAG9E,OAAOI,eAAe,CAACK,IAAI,CAAC;;IAGhC,OAAON,mBAAmB,CAACM,IAAI,CAAC;EACpC,CAAC;EAEDX,MAAM,CAACU,SAAS,EAAEP,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EAC3EH,MAAM,CAACU,SAAS,EAAEL,mBAAmB,EAAE,SAAS,CAAC;EACjDL,MAAM,CAACU,SAAS,EAAEJ,eAAe,EAAE,OAAO,EAAE,eAAe,CAAC;EAE5D,OAAOI,SAAyB;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}