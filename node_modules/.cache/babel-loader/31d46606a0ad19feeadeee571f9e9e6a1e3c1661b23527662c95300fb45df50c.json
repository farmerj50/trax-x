{"ast":null,"code":"import { first, last } from \".\";\n/**\n * Bar width is based on the amount of items in the plot data and the distance between the first and last of those\n * items.\n * @param props the props passed to the series.\n * @param moreProps an object holding the xScale, xAccessor and plotData.\n * @return {number} the bar width.\n */\nexport const plotDataLengthBarWidth = (props, moreProps) => {\n  const {\n    widthRatio\n  } = props;\n  const {\n    xAccessor,\n    xScale,\n    plotData\n  } = moreProps;\n  const [l, r] = xScale.range();\n  if (xScale.invert != null) {\n    const [dl, dr] = xScale.domain();\n    if (typeof dl === \"number\" && typeof dr === \"number\") {\n      const totalWidth = Math.abs(r - l);\n      const width = totalWidth / Math.abs(dl - dr);\n      return width * widthRatio;\n    }\n    const width = xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)));\n    return width / plotData.length * widthRatio * 0.7;\n  }\n  const totalWidth = Math.abs(r - l);\n  const width = totalWidth / xScale.domain().length;\n  return width * widthRatio;\n};","map":{"version":3,"names":["first","last","plotDataLengthBarWidth","props","moreProps","widthRatio","xAccessor","xScale","plotData","l","r","range","invert","dl","dr","domain","totalWidth","Math","abs","width","length"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\core\\src\\utils\\barWidth.ts"],"sourcesContent":["import { ScaleContinuousNumeric, ScaleTime } from \"d3-scale\";\nimport { first, last } from \".\";\n\n/**\n * Bar width is based on the amount of items in the plot data and the distance between the first and last of those\n * items.\n * @param props the props passed to the series.\n * @param moreProps an object holding the xScale, xAccessor and plotData.\n * @return {number} the bar width.\n */\nexport const plotDataLengthBarWidth = <T>(\n    props: { widthRatio: number },\n    moreProps: {\n        xAccessor: (datum: T) => number | Date;\n        xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>;\n        plotData: T[];\n    },\n): number => {\n    const { widthRatio } = props;\n    const { xAccessor, xScale, plotData } = moreProps;\n\n    const [l, r] = xScale.range();\n\n    if (xScale.invert != null) {\n        const [dl, dr] = xScale.domain();\n        if (typeof dl === \"number\" && typeof dr === \"number\") {\n            const totalWidth = Math.abs(r - l);\n\n            const width = totalWidth / Math.abs(dl - dr);\n\n            return width * widthRatio;\n        }\n\n        const width = xScale(xAccessor(last(plotData))) - xScale(xAccessor(first(plotData)));\n\n        return (width / plotData.length) * widthRatio * 0.7;\n    }\n\n    const totalWidth = Math.abs(r - l);\n\n    const width = totalWidth / xScale.domain().length;\n\n    return width * widthRatio;\n};\n"],"mappings":"AACA,SAASA,KAAK,EAAEC,IAAI,QAAQ,GAAG;AAE/B;;;;;;;AAOA,OAAO,MAAMC,sBAAsB,GAAGA,CAClCC,KAA6B,EAC7BC,SAIC,KACO;EACR,MAAM;IAAEC;EAAU,CAAE,GAAGF,KAAK;EAC5B,MAAM;IAAEG,SAAS;IAAEC,MAAM;IAAEC;EAAQ,CAAE,GAAGJ,SAAS;EAEjD,MAAM,CAACK,CAAC,EAAEC,CAAC,CAAC,GAAGH,MAAM,CAACI,KAAK,EAAE;EAE7B,IAAIJ,MAAM,CAACK,MAAM,IAAI,IAAI,EAAE;IACvB,MAAM,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAGP,MAAM,CAACQ,MAAM,EAAE;IAChC,IAAI,OAAOF,EAAE,KAAK,QAAQ,IAAI,OAAOC,EAAE,KAAK,QAAQ,EAAE;MAClD,MAAME,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACR,CAAC,GAAGD,CAAC,CAAC;MAElC,MAAMU,KAAK,GAAGH,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACL,EAAE,GAAGC,EAAE,CAAC;MAE5C,OAAOK,KAAK,GAAGd,UAAU;;IAG7B,MAAMc,KAAK,GAAGZ,MAAM,CAACD,SAAS,CAACL,IAAI,CAACO,QAAQ,CAAC,CAAC,CAAC,GAAGD,MAAM,CAACD,SAAS,CAACN,KAAK,CAACQ,QAAQ,CAAC,CAAC,CAAC;IAEpF,OAAQW,KAAK,GAAGX,QAAQ,CAACY,MAAM,GAAIf,UAAU,GAAG,GAAG;;EAGvD,MAAMW,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACR,CAAC,GAAGD,CAAC,CAAC;EAElC,MAAMU,KAAK,GAAGH,UAAU,GAAGT,MAAM,CAACQ,MAAM,EAAE,CAACK,MAAM;EAEjD,OAAOD,KAAK,GAAGd,UAAU;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}