{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getCurrentItem } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport * as React from \"react\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { HoverTextNearMouse, ClickableCircle } from \"../components\";\nimport { edge1Provider, edge2Provider, LinearRegressionChannelWithArea } from \"../components/LinearRegressionChannelWithArea\";\nexport class EachLinearRegressionChannel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleHover = (_, moreProps) => {\n      if (this.state.hover !== moreProps.hovering) {\n        this.setState({\n          hover: moreProps.hovering\n        });\n      }\n    };\n    this.handleEdge2Drag = (e, moreProps) => {\n      const {\n        index,\n        onDrag,\n        snapTo,\n        x1Value\n      } = this.props;\n      if (onDrag === undefined) {\n        return;\n      }\n      const [x2Value] = getNewXY(moreProps, snapTo);\n      onDrag(e, index, {\n        x1Value,\n        x2Value\n      });\n    };\n    this.handleEdge1Drag = (e, moreProps) => {\n      const {\n        index,\n        onDrag,\n        snapTo,\n        x2Value\n      } = this.props;\n      if (onDrag === undefined) {\n        return;\n      }\n      const [x1Value] = getNewXY(moreProps, snapTo);\n      onDrag(e, index, {\n        x1Value,\n        x2Value\n      });\n    };\n    this.isHover = isHover.bind(this);\n    this.saveNodeType = saveNodeType.bind(this);\n    this.state = {\n      hover: false\n    };\n  }\n  render() {\n    const {\n      x1Value,\n      x2Value,\n      appearance,\n      edgeInteractiveCursor,\n      hoverText,\n      interactive,\n      selected,\n      onDragComplete\n    } = this.props;\n    const {\n      stroke,\n      strokeWidth,\n      fill,\n      r,\n      edgeStrokeWidth,\n      edgeFill,\n      edgeStroke\n    } = appearance;\n    const {\n      hover\n    } = this.state;\n    const hoverHandler = interactive ? {\n      onHover: this.handleHover,\n      onUnHover: this.handleHover\n    } : {};\n    const {\n        enable: hoverTextEnabled,\n        selectedText: hoverTextSelected,\n        text: hoverTextUnselected\n      } = hoverText,\n      restHoverTextProps = __rest(hoverText, [\"enable\", \"selectedText\", \"text\"]);\n    return React.createElement(\"g\", null, React.createElement(LinearRegressionChannelWithArea, Object.assign({\n      ref: this.saveNodeType(\"area\"),\n      selected: selected || hover\n    }, hoverHandler, {\n      x1Value: x1Value,\n      x2Value: x2Value,\n      fillStyle: fill,\n      strokeStyle: stroke,\n      strokeWidth: hover || selected ? strokeWidth + 1 : strokeWidth\n    })), React.createElement(ClickableCircle, {\n      ref: this.saveNodeType(\"edge1\"),\n      show: selected || hover,\n      xyProvider: edge1Provider(this.props),\n      r: r,\n      fillStyle: edgeFill,\n      strokeStyle: edgeStroke,\n      strokeWidth: edgeStrokeWidth,\n      interactiveCursorClass: edgeInteractiveCursor,\n      onDrag: this.handleEdge1Drag,\n      onDragComplete: onDragComplete\n    }), React.createElement(ClickableCircle, {\n      ref: this.saveNodeType(\"edge2\"),\n      show: selected || hover,\n      xyProvider: edge2Provider(this.props),\n      r: r,\n      fillStyle: edgeFill,\n      strokeStyle: edgeStroke,\n      strokeWidth: edgeStrokeWidth,\n      interactiveCursorClass: edgeInteractiveCursor,\n      onDrag: this.handleEdge2Drag,\n      onDragComplete: onDragComplete\n    }), React.createElement(HoverTextNearMouse, Object.assign({\n      show: hoverTextEnabled && hover\n    }, restHoverTextProps, {\n      text: selected ? hoverTextSelected : hoverTextUnselected\n    })));\n  }\n}\nEachLinearRegressionChannel.defaultProps = {\n  appearance: {\n    stroke: \"#000000\",\n    strokeWidth: 1,\n    fill: \"rgba(138, 175, 226, 0.7)\",\n    edgeStrokeWidth: 2,\n    edgeStroke: \"#000000\",\n    edgeFill: \"#FFFFFF\",\n    r: 5\n  },\n  interactive: true,\n  selected: false,\n  hoverText: Object.assign(Object.assign({}, HoverTextNearMouse.defaultProps), {\n    enable: true,\n    bgHeight: 18,\n    bgWidth: 175,\n    text: \"Click and drag the edge circles\"\n  })\n};\nexport function getNewXY(moreProps, snapTo) {\n  const {\n    xScale,\n    xAccessor,\n    plotData,\n    mouseXY\n  } = moreProps;\n  const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n  const x = xAccessor(currentItem);\n  const y = snapTo(currentItem);\n  return [x, y];\n}","map":{"version":3,"names":["getCurrentItem","React","isHover","saveNodeType","HoverTextNearMouse","ClickableCircle","edge1Provider","edge2Provider","LinearRegressionChannelWithArea","EachLinearRegressionChannel","Component","constructor","props","handleHover","_","moreProps","state","hover","hovering","setState","handleEdge2Drag","e","index","onDrag","snapTo","x1Value","undefined","x2Value","getNewXY","handleEdge1Drag","bind","render","appearance","edgeInteractiveCursor","hoverText","interactive","selected","onDragComplete","stroke","strokeWidth","fill","r","edgeStrokeWidth","edgeFill","edgeStroke","hoverHandler","onHover","onUnHover","enable","hoverTextEnabled","selectedText","hoverTextSelected","text","hoverTextUnselected","restHoverTextProps","__rest","createElement","Object","assign","ref","fillStyle","strokeStyle","show","xyProvider","interactiveCursorClass","defaultProps","bgHeight","bgWidth","xScale","xAccessor","plotData","mouseXY","currentItem","x","y"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\interactive\\src\\wrapper\\EachLinearRegressionChannel.tsx"],"sourcesContent":["import { getCurrentItem } from \"@react-financial-charts/core/lib/utils/ChartDataUtil\";\nimport * as React from \"react\";\nimport { isHover, saveNodeType } from \"../utils\";\nimport { HoverTextNearMouse, ClickableCircle } from \"../components\";\nimport {\n    edge1Provider,\n    edge2Provider,\n    LinearRegressionChannelWithArea,\n} from \"../components/LinearRegressionChannelWithArea\";\n\nexport interface EachLinearRegressionChannelProps {\n    readonly defaultClassName?: string;\n    readonly x1Value: any;\n    readonly x2Value: any;\n    readonly index?: number;\n    readonly appearance: {\n        readonly stroke: string;\n        readonly strokeWidth: number;\n        readonly fill: string;\n        readonly edgeStrokeWidth: number;\n        readonly edgeStroke: string;\n        readonly edgeFill: string;\n        readonly r: number;\n    };\n    readonly edgeInteractiveCursor?: string;\n    readonly onDrag?: (e: React.MouseEvent, index: number | undefined, x1y1: { x1Value: any; x2Value: any }) => void;\n    readonly onDragComplete?: (e: React.MouseEvent, moreProps: any) => void;\n    readonly snapTo?: (datum: any) => number;\n    readonly interactive: boolean;\n    readonly selected: boolean;\n    readonly hoverText: {\n        readonly enable: boolean;\n        readonly fontFamily: string;\n        readonly fontSize: number;\n        readonly fill: string;\n        readonly text: string;\n        readonly bgFill: string;\n        readonly bgOpacity: number;\n        readonly bgWidth: number | string;\n        readonly bgHeight: number | string;\n        readonly selectedText: string;\n    };\n}\n\ninterface EachLinearRegressionChannelState {\n    hover: boolean;\n}\n\nexport class EachLinearRegressionChannel extends React.Component<\n    EachLinearRegressionChannelProps,\n    EachLinearRegressionChannelState\n> {\n    public static defaultProps = {\n        appearance: {\n            stroke: \"#000000\",\n            strokeWidth: 1,\n            fill: \"rgba(138, 175, 226, 0.7)\",\n            edgeStrokeWidth: 2,\n            edgeStroke: \"#000000\",\n            edgeFill: \"#FFFFFF\",\n            r: 5,\n        },\n        interactive: true,\n        selected: false,\n        hoverText: {\n            ...HoverTextNearMouse.defaultProps,\n            enable: true,\n            bgHeight: 18,\n            bgWidth: 175,\n            text: \"Click and drag the edge circles\",\n        },\n    };\n\n    // @ts-ignore\n    private isHover: any;\n    private saveNodeType: any;\n\n    public constructor(props: EachLinearRegressionChannelProps) {\n        super(props);\n\n        this.isHover = isHover.bind(this);\n        this.saveNodeType = saveNodeType.bind(this);\n\n        this.state = {\n            hover: false,\n        };\n    }\n\n    public render() {\n        const {\n            x1Value,\n            x2Value,\n            appearance,\n            edgeInteractiveCursor,\n            hoverText,\n            interactive,\n            selected,\n            onDragComplete,\n        } = this.props;\n        const { stroke, strokeWidth, fill, r, edgeStrokeWidth, edgeFill, edgeStroke } = appearance;\n        const { hover } = this.state;\n\n        const hoverHandler = interactive ? { onHover: this.handleHover, onUnHover: this.handleHover } : {};\n\n        const {\n            enable: hoverTextEnabled,\n            selectedText: hoverTextSelected,\n            text: hoverTextUnselected,\n            ...restHoverTextProps\n        } = hoverText;\n\n        return (\n            <g>\n                <LinearRegressionChannelWithArea\n                    ref={this.saveNodeType(\"area\")}\n                    selected={selected || hover}\n                    {...hoverHandler}\n                    x1Value={x1Value}\n                    x2Value={x2Value}\n                    fillStyle={fill}\n                    strokeStyle={stroke}\n                    strokeWidth={hover || selected ? strokeWidth + 1 : strokeWidth}\n                />\n                <ClickableCircle\n                    ref={this.saveNodeType(\"edge1\")}\n                    show={selected || hover}\n                    xyProvider={edge1Provider(this.props)}\n                    r={r}\n                    fillStyle={edgeFill}\n                    strokeStyle={edgeStroke}\n                    strokeWidth={edgeStrokeWidth}\n                    interactiveCursorClass={edgeInteractiveCursor}\n                    onDrag={this.handleEdge1Drag}\n                    onDragComplete={onDragComplete}\n                />\n                <ClickableCircle\n                    ref={this.saveNodeType(\"edge2\")}\n                    show={selected || hover}\n                    xyProvider={edge2Provider(this.props)}\n                    r={r}\n                    fillStyle={edgeFill}\n                    strokeStyle={edgeStroke}\n                    strokeWidth={edgeStrokeWidth}\n                    interactiveCursorClass={edgeInteractiveCursor}\n                    onDrag={this.handleEdge2Drag}\n                    onDragComplete={onDragComplete}\n                />\n                <HoverTextNearMouse\n                    show={hoverTextEnabled && hover}\n                    {...restHoverTextProps}\n                    text={selected ? hoverTextSelected : hoverTextUnselected}\n                />\n            </g>\n        );\n    }\n\n    private readonly handleHover = (_: React.MouseEvent, moreProps: any) => {\n        if (this.state.hover !== moreProps.hovering) {\n            this.setState({\n                hover: moreProps.hovering,\n            });\n        }\n    };\n\n    private readonly handleEdge2Drag = (e: React.MouseEvent, moreProps: any) => {\n        const { index, onDrag, snapTo, x1Value } = this.props;\n        if (onDrag === undefined) {\n            return;\n        }\n\n        const [x2Value] = getNewXY(moreProps, snapTo);\n\n        onDrag(e, index, {\n            x1Value,\n            x2Value,\n        });\n    };\n\n    private readonly handleEdge1Drag = (e: React.MouseEvent, moreProps: any) => {\n        const { index, onDrag, snapTo, x2Value } = this.props;\n        if (onDrag === undefined) {\n            return;\n        }\n\n        const [x1Value] = getNewXY(moreProps, snapTo);\n\n        onDrag(e, index, {\n            x1Value,\n            x2Value,\n        });\n    };\n}\n\nexport function getNewXY(moreProps: any, snapTo: any) {\n    const { xScale, xAccessor, plotData, mouseXY } = moreProps;\n\n    const currentItem = getCurrentItem(xScale, xAccessor, mouseXY, plotData);\n    const x = xAccessor(currentItem);\n    const y = snapTo(currentItem);\n\n    return [x, y];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}