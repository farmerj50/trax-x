{"ast":null,"code":"import { functor, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport * as React from \"react\";\nexport class CandlestickSeries extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.drawOnCanvas = (ctx, moreProps) => {\n      const {\n        candleStrokeWidth = CandlestickSeries.defaultProps.candleStrokeWidth\n      } = this.props;\n      const {\n        xScale,\n        chartConfig: {\n          yScale\n        },\n        plotData,\n        xAccessor\n      } = moreProps;\n      const candleData = this.getCandleData(xAccessor, xScale, yScale, plotData);\n      const wickNest = group(candleData, d => d.wick.stroke);\n      wickNest.forEach((values, key) => {\n        ctx.fillStyle = key;\n        values.forEach(each => {\n          const d = each.wick;\n          ctx.fillRect(d.x - 0.5, d.y1, 1, d.y2 - d.y1);\n          ctx.fillRect(d.x - 0.5, d.y3, 1, d.y4 - d.y3);\n        });\n      });\n      const candleNest = group(candleData, d => d.stroke,\n      // @ts-ignore typings are incorrect for d3-array\n      d => d.fill);\n      candleNest.forEach((strokeValues, strokeKey) => {\n        if (strokeKey !== \"none\") {\n          // @ts-ignore\n          ctx.strokeStyle = strokeKey;\n          ctx.lineWidth = candleStrokeWidth;\n        }\n        strokeValues.forEach((values, key) => {\n          // @ts-ignore\n          ctx.fillStyle = key;\n          // @ts-ignore\n          values.forEach(d => {\n            if (d.width <= 1) {\n              ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n            } else if (d.height === 0) {\n              ctx.fillRect(d.x - 0.5, d.y, d.width, 1);\n            } else {\n              ctx.fillRect(d.x - 0.5, d.y, d.width, d.height);\n              if (strokeKey !== \"none\") {\n                ctx.strokeRect(d.x, d.y, d.width, d.height);\n              }\n            }\n          });\n        });\n      });\n    };\n    this.getCandleData = (xAccessor, xScale, yScale, plotData) => {\n      const {\n        fill: fillProp,\n        stroke: strokeProp,\n        yAccessor,\n        wickStroke: wickStrokeProp\n      } = this.props;\n      const fill = functor(fillProp);\n      const stroke = functor(strokeProp);\n      const wickStroke = functor(wickStrokeProp);\n      const widthFunctor = functor(this.props.width);\n      const width = widthFunctor(this.props, {\n        xScale,\n        xAccessor,\n        plotData\n      });\n      const offset = 0.5 * width;\n      return plotData.filter(d => {\n        const ohlc = yAccessor(d);\n        if (ohlc === undefined) {\n          return false;\n        }\n        return true;\n      }).map(d => {\n        const ohlc = yAccessor(d);\n        if (ohlc === undefined) {\n          return undefined;\n        }\n        const xValue = xAccessor(d);\n        const x = xScale(xValue);\n        const y = Math.round(yScale(Math.max(ohlc.open, ohlc.close)));\n        const height = Math.max(1, Math.round(Math.abs(yScale(ohlc.open) - yScale(ohlc.close))));\n        return {\n          x: x - offset,\n          y,\n          wick: {\n            stroke: wickStroke(ohlc),\n            x,\n            y1: Math.round(yScale(ohlc.high)),\n            y2: y,\n            y3: y + height,\n            y4: Math.round(yScale(ohlc.low))\n          },\n          height,\n          width: offset * 2,\n          fill: fill(ohlc),\n          stroke: stroke(ohlc),\n          direction: ohlc.close - ohlc.open\n        };\n      }).filter(d => d !== undefined);\n    };\n  }\n  render() {\n    const {\n      clip\n    } = this.props;\n    return React.createElement(GenericChartComponent, {\n      clip: clip,\n      canvasDraw: this.drawOnCanvas,\n      canvasToDraw: getAxisCanvas,\n      drawOn: [\"pan\"]\n    });\n  }\n}\nCandlestickSeries.defaultProps = {\n  candleStrokeWidth: 0.5,\n  clip: true,\n  fill: d => d.close > d.open ? \"#26a69a\" : \"#ef5350\",\n  stroke: \"none\",\n  wickStroke: d => d.close > d.open ? \"#26a69a\" : \"#ef5350\",\n  width: plotDataLengthBarWidth,\n  widthRatio: 0.8,\n  yAccessor: d => ({\n    open: d.open,\n    high: d.high,\n    low: d.low,\n    close: d.close\n  })\n};","map":{"version":3,"names":["functor","getAxisCanvas","GenericChartComponent","plotDataLengthBarWidth","group","React","CandlestickSeries","Component","constructor","drawOnCanvas","ctx","moreProps","candleStrokeWidth","defaultProps","props","xScale","chartConfig","yScale","plotData","xAccessor","candleData","getCandleData","wickNest","d","wick","stroke","forEach","values","key","fillStyle","each","fillRect","x","y1","y2","y3","y4","candleNest","fill","strokeValues","strokeKey","strokeStyle","lineWidth","width","y","height","strokeRect","fillProp","strokeProp","yAccessor","wickStroke","wickStrokeProp","widthFunctor","offset","filter","ohlc","undefined","map","xValue","Math","round","max","open","close","abs","high","low","direction","render","clip","createElement","canvasDraw","canvasToDraw","drawOn","widthRatio"],"sources":["C:\\Users\\gabby\\trax-x\\node_modules\\@react-financial-charts\\series\\src\\CandlestickSeries.tsx"],"sourcesContent":["import { functor, getAxisCanvas, GenericChartComponent, plotDataLengthBarWidth } from \"@react-financial-charts/core\";\nimport { group } from \"d3-array\";\nimport { ScaleContinuousNumeric, ScaleTime } from \"d3-scale\";\nimport * as React from \"react\";\n\nexport interface ICandle {\n    readonly x: number;\n    readonly y: number;\n    readonly height: number;\n    readonly fill: string;\n    readonly stroke: string;\n    readonly direction: number;\n    readonly width: number;\n    readonly wick: {\n        readonly stroke: string;\n        readonly x: number;\n        readonly y1: number;\n        readonly y2: number;\n        readonly y3: number;\n        readonly y4: number;\n    };\n}\n\nexport interface CandlestickSeriesProps {\n    readonly candleStrokeWidth?: number;\n    readonly clip?: boolean;\n    readonly fill?: string | ((data: any) => string);\n    readonly stroke?: string | ((data: any) => string);\n    readonly wickStroke?: string | ((data: any) => string);\n    readonly width?: number | ((props: CandlestickSeriesProps, moreProps: any) => number);\n    readonly widthRatio?: number;\n    readonly yAccessor: (data: any) => { open: number; high: number; low: number; close: number } | undefined;\n}\n\nexport class CandlestickSeries extends React.Component<CandlestickSeriesProps> {\n    public static defaultProps = {\n        candleStrokeWidth: 0.5,\n        clip: true,\n        fill: (d: any) => (d.close > d.open ? \"#26a69a\" : \"#ef5350\"),\n        stroke: \"none\",\n        wickStroke: (d: any) => (d.close > d.open ? \"#26a69a\" : \"#ef5350\"),\n        width: plotDataLengthBarWidth,\n        widthRatio: 0.8,\n        yAccessor: (d: any) => ({ open: d.open, high: d.high, low: d.low, close: d.close }),\n    };\n\n    public render() {\n        const { clip } = this.props;\n\n        return (\n            <GenericChartComponent\n                clip={clip}\n                canvasDraw={this.drawOnCanvas}\n                canvasToDraw={getAxisCanvas}\n                drawOn={[\"pan\"]}\n            />\n        );\n    }\n\n    private readonly drawOnCanvas = (ctx: CanvasRenderingContext2D, moreProps: any) => {\n        const { candleStrokeWidth = CandlestickSeries.defaultProps.candleStrokeWidth } = this.props;\n        const {\n            xScale,\n            chartConfig: { yScale },\n            plotData,\n            xAccessor,\n        } = moreProps;\n\n        const candleData = this.getCandleData(xAccessor, xScale, yScale, plotData);\n\n        const wickNest = group(candleData, (d) => d.wick.stroke);\n\n        wickNest.forEach((values, key) => {\n            ctx.fillStyle = key;\n            values.forEach((each) => {\n                const d = each.wick;\n\n                ctx.fillRect(d.x - 0.5, d.y1, 1, d.y2 - d.y1);\n                ctx.fillRect(d.x - 0.5, d.y3, 1, d.y4 - d.y3);\n            });\n        });\n\n        const candleNest = group(\n            candleData,\n            (d) => d.stroke,\n            // @ts-ignore typings are incorrect for d3-array\n            (d) => d.fill,\n        );\n\n        candleNest.forEach((strokeValues, strokeKey) => {\n            if (strokeKey !== \"none\") {\n                // @ts-ignore\n                ctx.strokeStyle = strokeKey;\n                ctx.lineWidth = candleStrokeWidth;\n            }\n            strokeValues.forEach((values, key) => {\n                // @ts-ignore\n                ctx.fillStyle = key;\n\n                // @ts-ignore\n                values.forEach((d) => {\n                    if (d.width <= 1) {\n                        ctx.fillRect(d.x - 0.5, d.y, 1, d.height);\n                    } else if (d.height === 0) {\n                        ctx.fillRect(d.x - 0.5, d.y, d.width, 1);\n                    } else {\n                        ctx.fillRect(d.x - 0.5, d.y, d.width, d.height);\n                        if (strokeKey !== \"none\") {\n                            ctx.strokeRect(d.x, d.y, d.width, d.height);\n                        }\n                    }\n                });\n            });\n        });\n    };\n\n    private readonly getCandleData = (\n        xAccessor: (data: any) => number | Date,\n        xScale: ScaleContinuousNumeric<number, number> | ScaleTime<number, number>,\n        yScale: ScaleContinuousNumeric<number, number>,\n        plotData: any[],\n    ) => {\n        const { fill: fillProp, stroke: strokeProp, yAccessor, wickStroke: wickStrokeProp } = this.props;\n\n        const fill = functor(fillProp);\n        const stroke = functor(strokeProp);\n        const wickStroke = functor(wickStrokeProp);\n        const widthFunctor = functor(this.props.width);\n        const width = widthFunctor(this.props, {\n            xScale,\n            xAccessor,\n            plotData,\n        });\n\n        const offset = 0.5 * width;\n\n        return plotData\n            .filter((d) => {\n                const ohlc = yAccessor(d);\n                if (ohlc === undefined) {\n                    return false;\n                }\n\n                return true;\n            })\n            .map((d) => {\n                const ohlc = yAccessor(d);\n                if (ohlc === undefined) {\n                    return undefined;\n                }\n\n                const xValue = xAccessor(d);\n                const x = xScale(xValue);\n                const y = Math.round(yScale(Math.max(ohlc.open, ohlc.close)));\n                const height = Math.max(1, Math.round(Math.abs(yScale(ohlc.open) - yScale(ohlc.close))));\n\n                return {\n                    x: x - offset,\n                    y,\n                    wick: {\n                        stroke: wickStroke(ohlc),\n                        x,\n                        y1: Math.round(yScale(ohlc.high)),\n                        y2: y,\n                        y3: y + height,\n                        y4: Math.round(yScale(ohlc.low)),\n                    },\n                    height,\n                    width: offset * 2,\n                    fill: fill(ohlc),\n                    stroke: stroke(ohlc),\n                    direction: ohlc.close - ohlc.open,\n                };\n            })\n            .filter((d) => d !== undefined) as ICandle[];\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}